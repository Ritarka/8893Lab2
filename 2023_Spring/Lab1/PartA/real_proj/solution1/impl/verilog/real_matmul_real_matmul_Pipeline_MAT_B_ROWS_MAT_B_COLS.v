// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module real_matmul_real_matmul_Pipeline_MAT_B_ROWS_MAT_B_COLS (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_mem_AWVALID,
        m_axi_mem_AWREADY,
        m_axi_mem_AWADDR,
        m_axi_mem_AWID,
        m_axi_mem_AWLEN,
        m_axi_mem_AWSIZE,
        m_axi_mem_AWBURST,
        m_axi_mem_AWLOCK,
        m_axi_mem_AWCACHE,
        m_axi_mem_AWPROT,
        m_axi_mem_AWQOS,
        m_axi_mem_AWREGION,
        m_axi_mem_AWUSER,
        m_axi_mem_WVALID,
        m_axi_mem_WREADY,
        m_axi_mem_WDATA,
        m_axi_mem_WSTRB,
        m_axi_mem_WLAST,
        m_axi_mem_WID,
        m_axi_mem_WUSER,
        m_axi_mem_ARVALID,
        m_axi_mem_ARREADY,
        m_axi_mem_ARADDR,
        m_axi_mem_ARID,
        m_axi_mem_ARLEN,
        m_axi_mem_ARSIZE,
        m_axi_mem_ARBURST,
        m_axi_mem_ARLOCK,
        m_axi_mem_ARCACHE,
        m_axi_mem_ARPROT,
        m_axi_mem_ARQOS,
        m_axi_mem_ARREGION,
        m_axi_mem_ARUSER,
        m_axi_mem_RVALID,
        m_axi_mem_RREADY,
        m_axi_mem_RDATA,
        m_axi_mem_RLAST,
        m_axi_mem_RID,
        m_axi_mem_RFIFONUM,
        m_axi_mem_RUSER,
        m_axi_mem_RRESP,
        m_axi_mem_BVALID,
        m_axi_mem_BREADY,
        m_axi_mem_BRESP,
        m_axi_mem_BID,
        m_axi_mem_BUSER,
        sext_ln45,
        MatB_V_address0,
        MatB_V_ce0,
        MatB_V_we0,
        MatB_V_d0,
        MatB_V_1_address0,
        MatB_V_1_ce0,
        MatB_V_1_we0,
        MatB_V_1_d0,
        MatB_V_2_address0,
        MatB_V_2_ce0,
        MatB_V_2_we0,
        MatB_V_2_d0,
        MatB_V_3_address0,
        MatB_V_3_ce0,
        MatB_V_3_we0,
        MatB_V_3_d0,
        MatB_V_4_address0,
        MatB_V_4_ce0,
        MatB_V_4_we0,
        MatB_V_4_d0,
        MatB_V_5_address0,
        MatB_V_5_ce0,
        MatB_V_5_we0,
        MatB_V_5_d0,
        MatB_V_6_address0,
        MatB_V_6_ce0,
        MatB_V_6_we0,
        MatB_V_6_d0,
        MatB_V_7_address0,
        MatB_V_7_ce0,
        MatB_V_7_we0,
        MatB_V_7_d0,
        MatB_V_8_address0,
        MatB_V_8_ce0,
        MatB_V_8_we0,
        MatB_V_8_d0,
        MatB_V_9_address0,
        MatB_V_9_ce0,
        MatB_V_9_we0,
        MatB_V_9_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_mem_AWVALID;
input   m_axi_mem_AWREADY;
output  [63:0] m_axi_mem_AWADDR;
output  [0:0] m_axi_mem_AWID;
output  [31:0] m_axi_mem_AWLEN;
output  [2:0] m_axi_mem_AWSIZE;
output  [1:0] m_axi_mem_AWBURST;
output  [1:0] m_axi_mem_AWLOCK;
output  [3:0] m_axi_mem_AWCACHE;
output  [2:0] m_axi_mem_AWPROT;
output  [3:0] m_axi_mem_AWQOS;
output  [3:0] m_axi_mem_AWREGION;
output  [0:0] m_axi_mem_AWUSER;
output   m_axi_mem_WVALID;
input   m_axi_mem_WREADY;
output  [127:0] m_axi_mem_WDATA;
output  [15:0] m_axi_mem_WSTRB;
output   m_axi_mem_WLAST;
output  [0:0] m_axi_mem_WID;
output  [0:0] m_axi_mem_WUSER;
output   m_axi_mem_ARVALID;
input   m_axi_mem_ARREADY;
output  [63:0] m_axi_mem_ARADDR;
output  [0:0] m_axi_mem_ARID;
output  [31:0] m_axi_mem_ARLEN;
output  [2:0] m_axi_mem_ARSIZE;
output  [1:0] m_axi_mem_ARBURST;
output  [1:0] m_axi_mem_ARLOCK;
output  [3:0] m_axi_mem_ARCACHE;
output  [2:0] m_axi_mem_ARPROT;
output  [3:0] m_axi_mem_ARQOS;
output  [3:0] m_axi_mem_ARREGION;
output  [0:0] m_axi_mem_ARUSER;
input   m_axi_mem_RVALID;
output   m_axi_mem_RREADY;
input  [127:0] m_axi_mem_RDATA;
input   m_axi_mem_RLAST;
input  [0:0] m_axi_mem_RID;
input  [8:0] m_axi_mem_RFIFONUM;
input  [0:0] m_axi_mem_RUSER;
input  [1:0] m_axi_mem_RRESP;
input   m_axi_mem_BVALID;
output   m_axi_mem_BREADY;
input  [1:0] m_axi_mem_BRESP;
input  [0:0] m_axi_mem_BID;
input  [0:0] m_axi_mem_BUSER;
input  [59:0] sext_ln45;
output  [11:0] MatB_V_address0;
output   MatB_V_ce0;
output   MatB_V_we0;
output  [15:0] MatB_V_d0;
output  [11:0] MatB_V_1_address0;
output   MatB_V_1_ce0;
output   MatB_V_1_we0;
output  [15:0] MatB_V_1_d0;
output  [11:0] MatB_V_2_address0;
output   MatB_V_2_ce0;
output   MatB_V_2_we0;
output  [15:0] MatB_V_2_d0;
output  [11:0] MatB_V_3_address0;
output   MatB_V_3_ce0;
output   MatB_V_3_we0;
output  [15:0] MatB_V_3_d0;
output  [11:0] MatB_V_4_address0;
output   MatB_V_4_ce0;
output   MatB_V_4_we0;
output  [15:0] MatB_V_4_d0;
output  [11:0] MatB_V_5_address0;
output   MatB_V_5_ce0;
output   MatB_V_5_we0;
output  [15:0] MatB_V_5_d0;
output  [11:0] MatB_V_6_address0;
output   MatB_V_6_ce0;
output   MatB_V_6_we0;
output  [15:0] MatB_V_6_d0;
output  [11:0] MatB_V_7_address0;
output   MatB_V_7_ce0;
output   MatB_V_7_we0;
output  [15:0] MatB_V_7_d0;
output  [11:0] MatB_V_8_address0;
output   MatB_V_8_ce0;
output   MatB_V_8_we0;
output  [15:0] MatB_V_8_d0;
output  [11:0] MatB_V_9_address0;
output   MatB_V_9_ce0;
output   MatB_V_9_we0;
output  [15:0] MatB_V_9_d0;

reg ap_idle;
reg m_axi_mem_RREADY;
reg MatB_V_ce0;
reg MatB_V_we0;
reg MatB_V_1_ce0;
reg MatB_V_1_we0;
reg MatB_V_2_ce0;
reg MatB_V_2_we0;
reg MatB_V_3_ce0;
reg MatB_V_3_we0;
reg MatB_V_4_ce0;
reg MatB_V_4_we0;
reg MatB_V_5_ce0;
reg MatB_V_5_we0;
reg MatB_V_6_ce0;
reg MatB_V_6_we0;
reg MatB_V_7_ce0;
reg MatB_V_7_we0;
reg MatB_V_8_ce0;
reg MatB_V_8_we0;
reg MatB_V_9_ce0;
reg MatB_V_9_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
reg   [0:0] icmp_ln45_reg_521;
reg   [0:0] icmp_ln45_reg_521_pp0_iter11_reg;
reg   [0:0] icmp_ln49_reg_541;
reg   [0:0] icmp_ln49_reg_541_pp0_iter11_reg;
reg    ap_predicate_op71_read_state13;
reg    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln45_fu_305_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    mem_blk_n_R;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln45_reg_521_pp0_iter1_reg;
reg   [0:0] icmp_ln45_reg_521_pp0_iter2_reg;
reg   [0:0] icmp_ln45_reg_521_pp0_iter3_reg;
reg   [0:0] icmp_ln45_reg_521_pp0_iter4_reg;
reg   [0:0] icmp_ln45_reg_521_pp0_iter5_reg;
reg   [0:0] icmp_ln45_reg_521_pp0_iter6_reg;
reg   [0:0] icmp_ln45_reg_521_pp0_iter7_reg;
reg   [0:0] icmp_ln45_reg_521_pp0_iter8_reg;
reg   [0:0] icmp_ln45_reg_521_pp0_iter9_reg;
reg   [0:0] icmp_ln45_reg_521_pp0_iter10_reg;
reg   [0:0] icmp_ln45_reg_521_pp0_iter12_reg;
wire   [0:0] icmp_ln47_fu_329_p2;
reg   [0:0] icmp_ln47_reg_525;
reg   [0:0] icmp_ln47_reg_525_pp0_iter1_reg;
reg   [0:0] icmp_ln47_reg_525_pp0_iter2_reg;
reg   [0:0] icmp_ln47_reg_525_pp0_iter3_reg;
reg   [0:0] icmp_ln47_reg_525_pp0_iter4_reg;
reg   [0:0] icmp_ln47_reg_525_pp0_iter5_reg;
reg   [0:0] icmp_ln47_reg_525_pp0_iter6_reg;
reg   [0:0] icmp_ln47_reg_525_pp0_iter7_reg;
reg   [0:0] icmp_ln47_reg_525_pp0_iter8_reg;
reg   [0:0] icmp_ln47_reg_525_pp0_iter9_reg;
reg   [0:0] icmp_ln47_reg_525_pp0_iter10_reg;
reg   [0:0] icmp_ln47_reg_525_pp0_iter11_reg;
reg   [0:0] icmp_ln47_reg_525_pp0_iter12_reg;
wire   [7:0] j_1_mid2_fu_335_p3;
reg   [7:0] j_1_mid2_reg_530;
reg   [7:0] j_1_mid2_reg_530_pp0_iter1_reg;
reg   [7:0] j_1_mid2_reg_530_pp0_iter2_reg;
wire   [7:0] select_ln45_fu_343_p3;
reg   [7:0] select_ln45_reg_535;
wire   [0:0] icmp_ln49_fu_355_p2;
reg   [0:0] icmp_ln49_reg_541_pp0_iter1_reg;
reg   [0:0] icmp_ln49_reg_541_pp0_iter2_reg;
reg   [0:0] icmp_ln49_reg_541_pp0_iter3_reg;
reg   [0:0] icmp_ln49_reg_541_pp0_iter4_reg;
reg   [0:0] icmp_ln49_reg_541_pp0_iter5_reg;
reg   [0:0] icmp_ln49_reg_541_pp0_iter6_reg;
reg   [0:0] icmp_ln49_reg_541_pp0_iter7_reg;
reg   [0:0] icmp_ln49_reg_541_pp0_iter8_reg;
reg   [0:0] icmp_ln49_reg_541_pp0_iter9_reg;
reg   [0:0] icmp_ln49_reg_541_pp0_iter10_reg;
reg   [0:0] icmp_ln49_reg_541_pp0_iter12_reg;
wire   [11:0] grp_fu_480_p3;
reg   [11:0] add_ln49_reg_555;
reg   [11:0] add_ln49_reg_555_pp0_iter5_reg;
reg   [11:0] add_ln49_reg_555_pp0_iter6_reg;
reg   [11:0] add_ln49_reg_555_pp0_iter7_reg;
reg   [11:0] add_ln49_reg_555_pp0_iter8_reg;
reg   [11:0] add_ln49_reg_555_pp0_iter9_reg;
reg   [11:0] add_ln49_reg_555_pp0_iter10_reg;
reg   [11:0] add_ln49_reg_555_pp0_iter11_reg;
reg   [11:0] add_ln49_reg_555_pp0_iter12_reg;
wire   [3:0] empty_44_fu_419_p1;
reg   [3:0] empty_44_reg_560;
reg   [127:0] mem_addr_read_reg_564;
reg    ap_condition_exit_pp0_iter12_stage0;
reg   [127:0] ap_phi_mux_empty_phi_fu_272_p4;
wire   [127:0] ap_phi_reg_pp0_iter13_empty_reg_269;
wire   [127:0] shiftreg13_cast_fu_433_p1;
wire   [63:0] zext_ln49_1_fu_438_p1;
reg   [111:0] shiftreg13_fu_112;
wire    ap_loop_init;
reg   [7:0] j_1_fu_116;
wire   [7:0] add_ln47_fu_361_p2;
reg   [7:0] ap_sig_allocacmp_j_1_load;
reg   [7:0] i_fu_120;
reg   [7:0] ap_sig_allocacmp_i_load;
reg   [14:0] indvar_flatten6_fu_124;
wire   [14:0] add_ln45_1_fu_311_p2;
reg   [14:0] ap_sig_allocacmp_indvar_flatten6_load;
wire   [15:0] trunc_ln49_fu_451_p1;
wire   [7:0] add_ln45_fu_323_p2;
wire   [2:0] empty_42_fu_351_p1;
wire   [4:0] grp_fu_382_p1;
wire   [7:0] mul106_fu_390_p0;
wire   [9:0] mul106_fu_390_p1;
wire   [16:0] mul106_fu_390_p2;
wire   [4:0] tmp_fu_396_p4;
wire   [3:0] grp_fu_382_p2;
wire   [111:0] shiftreg13_mid2_fu_426_p3;
wire   [4:0] grp_fu_480_p0;
wire   [7:0] grp_fu_480_p1;
wire   [7:0] grp_fu_480_p2;
reg    grp_fu_382_ce;
reg    grp_fu_480_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [11:0] grp_fu_480_p00;
wire   [11:0] grp_fu_480_p20;
wire   [16:0] mul106_fu_390_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_done_reg = 1'b0;
end

real_matmul_urem_8ns_5ns_4_12_1 #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 4 ))
urem_8ns_5ns_4_12_1_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln45_reg_535),
    .din1(grp_fu_382_p1),
    .ce(grp_fu_382_ce),
    .dout(grp_fu_382_p2)
);

real_matmul_mul_8ns_10ns_17_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 17 ))
mul_8ns_10ns_17_1_1_U23(
    .din0(mul106_fu_390_p0),
    .din1(mul106_fu_390_p1),
    .dout(mul106_fu_390_p2)
);

real_matmul_mac_muladd_5ns_8ns_8ns_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 12 ))
mac_muladd_5ns_8ns_8ns_12_4_1_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_480_p0),
    .din1(grp_fu_480_p1),
    .din2(grp_fu_480_p2),
    .ce(grp_fu_480_ce),
    .dout(grp_fu_480_p3)
);

real_matmul_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter12_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter12_stage0)) begin
            ap_enable_reg_pp0_iter13 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln45_fu_305_p2 == 1'd0))) begin
            i_fu_120 <= select_ln45_fu_343_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_120 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln45_fu_305_p2 == 1'd0))) begin
            indvar_flatten6_fu_124 <= add_ln45_1_fu_311_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten6_fu_124 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln45_fu_305_p2 == 1'd0))) begin
            j_1_fu_116 <= add_ln47_fu_361_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_1_fu_116 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            shiftreg13_fu_112 <= 112'd0;
        end else if ((ap_enable_reg_pp0_iter13 == 1'b1)) begin
            shiftreg13_fu_112 <= {{ap_phi_mux_empty_phi_fu_272_p4[127:16]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_521_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln49_reg_555 <= grp_fu_480_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln49_reg_555_pp0_iter10_reg <= add_ln49_reg_555_pp0_iter9_reg;
        add_ln49_reg_555_pp0_iter11_reg <= add_ln49_reg_555_pp0_iter10_reg;
        add_ln49_reg_555_pp0_iter12_reg <= add_ln49_reg_555_pp0_iter11_reg;
        add_ln49_reg_555_pp0_iter5_reg <= add_ln49_reg_555;
        add_ln49_reg_555_pp0_iter6_reg <= add_ln49_reg_555_pp0_iter5_reg;
        add_ln49_reg_555_pp0_iter7_reg <= add_ln49_reg_555_pp0_iter6_reg;
        add_ln49_reg_555_pp0_iter8_reg <= add_ln49_reg_555_pp0_iter7_reg;
        add_ln49_reg_555_pp0_iter9_reg <= add_ln49_reg_555_pp0_iter8_reg;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln45_reg_521_pp0_iter10_reg <= icmp_ln45_reg_521_pp0_iter9_reg;
        icmp_ln45_reg_521_pp0_iter11_reg <= icmp_ln45_reg_521_pp0_iter10_reg;
        icmp_ln45_reg_521_pp0_iter12_reg <= icmp_ln45_reg_521_pp0_iter11_reg;
        icmp_ln45_reg_521_pp0_iter2_reg <= icmp_ln45_reg_521_pp0_iter1_reg;
        icmp_ln45_reg_521_pp0_iter3_reg <= icmp_ln45_reg_521_pp0_iter2_reg;
        icmp_ln45_reg_521_pp0_iter4_reg <= icmp_ln45_reg_521_pp0_iter3_reg;
        icmp_ln45_reg_521_pp0_iter5_reg <= icmp_ln45_reg_521_pp0_iter4_reg;
        icmp_ln45_reg_521_pp0_iter6_reg <= icmp_ln45_reg_521_pp0_iter5_reg;
        icmp_ln45_reg_521_pp0_iter7_reg <= icmp_ln45_reg_521_pp0_iter6_reg;
        icmp_ln45_reg_521_pp0_iter8_reg <= icmp_ln45_reg_521_pp0_iter7_reg;
        icmp_ln45_reg_521_pp0_iter9_reg <= icmp_ln45_reg_521_pp0_iter8_reg;
        icmp_ln47_reg_525_pp0_iter10_reg <= icmp_ln47_reg_525_pp0_iter9_reg;
        icmp_ln47_reg_525_pp0_iter11_reg <= icmp_ln47_reg_525_pp0_iter10_reg;
        icmp_ln47_reg_525_pp0_iter12_reg <= icmp_ln47_reg_525_pp0_iter11_reg;
        icmp_ln47_reg_525_pp0_iter2_reg <= icmp_ln47_reg_525_pp0_iter1_reg;
        icmp_ln47_reg_525_pp0_iter3_reg <= icmp_ln47_reg_525_pp0_iter2_reg;
        icmp_ln47_reg_525_pp0_iter4_reg <= icmp_ln47_reg_525_pp0_iter3_reg;
        icmp_ln47_reg_525_pp0_iter5_reg <= icmp_ln47_reg_525_pp0_iter4_reg;
        icmp_ln47_reg_525_pp0_iter6_reg <= icmp_ln47_reg_525_pp0_iter5_reg;
        icmp_ln47_reg_525_pp0_iter7_reg <= icmp_ln47_reg_525_pp0_iter6_reg;
        icmp_ln47_reg_525_pp0_iter8_reg <= icmp_ln47_reg_525_pp0_iter7_reg;
        icmp_ln47_reg_525_pp0_iter9_reg <= icmp_ln47_reg_525_pp0_iter8_reg;
        icmp_ln49_reg_541_pp0_iter10_reg <= icmp_ln49_reg_541_pp0_iter9_reg;
        icmp_ln49_reg_541_pp0_iter11_reg <= icmp_ln49_reg_541_pp0_iter10_reg;
        icmp_ln49_reg_541_pp0_iter12_reg <= icmp_ln49_reg_541_pp0_iter11_reg;
        icmp_ln49_reg_541_pp0_iter2_reg <= icmp_ln49_reg_541_pp0_iter1_reg;
        icmp_ln49_reg_541_pp0_iter3_reg <= icmp_ln49_reg_541_pp0_iter2_reg;
        icmp_ln49_reg_541_pp0_iter4_reg <= icmp_ln49_reg_541_pp0_iter3_reg;
        icmp_ln49_reg_541_pp0_iter5_reg <= icmp_ln49_reg_541_pp0_iter4_reg;
        icmp_ln49_reg_541_pp0_iter6_reg <= icmp_ln49_reg_541_pp0_iter5_reg;
        icmp_ln49_reg_541_pp0_iter7_reg <= icmp_ln49_reg_541_pp0_iter6_reg;
        icmp_ln49_reg_541_pp0_iter8_reg <= icmp_ln49_reg_541_pp0_iter7_reg;
        icmp_ln49_reg_541_pp0_iter9_reg <= icmp_ln49_reg_541_pp0_iter8_reg;
        j_1_mid2_reg_530_pp0_iter2_reg <= j_1_mid2_reg_530_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln45_reg_521 <= icmp_ln45_fu_305_p2;
        icmp_ln45_reg_521_pp0_iter1_reg <= icmp_ln45_reg_521;
        icmp_ln47_reg_525_pp0_iter1_reg <= icmp_ln47_reg_525;
        icmp_ln49_reg_541_pp0_iter1_reg <= icmp_ln49_reg_541;
        j_1_mid2_reg_530_pp0_iter1_reg <= j_1_mid2_reg_530;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln45_reg_521_pp0_iter11_reg == 1'd0))) begin
        empty_44_reg_560 <= empty_44_fu_419_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_305_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln47_reg_525 <= icmp_ln47_fu_329_p2;
        icmp_ln49_reg_541 <= icmp_ln49_fu_355_p2;
        j_1_mid2_reg_530 <= j_1_mid2_fu_335_p3;
        select_ln45_reg_535 <= select_ln45_fu_343_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op71_read_state13 == 1'b1))) begin
        mem_addr_read_reg_564 <= m_axi_mem_RDATA;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatB_V_1_ce0 = 1'b1;
    end else begin
        MatB_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (empty_44_reg_560 == 4'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatB_V_1_we0 = 1'b1;
    end else begin
        MatB_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatB_V_2_ce0 = 1'b1;
    end else begin
        MatB_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (empty_44_reg_560 == 4'd2) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatB_V_2_we0 = 1'b1;
    end else begin
        MatB_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatB_V_3_ce0 = 1'b1;
    end else begin
        MatB_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (empty_44_reg_560 == 4'd3) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatB_V_3_we0 = 1'b1;
    end else begin
        MatB_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatB_V_4_ce0 = 1'b1;
    end else begin
        MatB_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (empty_44_reg_560 == 4'd4) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatB_V_4_we0 = 1'b1;
    end else begin
        MatB_V_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatB_V_5_ce0 = 1'b1;
    end else begin
        MatB_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (empty_44_reg_560 == 4'd5) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatB_V_5_we0 = 1'b1;
    end else begin
        MatB_V_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatB_V_6_ce0 = 1'b1;
    end else begin
        MatB_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (empty_44_reg_560 == 4'd6) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatB_V_6_we0 = 1'b1;
    end else begin
        MatB_V_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatB_V_7_ce0 = 1'b1;
    end else begin
        MatB_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (empty_44_reg_560 == 4'd7) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatB_V_7_we0 = 1'b1;
    end else begin
        MatB_V_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatB_V_8_ce0 = 1'b1;
    end else begin
        MatB_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (empty_44_reg_560 == 4'd8) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatB_V_8_we0 = 1'b1;
    end else begin
        MatB_V_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatB_V_9_ce0 = 1'b1;
    end else begin
        MatB_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & ((empty_44_reg_560 == 4'd9) | ((empty_44_reg_560 == 4'd10) | ((empty_44_reg_560 == 4'd11) | ((empty_44_reg_560 == 4'd12) | ((empty_44_reg_560 == 4'd13) | ((empty_44_reg_560 == 4'd14) | (empty_44_reg_560 == 4'd15))))))))) begin
        MatB_V_9_we0 = 1'b1;
    end else begin
        MatB_V_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatB_V_ce0 = 1'b1;
    end else begin
        MatB_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (empty_44_reg_560 == 4'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatB_V_we0 = 1'b1;
    end else begin
        MatB_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln45_fu_305_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln45_reg_521_pp0_iter11_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter12_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter12_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter12_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln45_reg_521_pp0_iter12_reg == 1'd0)) begin
        if ((icmp_ln49_reg_541_pp0_iter12_reg == 1'd0)) begin
            ap_phi_mux_empty_phi_fu_272_p4 = shiftreg13_cast_fu_433_p1;
        end else if ((icmp_ln49_reg_541_pp0_iter12_reg == 1'd1)) begin
            ap_phi_mux_empty_phi_fu_272_p4 = mem_addr_read_reg_564;
        end else begin
            ap_phi_mux_empty_phi_fu_272_p4 = ap_phi_reg_pp0_iter13_empty_reg_269;
        end
    end else begin
        ap_phi_mux_empty_phi_fu_272_p4 = ap_phi_reg_pp0_iter13_empty_reg_269;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 8'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_120;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten6_load = 15'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten6_load = indvar_flatten6_fu_124;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_j_1_load = 8'd0;
    end else begin
        ap_sig_allocacmp_j_1_load = j_1_fu_116;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_382_ce = 1'b1;
    end else begin
        grp_fu_382_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_480_ce = 1'b1;
    end else begin
        grp_fu_480_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op71_read_state13 == 1'b1))) begin
        m_axi_mem_RREADY = 1'b1;
    end else begin
        m_axi_mem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op71_read_state13 == 1'b1))) begin
        mem_blk_n_R = m_axi_mem_RVALID;
    end else begin
        mem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign MatB_V_1_address0 = zext_ln49_1_fu_438_p1;

assign MatB_V_1_d0 = trunc_ln49_fu_451_p1;

assign MatB_V_2_address0 = zext_ln49_1_fu_438_p1;

assign MatB_V_2_d0 = trunc_ln49_fu_451_p1;

assign MatB_V_3_address0 = zext_ln49_1_fu_438_p1;

assign MatB_V_3_d0 = trunc_ln49_fu_451_p1;

assign MatB_V_4_address0 = zext_ln49_1_fu_438_p1;

assign MatB_V_4_d0 = trunc_ln49_fu_451_p1;

assign MatB_V_5_address0 = zext_ln49_1_fu_438_p1;

assign MatB_V_5_d0 = trunc_ln49_fu_451_p1;

assign MatB_V_6_address0 = zext_ln49_1_fu_438_p1;

assign MatB_V_6_d0 = trunc_ln49_fu_451_p1;

assign MatB_V_7_address0 = zext_ln49_1_fu_438_p1;

assign MatB_V_7_d0 = trunc_ln49_fu_451_p1;

assign MatB_V_8_address0 = zext_ln49_1_fu_438_p1;

assign MatB_V_8_d0 = trunc_ln49_fu_451_p1;

assign MatB_V_9_address0 = zext_ln49_1_fu_438_p1;

assign MatB_V_9_d0 = trunc_ln49_fu_451_p1;

assign MatB_V_address0 = zext_ln49_1_fu_438_p1;

assign MatB_V_d0 = trunc_ln49_fu_451_p1;

assign add_ln45_1_fu_311_p2 = (ap_sig_allocacmp_indvar_flatten6_load + 15'd1);

assign add_ln45_fu_323_p2 = (ap_sig_allocacmp_i_load + 8'd1);

assign add_ln47_fu_361_p2 = (j_1_mid2_fu_335_p3 + 8'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter12 == 1'b1) & (ap_predicate_op71_read_state13 == 1'b1) & (m_axi_mem_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter12 == 1'b1) & (ap_predicate_op71_read_state13 == 1'b1) & (m_axi_mem_RVALID == 1'b0));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_pp0_stage0_iter12 = ((ap_predicate_op71_read_state13 == 1'b1) & (m_axi_mem_RVALID == 1'b0));
end

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter13_empty_reg_269 = 'bx;

always @ (*) begin
    ap_predicate_op71_read_state13 = ((icmp_ln49_reg_541_pp0_iter11_reg == 1'd1) & (icmp_ln45_reg_521_pp0_iter11_reg == 1'd0));
end

assign empty_42_fu_351_p1 = j_1_mid2_fu_335_p3[2:0];

assign empty_44_fu_419_p1 = grp_fu_382_p2[3:0];

assign grp_fu_382_p1 = 8'd10;

assign grp_fu_480_p0 = grp_fu_480_p00;

assign grp_fu_480_p00 = tmp_fu_396_p4;

assign grp_fu_480_p1 = 12'd200;

assign grp_fu_480_p2 = grp_fu_480_p20;

assign grp_fu_480_p20 = j_1_mid2_reg_530_pp0_iter2_reg;

assign icmp_ln45_fu_305_p2 = ((ap_sig_allocacmp_indvar_flatten6_load == 15'd30000) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_329_p2 = ((ap_sig_allocacmp_j_1_load == 8'd200) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_355_p2 = ((empty_42_fu_351_p1 == 3'd0) ? 1'b1 : 1'b0);

assign j_1_mid2_fu_335_p3 = ((icmp_ln47_fu_329_p2[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_j_1_load);

assign m_axi_mem_ARADDR = 64'd0;

assign m_axi_mem_ARBURST = 2'd0;

assign m_axi_mem_ARCACHE = 4'd0;

assign m_axi_mem_ARID = 1'd0;

assign m_axi_mem_ARLEN = 32'd0;

assign m_axi_mem_ARLOCK = 2'd0;

assign m_axi_mem_ARPROT = 3'd0;

assign m_axi_mem_ARQOS = 4'd0;

assign m_axi_mem_ARREGION = 4'd0;

assign m_axi_mem_ARSIZE = 3'd0;

assign m_axi_mem_ARUSER = 1'd0;

assign m_axi_mem_ARVALID = 1'b0;

assign m_axi_mem_AWADDR = 64'd0;

assign m_axi_mem_AWBURST = 2'd0;

assign m_axi_mem_AWCACHE = 4'd0;

assign m_axi_mem_AWID = 1'd0;

assign m_axi_mem_AWLEN = 32'd0;

assign m_axi_mem_AWLOCK = 2'd0;

assign m_axi_mem_AWPROT = 3'd0;

assign m_axi_mem_AWQOS = 4'd0;

assign m_axi_mem_AWREGION = 4'd0;

assign m_axi_mem_AWSIZE = 3'd0;

assign m_axi_mem_AWUSER = 1'd0;

assign m_axi_mem_AWVALID = 1'b0;

assign m_axi_mem_BREADY = 1'b0;

assign m_axi_mem_WDATA = 128'd0;

assign m_axi_mem_WID = 1'd0;

assign m_axi_mem_WLAST = 1'b0;

assign m_axi_mem_WSTRB = 16'd0;

assign m_axi_mem_WUSER = 1'd0;

assign m_axi_mem_WVALID = 1'b0;

assign mul106_fu_390_p0 = mul106_fu_390_p00;

assign mul106_fu_390_p00 = select_ln45_reg_535;

assign mul106_fu_390_p1 = 17'd410;

assign select_ln45_fu_343_p3 = ((icmp_ln47_fu_329_p2[0:0] == 1'b1) ? add_ln45_fu_323_p2 : ap_sig_allocacmp_i_load);

assign shiftreg13_cast_fu_433_p1 = shiftreg13_mid2_fu_426_p3;

assign shiftreg13_mid2_fu_426_p3 = ((icmp_ln47_reg_525_pp0_iter12_reg[0:0] == 1'b1) ? 112'd0 : shiftreg13_fu_112);

assign tmp_fu_396_p4 = {{mul106_fu_390_p2[16:12]}};

assign trunc_ln49_fu_451_p1 = ap_phi_mux_empty_phi_fu_272_p4[15:0];

assign zext_ln49_1_fu_438_p1 = add_ln49_reg_555_pp0_iter12_reg;

endmodule //real_matmul_real_matmul_Pipeline_MAT_B_ROWS_MAT_B_COLS
