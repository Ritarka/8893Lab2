// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module real_matmul_real_matmul_Pipeline_MAT_C_ROWS_MAT_C_COLS (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_mem_AWVALID,
        m_axi_mem_AWREADY,
        m_axi_mem_AWADDR,
        m_axi_mem_AWID,
        m_axi_mem_AWLEN,
        m_axi_mem_AWSIZE,
        m_axi_mem_AWBURST,
        m_axi_mem_AWLOCK,
        m_axi_mem_AWCACHE,
        m_axi_mem_AWPROT,
        m_axi_mem_AWQOS,
        m_axi_mem_AWREGION,
        m_axi_mem_AWUSER,
        m_axi_mem_WVALID,
        m_axi_mem_WREADY,
        m_axi_mem_WDATA,
        m_axi_mem_WSTRB,
        m_axi_mem_WLAST,
        m_axi_mem_WID,
        m_axi_mem_WUSER,
        m_axi_mem_ARVALID,
        m_axi_mem_ARREADY,
        m_axi_mem_ARADDR,
        m_axi_mem_ARID,
        m_axi_mem_ARLEN,
        m_axi_mem_ARSIZE,
        m_axi_mem_ARBURST,
        m_axi_mem_ARLOCK,
        m_axi_mem_ARCACHE,
        m_axi_mem_ARPROT,
        m_axi_mem_ARQOS,
        m_axi_mem_ARREGION,
        m_axi_mem_ARUSER,
        m_axi_mem_RVALID,
        m_axi_mem_RREADY,
        m_axi_mem_RDATA,
        m_axi_mem_RLAST,
        m_axi_mem_RID,
        m_axi_mem_RFIFONUM,
        m_axi_mem_RUSER,
        m_axi_mem_RRESP,
        m_axi_mem_BVALID,
        m_axi_mem_BREADY,
        m_axi_mem_BRESP,
        m_axi_mem_BID,
        m_axi_mem_BUSER,
        sext_ln91,
        MatC_V_address0,
        MatC_V_ce0,
        MatC_V_q0,
        MatC_V_1_address0,
        MatC_V_1_ce0,
        MatC_V_1_q0,
        MatC_V_2_address0,
        MatC_V_2_ce0,
        MatC_V_2_q0,
        MatC_V_3_address0,
        MatC_V_3_ce0,
        MatC_V_3_q0,
        MatC_V_4_address0,
        MatC_V_4_ce0,
        MatC_V_4_q0,
        MatC_V_5_address0,
        MatC_V_5_ce0,
        MatC_V_5_q0,
        MatC_V_6_address0,
        MatC_V_6_ce0,
        MatC_V_6_q0,
        MatC_V_7_address0,
        MatC_V_7_ce0,
        MatC_V_7_q0,
        MatC_V_8_address0,
        MatC_V_8_ce0,
        MatC_V_8_q0,
        MatC_V_9_address0,
        MatC_V_9_ce0,
        MatC_V_9_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_mem_AWVALID;
input   m_axi_mem_AWREADY;
output  [63:0] m_axi_mem_AWADDR;
output  [0:0] m_axi_mem_AWID;
output  [31:0] m_axi_mem_AWLEN;
output  [2:0] m_axi_mem_AWSIZE;
output  [1:0] m_axi_mem_AWBURST;
output  [1:0] m_axi_mem_AWLOCK;
output  [3:0] m_axi_mem_AWCACHE;
output  [2:0] m_axi_mem_AWPROT;
output  [3:0] m_axi_mem_AWQOS;
output  [3:0] m_axi_mem_AWREGION;
output  [0:0] m_axi_mem_AWUSER;
output   m_axi_mem_WVALID;
input   m_axi_mem_WREADY;
output  [127:0] m_axi_mem_WDATA;
output  [15:0] m_axi_mem_WSTRB;
output   m_axi_mem_WLAST;
output  [0:0] m_axi_mem_WID;
output  [0:0] m_axi_mem_WUSER;
output   m_axi_mem_ARVALID;
input   m_axi_mem_ARREADY;
output  [63:0] m_axi_mem_ARADDR;
output  [0:0] m_axi_mem_ARID;
output  [31:0] m_axi_mem_ARLEN;
output  [2:0] m_axi_mem_ARSIZE;
output  [1:0] m_axi_mem_ARBURST;
output  [1:0] m_axi_mem_ARLOCK;
output  [3:0] m_axi_mem_ARCACHE;
output  [2:0] m_axi_mem_ARPROT;
output  [3:0] m_axi_mem_ARQOS;
output  [3:0] m_axi_mem_ARREGION;
output  [0:0] m_axi_mem_ARUSER;
input   m_axi_mem_RVALID;
output   m_axi_mem_RREADY;
input  [127:0] m_axi_mem_RDATA;
input   m_axi_mem_RLAST;
input  [0:0] m_axi_mem_RID;
input  [8:0] m_axi_mem_RFIFONUM;
input  [0:0] m_axi_mem_RUSER;
input  [1:0] m_axi_mem_RRESP;
input   m_axi_mem_BVALID;
output   m_axi_mem_BREADY;
input  [1:0] m_axi_mem_BRESP;
input  [0:0] m_axi_mem_BID;
input  [0:0] m_axi_mem_BUSER;
input  [59:0] sext_ln91;
output  [10:0] MatC_V_address0;
output   MatC_V_ce0;
input  [15:0] MatC_V_q0;
output  [10:0] MatC_V_1_address0;
output   MatC_V_1_ce0;
input  [15:0] MatC_V_1_q0;
output  [10:0] MatC_V_2_address0;
output   MatC_V_2_ce0;
input  [15:0] MatC_V_2_q0;
output  [10:0] MatC_V_3_address0;
output   MatC_V_3_ce0;
input  [15:0] MatC_V_3_q0;
output  [10:0] MatC_V_4_address0;
output   MatC_V_4_ce0;
input  [15:0] MatC_V_4_q0;
output  [10:0] MatC_V_5_address0;
output   MatC_V_5_ce0;
input  [15:0] MatC_V_5_q0;
output  [10:0] MatC_V_6_address0;
output   MatC_V_6_ce0;
input  [15:0] MatC_V_6_q0;
output  [10:0] MatC_V_7_address0;
output   MatC_V_7_ce0;
input  [15:0] MatC_V_7_q0;
output  [10:0] MatC_V_8_address0;
output   MatC_V_8_ce0;
input  [15:0] MatC_V_8_q0;
output  [10:0] MatC_V_9_address0;
output   MatC_V_9_ce0;
input  [15:0] MatC_V_9_q0;

reg ap_idle;
reg m_axi_mem_WVALID;
reg MatC_V_ce0;
reg MatC_V_1_ce0;
reg MatC_V_2_ce0;
reg MatC_V_3_ce0;
reg MatC_V_4_ce0;
reg MatC_V_5_ce0;
reg MatC_V_6_ce0;
reg MatC_V_7_ce0;
reg MatC_V_8_ce0;
reg MatC_V_9_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
reg   [0:0] icmp_ln94_reg_546;
reg   [0:0] icmp_ln94_reg_546_pp0_iter11_reg;
reg    ap_block_state13_io;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln91_fu_295_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    mem_blk_n_W;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln91_reg_526;
reg   [0:0] icmp_ln91_reg_526_pp0_iter1_reg;
reg   [0:0] icmp_ln91_reg_526_pp0_iter2_reg;
reg   [0:0] icmp_ln91_reg_526_pp0_iter3_reg;
reg   [0:0] icmp_ln91_reg_526_pp0_iter4_reg;
reg   [0:0] icmp_ln91_reg_526_pp0_iter5_reg;
reg   [0:0] icmp_ln91_reg_526_pp0_iter6_reg;
reg   [0:0] icmp_ln91_reg_526_pp0_iter7_reg;
reg   [0:0] icmp_ln91_reg_526_pp0_iter8_reg;
reg   [0:0] icmp_ln91_reg_526_pp0_iter9_reg;
reg   [0:0] icmp_ln91_reg_526_pp0_iter10_reg;
wire   [0:0] icmp_ln93_fu_319_p2;
reg   [0:0] icmp_ln93_reg_530;
reg   [0:0] icmp_ln93_reg_530_pp0_iter1_reg;
reg   [0:0] icmp_ln93_reg_530_pp0_iter2_reg;
reg   [0:0] icmp_ln93_reg_530_pp0_iter3_reg;
reg   [0:0] icmp_ln93_reg_530_pp0_iter4_reg;
reg   [0:0] icmp_ln93_reg_530_pp0_iter5_reg;
reg   [0:0] icmp_ln93_reg_530_pp0_iter6_reg;
reg   [0:0] icmp_ln93_reg_530_pp0_iter7_reg;
reg   [0:0] icmp_ln93_reg_530_pp0_iter8_reg;
reg   [0:0] icmp_ln93_reg_530_pp0_iter9_reg;
reg   [0:0] icmp_ln93_reg_530_pp0_iter10_reg;
wire   [7:0] select_ln91_fu_325_p3;
reg   [7:0] select_ln91_reg_535;
reg   [7:0] select_ln91_reg_535_pp0_iter1_reg;
reg   [7:0] select_ln91_reg_535_pp0_iter2_reg;
wire   [6:0] select_ln91_2_fu_333_p3;
reg   [6:0] select_ln91_2_reg_540;
wire   [0:0] icmp_ln94_fu_351_p2;
reg   [0:0] icmp_ln94_reg_546_pp0_iter1_reg;
reg   [0:0] icmp_ln94_reg_546_pp0_iter2_reg;
reg   [0:0] icmp_ln94_reg_546_pp0_iter3_reg;
reg   [0:0] icmp_ln94_reg_546_pp0_iter4_reg;
reg   [0:0] icmp_ln94_reg_546_pp0_iter5_reg;
reg   [0:0] icmp_ln94_reg_546_pp0_iter6_reg;
reg   [0:0] icmp_ln94_reg_546_pp0_iter7_reg;
reg   [0:0] icmp_ln94_reg_546_pp0_iter8_reg;
reg   [0:0] icmp_ln94_reg_546_pp0_iter9_reg;
reg   [0:0] icmp_ln94_reg_546_pp0_iter10_reg;
wire   [10:0] grp_fu_485_p3;
reg   [10:0] add_ln94_reg_561;
reg   [10:0] add_ln94_reg_561_pp0_iter5_reg;
reg   [10:0] add_ln94_reg_561_pp0_iter6_reg;
reg   [10:0] add_ln94_reg_561_pp0_iter7_reg;
reg   [10:0] add_ln94_reg_561_pp0_iter8_reg;
wire   [6:0] grp_fu_341_p2;
reg   [6:0] urem_ln91_reg_616;
reg   [15:0] MatC_V_load_reg_621;
reg   [15:0] MatC_V_1_load_reg_626;
reg   [15:0] MatC_V_2_load_reg_631;
reg   [15:0] MatC_V_3_load_reg_636;
reg   [15:0] MatC_V_4_load_reg_641;
reg   [15:0] MatC_V_5_load_reg_646;
reg   [15:0] MatC_V_6_load_reg_651;
reg   [15:0] MatC_V_7_load_reg_656;
reg   [15:0] MatC_V_8_load_reg_661;
reg   [15:0] MatC_V_9_load_reg_666;
wire   [127:0] or_ln_fu_447_p3;
reg   [127:0] or_ln_reg_676;
reg    ap_condition_exit_pp0_iter11_stage0;
wire   [63:0] zext_ln94_1_fu_404_p1;
wire    ap_block_pp0_stage0_01001;
reg   [111:0] phi_ln94_fu_108;
wire   [111:0] select_ln94_fu_473_p3;
wire    ap_loop_init;
reg   [7:0] j_fu_112;
wire   [7:0] add_ln93_fu_357_p2;
reg   [7:0] ap_sig_allocacmp_j_load;
reg   [6:0] i_fu_116;
reg   [6:0] ap_sig_allocacmp_i_load;
reg   [14:0] indvar_flatten102_fu_120;
wire   [14:0] add_ln91_1_fu_301_p2;
reg   [14:0] ap_sig_allocacmp_indvar_flatten102_load;
wire   [6:0] add_ln91_fu_313_p2;
wire   [6:0] grp_fu_341_p0;
wire   [4:0] grp_fu_341_p1;
wire   [2:0] empty_38_fu_347_p1;
wire   [6:0] mul_ln91_fu_381_p0;
wire   [8:0] mul_ln91_fu_381_p1;
wire   [14:0] mul_ln91_fu_381_p2;
wire   [3:0] tmp_fu_387_p4;
wire   [15:0] tmp_1_fu_432_p12;
wire   [111:0] select_ln91_1_fu_425_p3;
wire   [95:0] tmp_8_fu_455_p4;
wire   [111:0] tmp_9_fu_465_p3;
wire   [3:0] grp_fu_485_p0;
wire   [7:0] grp_fu_485_p1;
wire   [7:0] grp_fu_485_p2;
reg    grp_fu_341_ce;
reg    grp_fu_485_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [10:0] grp_fu_485_p00;
wire   [10:0] grp_fu_485_p20;
wire   [14:0] mul_ln91_fu_381_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_done_reg = 1'b0;
end

real_matmul_urem_7ns_5ns_7_11_1 #(
    .ID( 1 ),
    .NUM_STAGE( 11 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 7 ))
urem_7ns_5ns_7_11_1_U111(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_341_p0),
    .din1(grp_fu_341_p1),
    .ce(grp_fu_341_ce),
    .dout(grp_fu_341_p2)
);

real_matmul_mul_7ns_9ns_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 15 ))
mul_7ns_9ns_15_1_1_U112(
    .din0(mul_ln91_fu_381_p0),
    .din1(mul_ln91_fu_381_p1),
    .dout(mul_ln91_fu_381_p2)
);

real_matmul_mux_107_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 7 ),
    .dout_WIDTH( 16 ))
mux_107_16_1_1_U113(
    .din0(MatC_V_load_reg_621),
    .din1(MatC_V_1_load_reg_626),
    .din2(MatC_V_2_load_reg_631),
    .din3(MatC_V_3_load_reg_636),
    .din4(MatC_V_4_load_reg_641),
    .din5(MatC_V_5_load_reg_646),
    .din6(MatC_V_6_load_reg_651),
    .din7(MatC_V_7_load_reg_656),
    .din8(MatC_V_8_load_reg_661),
    .din9(MatC_V_9_load_reg_666),
    .din10(urem_ln91_reg_616),
    .dout(tmp_1_fu_432_p12)
);

real_matmul_mac_muladd_4ns_8ns_8ns_11_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 11 ))
mac_muladd_4ns_8ns_8ns_11_4_1_U114(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_485_p0),
    .din1(grp_fu_485_p1),
    .din2(grp_fu_485_p2),
    .ce(grp_fu_485_ce),
    .dout(grp_fu_485_p3)
);

real_matmul_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter11_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter11_stage0)) begin
            ap_enable_reg_pp0_iter12 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln91_fu_295_p2 == 1'd0))) begin
            i_fu_116 <= select_ln91_2_fu_333_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_116 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln91_fu_295_p2 == 1'd0))) begin
            indvar_flatten102_fu_120 <= add_ln91_1_fu_301_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten102_fu_120 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln91_fu_295_p2 == 1'd0))) begin
            j_fu_112 <= add_ln93_fu_357_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_112 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            phi_ln94_fu_108 <= 112'd0;
        end else if (((ap_enable_reg_pp0_iter11 == 1'b1) & (icmp_ln91_reg_526_pp0_iter10_reg == 1'd0))) begin
            phi_ln94_fu_108 <= select_ln94_fu_473_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln91_reg_526_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatC_V_1_load_reg_626 <= MatC_V_1_q0;
        MatC_V_2_load_reg_631 <= MatC_V_2_q0;
        MatC_V_3_load_reg_636 <= MatC_V_3_q0;
        MatC_V_4_load_reg_641 <= MatC_V_4_q0;
        MatC_V_5_load_reg_646 <= MatC_V_5_q0;
        MatC_V_6_load_reg_651 <= MatC_V_6_q0;
        MatC_V_7_load_reg_656 <= MatC_V_7_q0;
        MatC_V_8_load_reg_661 <= MatC_V_8_q0;
        MatC_V_9_load_reg_666 <= MatC_V_9_q0;
        MatC_V_load_reg_621 <= MatC_V_q0;
        urem_ln91_reg_616 <= grp_fu_341_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln91_reg_526_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln94_reg_561 <= grp_fu_485_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln94_reg_561_pp0_iter5_reg <= add_ln94_reg_561;
        add_ln94_reg_561_pp0_iter6_reg <= add_ln94_reg_561_pp0_iter5_reg;
        add_ln94_reg_561_pp0_iter7_reg <= add_ln94_reg_561_pp0_iter6_reg;
        add_ln94_reg_561_pp0_iter8_reg <= add_ln94_reg_561_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln91_reg_526_pp0_iter10_reg <= icmp_ln91_reg_526_pp0_iter9_reg;
        icmp_ln91_reg_526_pp0_iter2_reg <= icmp_ln91_reg_526_pp0_iter1_reg;
        icmp_ln91_reg_526_pp0_iter3_reg <= icmp_ln91_reg_526_pp0_iter2_reg;
        icmp_ln91_reg_526_pp0_iter4_reg <= icmp_ln91_reg_526_pp0_iter3_reg;
        icmp_ln91_reg_526_pp0_iter5_reg <= icmp_ln91_reg_526_pp0_iter4_reg;
        icmp_ln91_reg_526_pp0_iter6_reg <= icmp_ln91_reg_526_pp0_iter5_reg;
        icmp_ln91_reg_526_pp0_iter7_reg <= icmp_ln91_reg_526_pp0_iter6_reg;
        icmp_ln91_reg_526_pp0_iter8_reg <= icmp_ln91_reg_526_pp0_iter7_reg;
        icmp_ln91_reg_526_pp0_iter9_reg <= icmp_ln91_reg_526_pp0_iter8_reg;
        icmp_ln93_reg_530_pp0_iter10_reg <= icmp_ln93_reg_530_pp0_iter9_reg;
        icmp_ln93_reg_530_pp0_iter2_reg <= icmp_ln93_reg_530_pp0_iter1_reg;
        icmp_ln93_reg_530_pp0_iter3_reg <= icmp_ln93_reg_530_pp0_iter2_reg;
        icmp_ln93_reg_530_pp0_iter4_reg <= icmp_ln93_reg_530_pp0_iter3_reg;
        icmp_ln93_reg_530_pp0_iter5_reg <= icmp_ln93_reg_530_pp0_iter4_reg;
        icmp_ln93_reg_530_pp0_iter6_reg <= icmp_ln93_reg_530_pp0_iter5_reg;
        icmp_ln93_reg_530_pp0_iter7_reg <= icmp_ln93_reg_530_pp0_iter6_reg;
        icmp_ln93_reg_530_pp0_iter8_reg <= icmp_ln93_reg_530_pp0_iter7_reg;
        icmp_ln93_reg_530_pp0_iter9_reg <= icmp_ln93_reg_530_pp0_iter8_reg;
        icmp_ln94_reg_546_pp0_iter10_reg <= icmp_ln94_reg_546_pp0_iter9_reg;
        icmp_ln94_reg_546_pp0_iter11_reg <= icmp_ln94_reg_546_pp0_iter10_reg;
        icmp_ln94_reg_546_pp0_iter2_reg <= icmp_ln94_reg_546_pp0_iter1_reg;
        icmp_ln94_reg_546_pp0_iter3_reg <= icmp_ln94_reg_546_pp0_iter2_reg;
        icmp_ln94_reg_546_pp0_iter4_reg <= icmp_ln94_reg_546_pp0_iter3_reg;
        icmp_ln94_reg_546_pp0_iter5_reg <= icmp_ln94_reg_546_pp0_iter4_reg;
        icmp_ln94_reg_546_pp0_iter6_reg <= icmp_ln94_reg_546_pp0_iter5_reg;
        icmp_ln94_reg_546_pp0_iter7_reg <= icmp_ln94_reg_546_pp0_iter6_reg;
        icmp_ln94_reg_546_pp0_iter8_reg <= icmp_ln94_reg_546_pp0_iter7_reg;
        icmp_ln94_reg_546_pp0_iter9_reg <= icmp_ln94_reg_546_pp0_iter8_reg;
        select_ln91_reg_535_pp0_iter2_reg <= select_ln91_reg_535_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln91_reg_526 <= icmp_ln91_fu_295_p2;
        icmp_ln91_reg_526_pp0_iter1_reg <= icmp_ln91_reg_526;
        icmp_ln93_reg_530_pp0_iter1_reg <= icmp_ln93_reg_530;
        icmp_ln94_reg_546_pp0_iter1_reg <= icmp_ln94_reg_546;
        select_ln91_reg_535_pp0_iter1_reg <= select_ln91_reg_535;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln91_fu_295_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln93_reg_530 <= icmp_ln93_fu_319_p2;
        icmp_ln94_reg_546 <= icmp_ln94_fu_351_p2;
        select_ln91_2_reg_540 <= select_ln91_2_fu_333_p3;
        select_ln91_reg_535 <= select_ln91_fu_325_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln91_reg_526_pp0_iter10_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        or_ln_reg_676 <= or_ln_fu_447_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatC_V_1_ce0 = 1'b1;
    end else begin
        MatC_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatC_V_2_ce0 = 1'b1;
    end else begin
        MatC_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatC_V_3_ce0 = 1'b1;
    end else begin
        MatC_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatC_V_4_ce0 = 1'b1;
    end else begin
        MatC_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatC_V_5_ce0 = 1'b1;
    end else begin
        MatC_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatC_V_6_ce0 = 1'b1;
    end else begin
        MatC_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatC_V_7_ce0 = 1'b1;
    end else begin
        MatC_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatC_V_8_ce0 = 1'b1;
    end else begin
        MatC_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatC_V_9_ce0 = 1'b1;
    end else begin
        MatC_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatC_V_ce0 = 1'b1;
    end else begin
        MatC_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln91_fu_295_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (icmp_ln91_reg_526_pp0_iter10_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter11_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter11_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter11_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 7'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_116;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten102_load = 15'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten102_load = indvar_flatten102_fu_120;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 8'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_112;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_341_ce = 1'b1;
    end else begin
        grp_fu_341_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_485_ce = 1'b1;
    end else begin
        grp_fu_485_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln94_reg_546_pp0_iter11_reg == 1'd1))) begin
        m_axi_mem_WVALID = 1'b1;
    end else begin
        m_axi_mem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln94_reg_546_pp0_iter11_reg == 1'd1))) begin
        mem_blk_n_W = m_axi_mem_WREADY;
    end else begin
        mem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign MatC_V_1_address0 = zext_ln94_1_fu_404_p1;

assign MatC_V_2_address0 = zext_ln94_1_fu_404_p1;

assign MatC_V_3_address0 = zext_ln94_1_fu_404_p1;

assign MatC_V_4_address0 = zext_ln94_1_fu_404_p1;

assign MatC_V_5_address0 = zext_ln94_1_fu_404_p1;

assign MatC_V_6_address0 = zext_ln94_1_fu_404_p1;

assign MatC_V_7_address0 = zext_ln94_1_fu_404_p1;

assign MatC_V_8_address0 = zext_ln94_1_fu_404_p1;

assign MatC_V_9_address0 = zext_ln94_1_fu_404_p1;

assign MatC_V_address0 = zext_ln94_1_fu_404_p1;

assign add_ln91_1_fu_301_p2 = (ap_sig_allocacmp_indvar_flatten102_load + 15'd1);

assign add_ln91_fu_313_p2 = (ap_sig_allocacmp_i_load + 7'd1);

assign add_ln93_fu_357_p2 = (select_ln91_fu_325_p3 + 8'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b1 == ap_block_state13_io));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b1 == ap_block_state13_io));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_io = ((m_axi_mem_WREADY == 1'b0) & (icmp_ln94_reg_546_pp0_iter11_reg == 1'd1));
end

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_38_fu_347_p1 = select_ln91_fu_325_p3[2:0];

assign grp_fu_341_p0 = ((icmp_ln93_fu_319_p2[0:0] == 1'b1) ? add_ln91_fu_313_p2 : ap_sig_allocacmp_i_load);

assign grp_fu_341_p1 = 7'd10;

assign grp_fu_485_p0 = grp_fu_485_p00;

assign grp_fu_485_p00 = tmp_fu_387_p4;

assign grp_fu_485_p1 = 11'd200;

assign grp_fu_485_p2 = grp_fu_485_p20;

assign grp_fu_485_p20 = select_ln91_reg_535_pp0_iter2_reg;

assign icmp_ln91_fu_295_p2 = ((ap_sig_allocacmp_indvar_flatten102_load == 15'd20000) ? 1'b1 : 1'b0);

assign icmp_ln93_fu_319_p2 = ((ap_sig_allocacmp_j_load == 8'd200) ? 1'b1 : 1'b0);

assign icmp_ln94_fu_351_p2 = ((empty_38_fu_347_p1 == 3'd7) ? 1'b1 : 1'b0);

assign m_axi_mem_ARADDR = 64'd0;

assign m_axi_mem_ARBURST = 2'd0;

assign m_axi_mem_ARCACHE = 4'd0;

assign m_axi_mem_ARID = 1'd0;

assign m_axi_mem_ARLEN = 32'd0;

assign m_axi_mem_ARLOCK = 2'd0;

assign m_axi_mem_ARPROT = 3'd0;

assign m_axi_mem_ARQOS = 4'd0;

assign m_axi_mem_ARREGION = 4'd0;

assign m_axi_mem_ARSIZE = 3'd0;

assign m_axi_mem_ARUSER = 1'd0;

assign m_axi_mem_ARVALID = 1'b0;

assign m_axi_mem_AWADDR = 64'd0;

assign m_axi_mem_AWBURST = 2'd0;

assign m_axi_mem_AWCACHE = 4'd0;

assign m_axi_mem_AWID = 1'd0;

assign m_axi_mem_AWLEN = 32'd0;

assign m_axi_mem_AWLOCK = 2'd0;

assign m_axi_mem_AWPROT = 3'd0;

assign m_axi_mem_AWQOS = 4'd0;

assign m_axi_mem_AWREGION = 4'd0;

assign m_axi_mem_AWSIZE = 3'd0;

assign m_axi_mem_AWUSER = 1'd0;

assign m_axi_mem_AWVALID = 1'b0;

assign m_axi_mem_BREADY = 1'b0;

assign m_axi_mem_RREADY = 1'b0;

assign m_axi_mem_WDATA = or_ln_reg_676;

assign m_axi_mem_WID = 1'd0;

assign m_axi_mem_WLAST = 1'b0;

assign m_axi_mem_WSTRB = 16'd65535;

assign m_axi_mem_WUSER = 1'd0;

assign mul_ln91_fu_381_p0 = mul_ln91_fu_381_p00;

assign mul_ln91_fu_381_p00 = select_ln91_2_reg_540;

assign mul_ln91_fu_381_p1 = 15'd205;

assign or_ln_fu_447_p3 = {{tmp_1_fu_432_p12}, {select_ln91_1_fu_425_p3}};

assign select_ln91_1_fu_425_p3 = ((icmp_ln93_reg_530_pp0_iter10_reg[0:0] == 1'b1) ? 112'd0 : phi_ln94_fu_108);

assign select_ln91_2_fu_333_p3 = ((icmp_ln93_fu_319_p2[0:0] == 1'b1) ? add_ln91_fu_313_p2 : ap_sig_allocacmp_i_load);

assign select_ln91_fu_325_p3 = ((icmp_ln93_fu_319_p2[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_j_load);

assign select_ln94_fu_473_p3 = ((icmp_ln94_reg_546_pp0_iter10_reg[0:0] == 1'b1) ? 112'd0 : tmp_9_fu_465_p3);

assign tmp_8_fu_455_p4 = {{select_ln91_1_fu_425_p3[111:16]}};

assign tmp_9_fu_465_p3 = {{tmp_1_fu_432_p12}, {tmp_8_fu_455_p4}};

assign tmp_fu_387_p4 = {{mul_ln91_fu_381_p2[14:11]}};

assign zext_ln94_1_fu_404_p1 = add_ln94_reg_561_pp0_iter8_reg;

endmodule //real_matmul_real_matmul_Pipeline_MAT_C_ROWS_MAT_C_COLS
