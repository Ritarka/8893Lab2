-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity real_matmul_real_matmul_Pipeline_MAT_A_ROWS_MAT_A_COLS is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_mem_AWVALID : OUT STD_LOGIC;
    m_axi_mem_AWREADY : IN STD_LOGIC;
    m_axi_mem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_WVALID : OUT STD_LOGIC;
    m_axi_mem_WREADY : IN STD_LOGIC;
    m_axi_mem_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    m_axi_mem_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_mem_WLAST : OUT STD_LOGIC;
    m_axi_mem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_ARVALID : OUT STD_LOGIC;
    m_axi_mem_ARREADY : IN STD_LOGIC;
    m_axi_mem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_RVALID : IN STD_LOGIC;
    m_axi_mem_RREADY : OUT STD_LOGIC;
    m_axi_mem_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    m_axi_mem_RLAST : IN STD_LOGIC;
    m_axi_mem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_mem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BVALID : IN STD_LOGIC;
    m_axi_mem_BREADY : OUT STD_LOGIC;
    m_axi_mem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    MatA_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    MatA_V_ce0 : OUT STD_LOGIC;
    MatA_V_we0 : OUT STD_LOGIC;
    MatA_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    MatA_V_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    MatA_V_1_ce0 : OUT STD_LOGIC;
    MatA_V_1_we0 : OUT STD_LOGIC;
    MatA_V_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    MatA_V_2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    MatA_V_2_ce0 : OUT STD_LOGIC;
    MatA_V_2_we0 : OUT STD_LOGIC;
    MatA_V_2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    MatA_V_3_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    MatA_V_3_ce0 : OUT STD_LOGIC;
    MatA_V_3_we0 : OUT STD_LOGIC;
    MatA_V_3_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    MatA_V_4_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    MatA_V_4_ce0 : OUT STD_LOGIC;
    MatA_V_4_we0 : OUT STD_LOGIC;
    MatA_V_4_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    MatA_V_5_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    MatA_V_5_ce0 : OUT STD_LOGIC;
    MatA_V_5_we0 : OUT STD_LOGIC;
    MatA_V_5_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    MatA_V_6_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    MatA_V_6_ce0 : OUT STD_LOGIC;
    MatA_V_6_we0 : OUT STD_LOGIC;
    MatA_V_6_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    MatA_V_7_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    MatA_V_7_ce0 : OUT STD_LOGIC;
    MatA_V_7_we0 : OUT STD_LOGIC;
    MatA_V_7_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    MatA_V_8_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    MatA_V_8_ce0 : OUT STD_LOGIC;
    MatA_V_8_we0 : OUT STD_LOGIC;
    MatA_V_8_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    MatA_V_9_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    MatA_V_9_ce0 : OUT STD_LOGIC;
    MatA_V_9_we0 : OUT STD_LOGIC;
    MatA_V_9_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    MatA_DRAM : IN STD_LOGIC_VECTOR (63 downto 0);
    trunc_ln : IN STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of real_matmul_real_matmul_Pipeline_MAT_A_ROWS_MAT_A_COLS is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv14_3A98 : STD_LOGIC_VECTOR (13 downto 0) := "11101010011000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv7_A : STD_LOGIC_VECTOR (6 downto 0) := "0001010";
    constant ap_const_lv15_CD : STD_LOGIC_VECTOR (14 downto 0) := "000000011001101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv14_96 : STD_LOGIC_VECTOR (13 downto 0) := "00000010010110";
    constant ap_const_lv11_96 : STD_LOGIC_VECTOR (10 downto 0) := "00010010110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal icmp_ln35_reg_663 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_reg_663_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln39_reg_704 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op75_readreq_state5 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal icmp_ln35_reg_663_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln39_reg_704_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op91_read_state12 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln35_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal mem_blk_n_AR : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal mem_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln35_reg_663_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_reg_663_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_reg_663_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_reg_663_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_reg_663_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_reg_663_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_reg_663_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_reg_663_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_reg_663_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_reg_663_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_667 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_667_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_667_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_667_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_667_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_667_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_667_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_667_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_667_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_667_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_667_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_667_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_667_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_mid2_fu_380_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_mid2_reg_672 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_mid2_reg_672_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal j_mid2_reg_672_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal i_cast_mid2_v_fu_388_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_cast_mid2_v_reg_678 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln39_fu_455_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln39_reg_704_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln39_reg_704_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln39_reg_704_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln39_reg_704_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln39_reg_704_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln39_reg_704_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln39_reg_704_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln39_reg_704_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_708 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_reg_708_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_reg_708_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_reg_708_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_reg_708_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_reg_708_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_reg_708_pp0_iter9_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_reg_708_pp0_iter10_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln39_4_reg_713 : STD_LOGIC_VECTOR (59 downto 0);
    signal grp_fu_617_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln39_3_reg_718 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln39_3_reg_718_pp0_iter5_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln39_3_reg_718_pp0_iter6_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln39_3_reg_718_pp0_iter7_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln39_3_reg_718_pp0_iter8_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln39_3_reg_718_pp0_iter9_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln39_3_reg_718_pp0_iter10_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln39_3_reg_718_pp0_iter11_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln39_3_reg_718_pp0_iter12_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_47_fu_513_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_47_reg_729 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_47_reg_729_pp0_iter12_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal mem_addr_read_reg_733 : STD_LOGIC_VECTOR (127 downto 0);
    signal add_ln39_2_fu_524_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln39_2_reg_738 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln39_1_fu_545_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_empty_phi_fu_321_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_empty_reg_318 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_reg_318 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_empty_reg_318 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter3_empty_reg_318 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter4_empty_reg_318 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter5_empty_reg_318 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter6_empty_reg_318 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter7_empty_reg_318 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter8_empty_reg_318 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter9_empty_reg_318 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter10_empty_reg_318 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter11_empty_reg_318 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter12_empty_reg_318 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter13_empty_reg_318 : STD_LOGIC_VECTOR (31 downto 0);
    signal shiftreg15_cast_fu_559_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln39_3_fu_564_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln39_fu_503_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shiftreg15_fu_148 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_152 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln37_fu_400_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_156 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten_fu_160 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln35_1_fu_356_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln39_2_fu_577_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln35_fu_368_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_421_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_fu_429_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_fu_429_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_fu_429_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_fu_435_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_606_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_3_fu_458_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal and_ln_fu_467_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln39_fu_475_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln39_1_fu_488_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_421_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln39_1_fu_517_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln39_1_fu_529_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln39_1_fu_536_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln39_fu_540_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal shiftreg15_mid2_fu_552_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_606_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_606_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_606_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_617_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_617_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_617_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_421_ce : STD_LOGIC;
    signal grp_fu_606_ce : STD_LOGIC;
    signal grp_fu_617_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_606_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_606_p20 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_617_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_617_p20 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_fu_429_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component real_matmul_urem_7ns_5ns_4_11_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component real_matmul_mul_7ns_9ns_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component real_matmul_mac_muladd_7ns_8ns_8ns_14_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component real_matmul_mac_muladd_4ns_8ns_8ns_11_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component real_matmul_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    urem_7ns_5ns_4_11_1_U1 : component real_matmul_urem_7ns_5ns_4_11_1
    generic map (
        ID => 1,
        NUM_STAGE => 11,
        din0_WIDTH => 7,
        din1_WIDTH => 5,
        dout_WIDTH => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => i_cast_mid2_v_reg_678,
        din1 => grp_fu_421_p1,
        ce => grp_fu_421_ce,
        dout => grp_fu_421_p2);

    mul_7ns_9ns_15_1_1_U2 : component real_matmul_mul_7ns_9ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 9,
        dout_WIDTH => 15)
    port map (
        din0 => mul_fu_429_p0,
        din1 => mul_fu_429_p1,
        dout => mul_fu_429_p2);

    mac_muladd_7ns_8ns_8ns_14_4_1_U3 : component real_matmul_mac_muladd_7ns_8ns_8ns_14_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 7,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_606_p0,
        din1 => grp_fu_606_p1,
        din2 => grp_fu_606_p2,
        ce => grp_fu_606_ce,
        dout => grp_fu_606_p3);

    mac_muladd_4ns_8ns_8ns_11_4_1_U4 : component real_matmul_mac_muladd_4ns_8ns_8ns_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 4,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_617_p0,
        din1 => grp_fu_617_p1,
        din2 => grp_fu_617_p2,
        ce => grp_fu_617_ce,
        dout => grp_fu_617_p3);

    flow_control_loop_pipe_sequential_init_U : component real_matmul_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter12_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter13_empty_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((trunc_ln39_reg_704_pp0_iter11_reg = ap_const_lv1_0) and (icmp_ln35_reg_663_pp0_iter11_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter13_empty_reg_318 <= trunc_ln39_1_fu_545_p1;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter13_empty_reg_318 <= ap_phi_reg_pp0_iter12_empty_reg_318;
                end if;
            end if; 
        end if;
    end process;

    i_fu_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln35_fu_350_p2 = ap_const_lv1_0))) then 
                    i_fu_156 <= i_cast_mid2_v_fu_388_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_156 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln35_fu_350_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_160 <= add_ln35_1_fu_356_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_160 <= ap_const_lv14_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln35_fu_350_p2 = ap_const_lv1_0))) then 
                    j_fu_152 <= add_ln37_fu_400_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_152 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    shiftreg15_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    shiftreg15_fu_148 <= ap_const_lv16_0;
                elsif ((ap_enable_reg_pp0_iter13 = ap_const_logic_1)) then 
                    shiftreg15_fu_148 <= ap_phi_mux_empty_phi_fu_321_p4(31 downto 16);
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln39_reg_704_pp0_iter10_reg = ap_const_lv1_0) and (icmp_ln35_reg_663_pp0_iter10_reg = ap_const_lv1_0))) then
                add_ln39_2_reg_738 <= add_ln39_2_fu_524_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln35_reg_663_pp0_iter3_reg = ap_const_lv1_0))) then
                add_ln39_3_reg_718 <= grp_fu_617_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln39_3_reg_718_pp0_iter10_reg <= add_ln39_3_reg_718_pp0_iter9_reg;
                add_ln39_3_reg_718_pp0_iter11_reg <= add_ln39_3_reg_718_pp0_iter10_reg;
                add_ln39_3_reg_718_pp0_iter12_reg <= add_ln39_3_reg_718_pp0_iter11_reg;
                add_ln39_3_reg_718_pp0_iter5_reg <= add_ln39_3_reg_718;
                add_ln39_3_reg_718_pp0_iter6_reg <= add_ln39_3_reg_718_pp0_iter5_reg;
                add_ln39_3_reg_718_pp0_iter7_reg <= add_ln39_3_reg_718_pp0_iter6_reg;
                add_ln39_3_reg_718_pp0_iter8_reg <= add_ln39_3_reg_718_pp0_iter7_reg;
                add_ln39_3_reg_718_pp0_iter9_reg <= add_ln39_3_reg_718_pp0_iter8_reg;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                empty_47_reg_729_pp0_iter12_reg <= empty_47_reg_729;
                icmp_ln35_reg_663_pp0_iter10_reg <= icmp_ln35_reg_663_pp0_iter9_reg;
                icmp_ln35_reg_663_pp0_iter11_reg <= icmp_ln35_reg_663_pp0_iter10_reg;
                icmp_ln35_reg_663_pp0_iter12_reg <= icmp_ln35_reg_663_pp0_iter11_reg;
                icmp_ln35_reg_663_pp0_iter2_reg <= icmp_ln35_reg_663_pp0_iter1_reg;
                icmp_ln35_reg_663_pp0_iter3_reg <= icmp_ln35_reg_663_pp0_iter2_reg;
                icmp_ln35_reg_663_pp0_iter4_reg <= icmp_ln35_reg_663_pp0_iter3_reg;
                icmp_ln35_reg_663_pp0_iter5_reg <= icmp_ln35_reg_663_pp0_iter4_reg;
                icmp_ln35_reg_663_pp0_iter6_reg <= icmp_ln35_reg_663_pp0_iter5_reg;
                icmp_ln35_reg_663_pp0_iter7_reg <= icmp_ln35_reg_663_pp0_iter6_reg;
                icmp_ln35_reg_663_pp0_iter8_reg <= icmp_ln35_reg_663_pp0_iter7_reg;
                icmp_ln35_reg_663_pp0_iter9_reg <= icmp_ln35_reg_663_pp0_iter8_reg;
                icmp_ln37_reg_667_pp0_iter10_reg <= icmp_ln37_reg_667_pp0_iter9_reg;
                icmp_ln37_reg_667_pp0_iter11_reg <= icmp_ln37_reg_667_pp0_iter10_reg;
                icmp_ln37_reg_667_pp0_iter12_reg <= icmp_ln37_reg_667_pp0_iter11_reg;
                icmp_ln37_reg_667_pp0_iter2_reg <= icmp_ln37_reg_667_pp0_iter1_reg;
                icmp_ln37_reg_667_pp0_iter3_reg <= icmp_ln37_reg_667_pp0_iter2_reg;
                icmp_ln37_reg_667_pp0_iter4_reg <= icmp_ln37_reg_667_pp0_iter3_reg;
                icmp_ln37_reg_667_pp0_iter5_reg <= icmp_ln37_reg_667_pp0_iter4_reg;
                icmp_ln37_reg_667_pp0_iter6_reg <= icmp_ln37_reg_667_pp0_iter5_reg;
                icmp_ln37_reg_667_pp0_iter7_reg <= icmp_ln37_reg_667_pp0_iter6_reg;
                icmp_ln37_reg_667_pp0_iter8_reg <= icmp_ln37_reg_667_pp0_iter7_reg;
                icmp_ln37_reg_667_pp0_iter9_reg <= icmp_ln37_reg_667_pp0_iter8_reg;
                j_mid2_reg_672_pp0_iter2_reg <= j_mid2_reg_672_pp0_iter1_reg;
                tmp_4_reg_708_pp0_iter10_reg <= tmp_4_reg_708_pp0_iter9_reg;
                tmp_4_reg_708_pp0_iter4_reg <= tmp_4_reg_708;
                tmp_4_reg_708_pp0_iter5_reg <= tmp_4_reg_708_pp0_iter4_reg;
                tmp_4_reg_708_pp0_iter6_reg <= tmp_4_reg_708_pp0_iter5_reg;
                tmp_4_reg_708_pp0_iter7_reg <= tmp_4_reg_708_pp0_iter6_reg;
                tmp_4_reg_708_pp0_iter8_reg <= tmp_4_reg_708_pp0_iter7_reg;
                tmp_4_reg_708_pp0_iter9_reg <= tmp_4_reg_708_pp0_iter8_reg;
                trunc_ln39_reg_704_pp0_iter10_reg <= trunc_ln39_reg_704_pp0_iter9_reg;
                trunc_ln39_reg_704_pp0_iter11_reg <= trunc_ln39_reg_704_pp0_iter10_reg;
                trunc_ln39_reg_704_pp0_iter12_reg <= trunc_ln39_reg_704_pp0_iter11_reg;
                trunc_ln39_reg_704_pp0_iter4_reg <= trunc_ln39_reg_704;
                trunc_ln39_reg_704_pp0_iter5_reg <= trunc_ln39_reg_704_pp0_iter4_reg;
                trunc_ln39_reg_704_pp0_iter6_reg <= trunc_ln39_reg_704_pp0_iter5_reg;
                trunc_ln39_reg_704_pp0_iter7_reg <= trunc_ln39_reg_704_pp0_iter6_reg;
                trunc_ln39_reg_704_pp0_iter8_reg <= trunc_ln39_reg_704_pp0_iter7_reg;
                trunc_ln39_reg_704_pp0_iter9_reg <= trunc_ln39_reg_704_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln35_reg_663 <= icmp_ln35_fu_350_p2;
                icmp_ln35_reg_663_pp0_iter1_reg <= icmp_ln35_reg_663;
                icmp_ln37_reg_667_pp0_iter1_reg <= icmp_ln37_reg_667;
                j_mid2_reg_672_pp0_iter1_reg <= j_mid2_reg_672;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter10_empty_reg_318 <= ap_phi_reg_pp0_iter9_empty_reg_318;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter11_empty_reg_318 <= ap_phi_reg_pp0_iter10_empty_reg_318;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter12_empty_reg_318 <= ap_phi_reg_pp0_iter11_empty_reg_318;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter1_empty_reg_318 <= ap_phi_reg_pp0_iter0_empty_reg_318;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter2_empty_reg_318 <= ap_phi_reg_pp0_iter1_empty_reg_318;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter3_empty_reg_318 <= ap_phi_reg_pp0_iter2_empty_reg_318;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter4_empty_reg_318 <= ap_phi_reg_pp0_iter3_empty_reg_318;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter5_empty_reg_318 <= ap_phi_reg_pp0_iter4_empty_reg_318;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter6_empty_reg_318 <= ap_phi_reg_pp0_iter5_empty_reg_318;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter7_empty_reg_318 <= ap_phi_reg_pp0_iter6_empty_reg_318;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter8_empty_reg_318 <= ap_phi_reg_pp0_iter7_empty_reg_318;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter9_empty_reg_318 <= ap_phi_reg_pp0_iter8_empty_reg_318;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln35_reg_663_pp0_iter10_reg = ap_const_lv1_0))) then
                empty_47_reg_729 <= empty_47_fu_513_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln35_fu_350_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_cast_mid2_v_reg_678 <= i_cast_mid2_v_fu_388_p3;
                icmp_ln37_reg_667 <= icmp_ln37_fu_374_p2;
                j_mid2_reg_672 <= j_mid2_fu_380_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op91_read_state12 = ap_const_boolean_1))) then
                mem_addr_read_reg_733 <= m_axi_mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln39_fu_455_p1 = ap_const_lv1_0) and (icmp_ln35_reg_663_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_4_reg_708 <= grp_fu_606_p3(2 downto 1);
                trunc_ln39_4_reg_713 <= add_ln39_1_fu_488_p2(63 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_reg_663_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                trunc_ln39_reg_704 <= trunc_ln39_fu_455_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    MatA_V_1_address0 <= zext_ln39_3_fu_564_p1(11 - 1 downto 0);

    MatA_V_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatA_V_1_ce0 <= ap_const_logic_1;
        else 
            MatA_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MatA_V_1_d0 <= trunc_ln39_2_fu_577_p1;

    MatA_V_1_we0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001, empty_47_reg_729_pp0_iter12_reg)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (empty_47_reg_729_pp0_iter12_reg = ap_const_lv4_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatA_V_1_we0 <= ap_const_logic_1;
        else 
            MatA_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    MatA_V_2_address0 <= zext_ln39_3_fu_564_p1(11 - 1 downto 0);

    MatA_V_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatA_V_2_ce0 <= ap_const_logic_1;
        else 
            MatA_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MatA_V_2_d0 <= trunc_ln39_2_fu_577_p1;

    MatA_V_2_we0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001, empty_47_reg_729_pp0_iter12_reg)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (empty_47_reg_729_pp0_iter12_reg = ap_const_lv4_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatA_V_2_we0 <= ap_const_logic_1;
        else 
            MatA_V_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    MatA_V_3_address0 <= zext_ln39_3_fu_564_p1(11 - 1 downto 0);

    MatA_V_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatA_V_3_ce0 <= ap_const_logic_1;
        else 
            MatA_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MatA_V_3_d0 <= trunc_ln39_2_fu_577_p1;

    MatA_V_3_we0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001, empty_47_reg_729_pp0_iter12_reg)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (empty_47_reg_729_pp0_iter12_reg = ap_const_lv4_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatA_V_3_we0 <= ap_const_logic_1;
        else 
            MatA_V_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    MatA_V_4_address0 <= zext_ln39_3_fu_564_p1(11 - 1 downto 0);

    MatA_V_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatA_V_4_ce0 <= ap_const_logic_1;
        else 
            MatA_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MatA_V_4_d0 <= trunc_ln39_2_fu_577_p1;

    MatA_V_4_we0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001, empty_47_reg_729_pp0_iter12_reg)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (empty_47_reg_729_pp0_iter12_reg = ap_const_lv4_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatA_V_4_we0 <= ap_const_logic_1;
        else 
            MatA_V_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    MatA_V_5_address0 <= zext_ln39_3_fu_564_p1(11 - 1 downto 0);

    MatA_V_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatA_V_5_ce0 <= ap_const_logic_1;
        else 
            MatA_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MatA_V_5_d0 <= trunc_ln39_2_fu_577_p1;

    MatA_V_5_we0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001, empty_47_reg_729_pp0_iter12_reg)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (empty_47_reg_729_pp0_iter12_reg = ap_const_lv4_5) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatA_V_5_we0 <= ap_const_logic_1;
        else 
            MatA_V_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    MatA_V_6_address0 <= zext_ln39_3_fu_564_p1(11 - 1 downto 0);

    MatA_V_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatA_V_6_ce0 <= ap_const_logic_1;
        else 
            MatA_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MatA_V_6_d0 <= trunc_ln39_2_fu_577_p1;

    MatA_V_6_we0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001, empty_47_reg_729_pp0_iter12_reg)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (empty_47_reg_729_pp0_iter12_reg = ap_const_lv4_6) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatA_V_6_we0 <= ap_const_logic_1;
        else 
            MatA_V_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    MatA_V_7_address0 <= zext_ln39_3_fu_564_p1(11 - 1 downto 0);

    MatA_V_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatA_V_7_ce0 <= ap_const_logic_1;
        else 
            MatA_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MatA_V_7_d0 <= trunc_ln39_2_fu_577_p1;

    MatA_V_7_we0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001, empty_47_reg_729_pp0_iter12_reg)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (empty_47_reg_729_pp0_iter12_reg = ap_const_lv4_7) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatA_V_7_we0 <= ap_const_logic_1;
        else 
            MatA_V_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    MatA_V_8_address0 <= zext_ln39_3_fu_564_p1(11 - 1 downto 0);

    MatA_V_8_ce0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatA_V_8_ce0 <= ap_const_logic_1;
        else 
            MatA_V_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MatA_V_8_d0 <= trunc_ln39_2_fu_577_p1;

    MatA_V_8_we0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001, empty_47_reg_729_pp0_iter12_reg)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (empty_47_reg_729_pp0_iter12_reg = ap_const_lv4_8) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatA_V_8_we0 <= ap_const_logic_1;
        else 
            MatA_V_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    MatA_V_9_address0 <= zext_ln39_3_fu_564_p1(11 - 1 downto 0);

    MatA_V_9_ce0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatA_V_9_ce0 <= ap_const_logic_1;
        else 
            MatA_V_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MatA_V_9_d0 <= trunc_ln39_2_fu_577_p1;

    MatA_V_9_we0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001, empty_47_reg_729_pp0_iter12_reg)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and ((empty_47_reg_729_pp0_iter12_reg = ap_const_lv4_9) or ((empty_47_reg_729_pp0_iter12_reg = ap_const_lv4_A) or ((empty_47_reg_729_pp0_iter12_reg = ap_const_lv4_B) or ((empty_47_reg_729_pp0_iter12_reg = ap_const_lv4_C) or ((empty_47_reg_729_pp0_iter12_reg = ap_const_lv4_D) or ((empty_47_reg_729_pp0_iter12_reg = ap_const_lv4_E) or (empty_47_reg_729_pp0_iter12_reg = ap_const_lv4_F))))))))) then 
            MatA_V_9_we0 <= ap_const_logic_1;
        else 
            MatA_V_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    MatA_V_address0 <= zext_ln39_3_fu_564_p1(11 - 1 downto 0);

    MatA_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatA_V_ce0 <= ap_const_logic_1;
        else 
            MatA_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MatA_V_d0 <= trunc_ln39_2_fu_577_p1;

    MatA_V_we0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001, empty_47_reg_729_pp0_iter12_reg)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (empty_47_reg_729_pp0_iter12_reg = ap_const_lv4_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatA_V_we0 <= ap_const_logic_1;
        else 
            MatA_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln35_1_fu_356_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv14_1));
    add_ln35_fu_368_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv7_1));
    add_ln37_fu_400_p2 <= std_logic_vector(unsigned(j_mid2_fu_380_p3) + unsigned(ap_const_lv8_1));
    add_ln39_1_fu_488_p2 <= std_logic_vector(unsigned(zext_ln39_fu_475_p1) + unsigned(MatA_DRAM));
    add_ln39_2_fu_524_p2 <= std_logic_vector(unsigned(and_ln39_1_fu_517_p3) + unsigned(trunc_ln));
    and_ln39_1_fu_517_p3 <= (tmp_4_reg_708_pp0_iter10_reg & ap_const_lv2_0);
    and_ln_fu_467_p3 <= (tmp_3_fu_458_p4 & ap_const_lv2_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter11, m_axi_mem_RVALID, ap_block_state5_io, ap_predicate_op91_read_state12)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_predicate_op91_read_state12 = ap_const_boolean_1) and (m_axi_mem_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter11, m_axi_mem_RVALID, ap_block_state5_io, ap_predicate_op91_read_state12)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_predicate_op91_read_state12 = ap_const_boolean_1) and (m_axi_mem_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_pp0_stage0_iter11_assign_proc : process(m_axi_mem_RVALID, ap_predicate_op91_read_state12)
    begin
                ap_block_state12_pp0_stage0_iter11 <= ((ap_predicate_op91_read_state12 = ap_const_boolean_1) and (m_axi_mem_RVALID = ap_const_logic_0));
    end process;

        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(m_axi_mem_ARREADY, ap_predicate_op75_readreq_state5)
    begin
                ap_block_state5_io <= ((m_axi_mem_ARREADY = ap_const_logic_0) and (ap_predicate_op75_readreq_state5 = ap_const_boolean_1));
    end process;

        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln35_fu_350_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln35_fu_350_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter12_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter12_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_empty_phi_fu_321_p4_assign_proc : process(icmp_ln35_reg_663_pp0_iter12_reg, trunc_ln39_reg_704_pp0_iter12_reg, ap_phi_reg_pp0_iter13_empty_reg_318, shiftreg15_cast_fu_559_p1)
    begin
        if (((trunc_ln39_reg_704_pp0_iter12_reg = ap_const_lv1_1) and (icmp_ln35_reg_663_pp0_iter12_reg = ap_const_lv1_0))) then 
            ap_phi_mux_empty_phi_fu_321_p4 <= shiftreg15_cast_fu_559_p1;
        else 
            ap_phi_mux_empty_phi_fu_321_p4 <= ap_phi_reg_pp0_iter13_empty_reg_318;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_empty_reg_318 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op75_readreq_state5_assign_proc : process(icmp_ln35_reg_663_pp0_iter3_reg, trunc_ln39_reg_704)
    begin
                ap_predicate_op75_readreq_state5 <= ((trunc_ln39_reg_704 = ap_const_lv1_0) and (icmp_ln35_reg_663_pp0_iter3_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op91_read_state12_assign_proc : process(icmp_ln35_reg_663_pp0_iter10_reg, trunc_ln39_reg_704_pp0_iter10_reg)
    begin
                ap_predicate_op91_read_state12 <= ((trunc_ln39_reg_704_pp0_iter10_reg = ap_const_lv1_0) and (icmp_ln35_reg_663_pp0_iter10_reg = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_156)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_156;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_160)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv14_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_160;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_152)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_152;
        end if; 
    end process;

    empty_47_fu_513_p1 <= grp_fu_421_p2(4 - 1 downto 0);

    grp_fu_421_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_421_ce <= ap_const_logic_1;
        else 
            grp_fu_421_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_421_p1 <= ap_const_lv7_A(5 - 1 downto 0);

    grp_fu_606_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_606_ce <= ap_const_logic_1;
        else 
            grp_fu_606_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_606_p0 <= grp_fu_606_p00(7 - 1 downto 0);
    grp_fu_606_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_cast_mid2_v_fu_388_p3),14));
    grp_fu_606_p1 <= ap_const_lv14_96(8 - 1 downto 0);
    grp_fu_606_p2 <= grp_fu_606_p20(8 - 1 downto 0);
    grp_fu_606_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_mid2_reg_672_pp0_iter1_reg),14));

    grp_fu_617_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_617_ce <= ap_const_logic_1;
        else 
            grp_fu_617_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_617_p0 <= grp_fu_617_p00(4 - 1 downto 0);
    grp_fu_617_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_435_p4),11));
    grp_fu_617_p1 <= ap_const_lv11_96(8 - 1 downto 0);
    grp_fu_617_p2 <= grp_fu_617_p20(8 - 1 downto 0);
    grp_fu_617_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_mid2_reg_672_pp0_iter2_reg),11));
    i_cast_mid2_v_fu_388_p3 <= 
        add_ln35_fu_368_p2 when (icmp_ln37_fu_374_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    icmp_ln35_fu_350_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv14_3A98) else "0";
    icmp_ln37_fu_374_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv8_96) else "0";
    j_mid2_fu_380_p3 <= 
        ap_const_lv8_0 when (icmp_ln37_fu_374_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    lshr_ln39_fu_540_p2 <= std_logic_vector(shift_right(unsigned(mem_addr_read_reg_733),to_integer(unsigned('0' & zext_ln39_1_fu_536_p1(31-1 downto 0)))));
    m_axi_mem_ARADDR <= sext_ln39_fu_503_p1;
    m_axi_mem_ARBURST <= ap_const_lv2_0;
    m_axi_mem_ARCACHE <= ap_const_lv4_0;
    m_axi_mem_ARID <= ap_const_lv1_0;
    m_axi_mem_ARLEN <= ap_const_lv32_1;
    m_axi_mem_ARLOCK <= ap_const_lv2_0;
    m_axi_mem_ARPROT <= ap_const_lv3_0;
    m_axi_mem_ARQOS <= ap_const_lv4_0;
    m_axi_mem_ARREGION <= ap_const_lv4_0;
    m_axi_mem_ARSIZE <= ap_const_lv3_0;
    m_axi_mem_ARUSER <= ap_const_lv1_0;

    m_axi_mem_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter4, ap_predicate_op75_readreq_state5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op75_readreq_state5 = ap_const_boolean_1))) then 
            m_axi_mem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_mem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_mem_AWADDR <= ap_const_lv64_0;
    m_axi_mem_AWBURST <= ap_const_lv2_0;
    m_axi_mem_AWCACHE <= ap_const_lv4_0;
    m_axi_mem_AWID <= ap_const_lv1_0;
    m_axi_mem_AWLEN <= ap_const_lv32_0;
    m_axi_mem_AWLOCK <= ap_const_lv2_0;
    m_axi_mem_AWPROT <= ap_const_lv3_0;
    m_axi_mem_AWQOS <= ap_const_lv4_0;
    m_axi_mem_AWREGION <= ap_const_lv4_0;
    m_axi_mem_AWSIZE <= ap_const_lv3_0;
    m_axi_mem_AWUSER <= ap_const_lv1_0;
    m_axi_mem_AWVALID <= ap_const_logic_0;
    m_axi_mem_BREADY <= ap_const_logic_0;

    m_axi_mem_RREADY_assign_proc : process(ap_enable_reg_pp0_iter11, ap_predicate_op91_read_state12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op91_read_state12 = ap_const_boolean_1))) then 
            m_axi_mem_RREADY <= ap_const_logic_1;
        else 
            m_axi_mem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_mem_WDATA <= ap_const_lv128_lc_1;
    m_axi_mem_WID <= ap_const_lv1_0;
    m_axi_mem_WLAST <= ap_const_logic_0;
    m_axi_mem_WSTRB <= ap_const_lv16_0;
    m_axi_mem_WUSER <= ap_const_lv1_0;
    m_axi_mem_WVALID <= ap_const_logic_0;

    mem_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter4, m_axi_mem_ARREADY, ap_predicate_op75_readreq_state5, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op75_readreq_state5 = ap_const_boolean_1))) then 
            mem_blk_n_AR <= m_axi_mem_ARREADY;
        else 
            mem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter11, m_axi_mem_RVALID, ap_predicate_op91_read_state12, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op91_read_state12 = ap_const_boolean_1))) then 
            mem_blk_n_R <= m_axi_mem_RVALID;
        else 
            mem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    mul_fu_429_p0 <= mul_fu_429_p00(7 - 1 downto 0);
    mul_fu_429_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_cast_mid2_v_reg_678),15));
    mul_fu_429_p1 <= ap_const_lv15_CD(9 - 1 downto 0);
        sext_ln39_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln39_4_reg_713),64));

    shiftreg15_cast_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shiftreg15_mid2_fu_552_p3),32));
    shiftreg15_mid2_fu_552_p3 <= 
        ap_const_lv16_0 when (icmp_ln37_reg_667_pp0_iter12_reg(0) = '1') else 
        shiftreg15_fu_148;
    shl_ln39_1_fu_529_p3 <= (add_ln39_2_reg_738 & ap_const_lv3_0);
    tmp_3_fu_458_p4 <= grp_fu_606_p3(13 downto 1);
    tmp_fu_435_p4 <= mul_fu_429_p2(14 downto 11);
    trunc_ln39_1_fu_545_p1 <= lshr_ln39_fu_540_p2(32 - 1 downto 0);
    trunc_ln39_2_fu_577_p1 <= ap_phi_mux_empty_phi_fu_321_p4(16 - 1 downto 0);
    trunc_ln39_fu_455_p1 <= grp_fu_606_p3(1 - 1 downto 0);
    zext_ln39_1_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln39_1_fu_529_p3),128));
    zext_ln39_3_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln39_3_reg_718_pp0_iter12_reg),64));
    zext_ln39_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_467_p3),64));
end behav;
