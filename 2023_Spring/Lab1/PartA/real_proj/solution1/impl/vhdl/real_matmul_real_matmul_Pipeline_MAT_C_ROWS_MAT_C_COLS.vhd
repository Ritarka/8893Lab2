-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity real_matmul_real_matmul_Pipeline_MAT_C_ROWS_MAT_C_COLS is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_mem_AWVALID : OUT STD_LOGIC;
    m_axi_mem_AWREADY : IN STD_LOGIC;
    m_axi_mem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_WVALID : OUT STD_LOGIC;
    m_axi_mem_WREADY : IN STD_LOGIC;
    m_axi_mem_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    m_axi_mem_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_mem_WLAST : OUT STD_LOGIC;
    m_axi_mem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_ARVALID : OUT STD_LOGIC;
    m_axi_mem_ARREADY : IN STD_LOGIC;
    m_axi_mem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_RVALID : IN STD_LOGIC;
    m_axi_mem_RREADY : OUT STD_LOGIC;
    m_axi_mem_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    m_axi_mem_RLAST : IN STD_LOGIC;
    m_axi_mem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_mem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BVALID : IN STD_LOGIC;
    m_axi_mem_BREADY : OUT STD_LOGIC;
    m_axi_mem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln91 : IN STD_LOGIC_VECTOR (59 downto 0);
    MatC_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    MatC_V_ce0 : OUT STD_LOGIC;
    MatC_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    MatC_V_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    MatC_V_1_ce0 : OUT STD_LOGIC;
    MatC_V_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    MatC_V_2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    MatC_V_2_ce0 : OUT STD_LOGIC;
    MatC_V_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    MatC_V_3_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    MatC_V_3_ce0 : OUT STD_LOGIC;
    MatC_V_3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    MatC_V_4_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    MatC_V_4_ce0 : OUT STD_LOGIC;
    MatC_V_4_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    MatC_V_5_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    MatC_V_5_ce0 : OUT STD_LOGIC;
    MatC_V_5_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    MatC_V_6_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    MatC_V_6_ce0 : OUT STD_LOGIC;
    MatC_V_6_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    MatC_V_7_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    MatC_V_7_ce0 : OUT STD_LOGIC;
    MatC_V_7_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    MatC_V_8_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    MatC_V_8_ce0 : OUT STD_LOGIC;
    MatC_V_8_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    MatC_V_9_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    MatC_V_9_ce0 : OUT STD_LOGIC;
    MatC_V_9_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of real_matmul_real_matmul_Pipeline_MAT_C_ROWS_MAT_C_COLS is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv112_0 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv15_4E20 : STD_LOGIC_VECTOR (14 downto 0) := "100111000100000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv8_C8 : STD_LOGIC_VECTOR (7 downto 0) := "11001000";
    constant ap_const_lv7_A : STD_LOGIC_VECTOR (6 downto 0) := "0001010";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv15_CD : STD_LOGIC_VECTOR (14 downto 0) := "000000011001101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv11_C8 : STD_LOGIC_VECTOR (10 downto 0) := "00011001000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal icmp_ln94_reg_546 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_546_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state13_io : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln91_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal mem_blk_n_W : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln91_reg_526 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln91_reg_526_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln91_reg_526_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln91_reg_526_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln91_reg_526_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln91_reg_526_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln91_reg_526_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln91_reg_526_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln91_reg_526_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln91_reg_526_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln91_reg_526_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_530 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_530_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_530_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_530_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_530_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_530_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_530_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_530_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_530_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_530_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_530_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln91_fu_325_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln91_reg_535 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln91_reg_535_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln91_reg_535_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln91_2_fu_333_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln91_2_reg_540 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln94_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_546_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_546_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_546_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_546_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_546_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_546_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_546_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_546_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_546_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_reg_546_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_485_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln94_reg_561 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln94_reg_561_pp0_iter5_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln94_reg_561_pp0_iter6_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln94_reg_561_pp0_iter7_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln94_reg_561_pp0_iter8_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_341_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal urem_ln91_reg_616 : STD_LOGIC_VECTOR (6 downto 0);
    signal MatC_V_load_reg_621 : STD_LOGIC_VECTOR (15 downto 0);
    signal MatC_V_1_load_reg_626 : STD_LOGIC_VECTOR (15 downto 0);
    signal MatC_V_2_load_reg_631 : STD_LOGIC_VECTOR (15 downto 0);
    signal MatC_V_3_load_reg_636 : STD_LOGIC_VECTOR (15 downto 0);
    signal MatC_V_4_load_reg_641 : STD_LOGIC_VECTOR (15 downto 0);
    signal MatC_V_5_load_reg_646 : STD_LOGIC_VECTOR (15 downto 0);
    signal MatC_V_6_load_reg_651 : STD_LOGIC_VECTOR (15 downto 0);
    signal MatC_V_7_load_reg_656 : STD_LOGIC_VECTOR (15 downto 0);
    signal MatC_V_8_load_reg_661 : STD_LOGIC_VECTOR (15 downto 0);
    signal MatC_V_9_load_reg_666 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln_fu_447_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal or_ln_reg_676 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_condition_exit_pp0_iter11_stage0 : STD_LOGIC;
    signal zext_ln94_1_fu_404_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal phi_ln94_fu_108 : STD_LOGIC_VECTOR (111 downto 0);
    signal select_ln94_fu_473_p3 : STD_LOGIC_VECTOR (111 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_112 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln93_fu_357_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_116 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten102_fu_120 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln91_1_fu_301_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_allocacmp_indvar_flatten102_load : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln91_fu_313_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_341_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_341_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_38_fu_347_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln91_fu_381_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln91_fu_381_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln91_fu_381_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_fu_387_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_432_p12 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln91_1_fu_425_p3 : STD_LOGIC_VECTOR (111 downto 0);
    signal tmp_8_fu_455_p4 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_9_fu_465_p3 : STD_LOGIC_VECTOR (111 downto 0);
    signal grp_fu_485_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_485_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_485_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_341_ce : STD_LOGIC;
    signal grp_fu_485_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_485_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_485_p20 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln91_fu_381_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component real_matmul_urem_7ns_5ns_7_11_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component real_matmul_mul_7ns_9ns_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component real_matmul_mux_107_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component real_matmul_mac_muladd_4ns_8ns_8ns_11_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component real_matmul_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    urem_7ns_5ns_7_11_1_U111 : component real_matmul_urem_7ns_5ns_7_11_1
    generic map (
        ID => 1,
        NUM_STAGE => 11,
        din0_WIDTH => 7,
        din1_WIDTH => 5,
        dout_WIDTH => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_341_p0,
        din1 => grp_fu_341_p1,
        ce => grp_fu_341_ce,
        dout => grp_fu_341_p2);

    mul_7ns_9ns_15_1_1_U112 : component real_matmul_mul_7ns_9ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 9,
        dout_WIDTH => 15)
    port map (
        din0 => mul_ln91_fu_381_p0,
        din1 => mul_ln91_fu_381_p1,
        dout => mul_ln91_fu_381_p2);

    mux_107_16_1_1_U113 : component real_matmul_mux_107_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 7,
        dout_WIDTH => 16)
    port map (
        din0 => MatC_V_load_reg_621,
        din1 => MatC_V_1_load_reg_626,
        din2 => MatC_V_2_load_reg_631,
        din3 => MatC_V_3_load_reg_636,
        din4 => MatC_V_4_load_reg_641,
        din5 => MatC_V_5_load_reg_646,
        din6 => MatC_V_6_load_reg_651,
        din7 => MatC_V_7_load_reg_656,
        din8 => MatC_V_8_load_reg_661,
        din9 => MatC_V_9_load_reg_666,
        din10 => urem_ln91_reg_616,
        dout => tmp_1_fu_432_p12);

    mac_muladd_4ns_8ns_8ns_11_4_1_U114 : component real_matmul_mac_muladd_4ns_8ns_8ns_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 4,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_485_p0,
        din1 => grp_fu_485_p1,
        din2 => grp_fu_485_p2,
        ce => grp_fu_485_ce,
        dout => grp_fu_485_p3);

    flow_control_loop_pipe_sequential_init_U : component real_matmul_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter11_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter11_stage0)) then 
                    ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln91_fu_295_p2 = ap_const_lv1_0))) then 
                    i_fu_116 <= select_ln91_2_fu_333_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_116 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten102_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln91_fu_295_p2 = ap_const_lv1_0))) then 
                    indvar_flatten102_fu_120 <= add_ln91_1_fu_301_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten102_fu_120 <= ap_const_lv15_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln91_fu_295_p2 = ap_const_lv1_0))) then 
                    j_fu_112 <= add_ln93_fu_357_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_112 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    phi_ln94_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    phi_ln94_fu_108 <= ap_const_lv112_0;
                elsif (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (icmp_ln91_reg_526_pp0_iter10_reg = ap_const_lv1_0))) then 
                    phi_ln94_fu_108 <= select_ln94_fu_473_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln91_reg_526_pp0_iter9_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                MatC_V_1_load_reg_626 <= MatC_V_1_q0;
                MatC_V_2_load_reg_631 <= MatC_V_2_q0;
                MatC_V_3_load_reg_636 <= MatC_V_3_q0;
                MatC_V_4_load_reg_641 <= MatC_V_4_q0;
                MatC_V_5_load_reg_646 <= MatC_V_5_q0;
                MatC_V_6_load_reg_651 <= MatC_V_6_q0;
                MatC_V_7_load_reg_656 <= MatC_V_7_q0;
                MatC_V_8_load_reg_661 <= MatC_V_8_q0;
                MatC_V_9_load_reg_666 <= MatC_V_9_q0;
                MatC_V_load_reg_621 <= MatC_V_q0;
                urem_ln91_reg_616 <= grp_fu_341_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln91_reg_526_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln94_reg_561 <= grp_fu_485_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln94_reg_561_pp0_iter5_reg <= add_ln94_reg_561;
                add_ln94_reg_561_pp0_iter6_reg <= add_ln94_reg_561_pp0_iter5_reg;
                add_ln94_reg_561_pp0_iter7_reg <= add_ln94_reg_561_pp0_iter6_reg;
                add_ln94_reg_561_pp0_iter8_reg <= add_ln94_reg_561_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln91_reg_526_pp0_iter10_reg <= icmp_ln91_reg_526_pp0_iter9_reg;
                icmp_ln91_reg_526_pp0_iter2_reg <= icmp_ln91_reg_526_pp0_iter1_reg;
                icmp_ln91_reg_526_pp0_iter3_reg <= icmp_ln91_reg_526_pp0_iter2_reg;
                icmp_ln91_reg_526_pp0_iter4_reg <= icmp_ln91_reg_526_pp0_iter3_reg;
                icmp_ln91_reg_526_pp0_iter5_reg <= icmp_ln91_reg_526_pp0_iter4_reg;
                icmp_ln91_reg_526_pp0_iter6_reg <= icmp_ln91_reg_526_pp0_iter5_reg;
                icmp_ln91_reg_526_pp0_iter7_reg <= icmp_ln91_reg_526_pp0_iter6_reg;
                icmp_ln91_reg_526_pp0_iter8_reg <= icmp_ln91_reg_526_pp0_iter7_reg;
                icmp_ln91_reg_526_pp0_iter9_reg <= icmp_ln91_reg_526_pp0_iter8_reg;
                icmp_ln93_reg_530_pp0_iter10_reg <= icmp_ln93_reg_530_pp0_iter9_reg;
                icmp_ln93_reg_530_pp0_iter2_reg <= icmp_ln93_reg_530_pp0_iter1_reg;
                icmp_ln93_reg_530_pp0_iter3_reg <= icmp_ln93_reg_530_pp0_iter2_reg;
                icmp_ln93_reg_530_pp0_iter4_reg <= icmp_ln93_reg_530_pp0_iter3_reg;
                icmp_ln93_reg_530_pp0_iter5_reg <= icmp_ln93_reg_530_pp0_iter4_reg;
                icmp_ln93_reg_530_pp0_iter6_reg <= icmp_ln93_reg_530_pp0_iter5_reg;
                icmp_ln93_reg_530_pp0_iter7_reg <= icmp_ln93_reg_530_pp0_iter6_reg;
                icmp_ln93_reg_530_pp0_iter8_reg <= icmp_ln93_reg_530_pp0_iter7_reg;
                icmp_ln93_reg_530_pp0_iter9_reg <= icmp_ln93_reg_530_pp0_iter8_reg;
                icmp_ln94_reg_546_pp0_iter10_reg <= icmp_ln94_reg_546_pp0_iter9_reg;
                icmp_ln94_reg_546_pp0_iter11_reg <= icmp_ln94_reg_546_pp0_iter10_reg;
                icmp_ln94_reg_546_pp0_iter2_reg <= icmp_ln94_reg_546_pp0_iter1_reg;
                icmp_ln94_reg_546_pp0_iter3_reg <= icmp_ln94_reg_546_pp0_iter2_reg;
                icmp_ln94_reg_546_pp0_iter4_reg <= icmp_ln94_reg_546_pp0_iter3_reg;
                icmp_ln94_reg_546_pp0_iter5_reg <= icmp_ln94_reg_546_pp0_iter4_reg;
                icmp_ln94_reg_546_pp0_iter6_reg <= icmp_ln94_reg_546_pp0_iter5_reg;
                icmp_ln94_reg_546_pp0_iter7_reg <= icmp_ln94_reg_546_pp0_iter6_reg;
                icmp_ln94_reg_546_pp0_iter8_reg <= icmp_ln94_reg_546_pp0_iter7_reg;
                icmp_ln94_reg_546_pp0_iter9_reg <= icmp_ln94_reg_546_pp0_iter8_reg;
                select_ln91_reg_535_pp0_iter2_reg <= select_ln91_reg_535_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln91_reg_526 <= icmp_ln91_fu_295_p2;
                icmp_ln91_reg_526_pp0_iter1_reg <= icmp_ln91_reg_526;
                icmp_ln93_reg_530_pp0_iter1_reg <= icmp_ln93_reg_530;
                icmp_ln94_reg_546_pp0_iter1_reg <= icmp_ln94_reg_546;
                select_ln91_reg_535_pp0_iter1_reg <= select_ln91_reg_535;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln91_fu_295_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln93_reg_530 <= icmp_ln93_fu_319_p2;
                icmp_ln94_reg_546 <= icmp_ln94_fu_351_p2;
                select_ln91_2_reg_540 <= select_ln91_2_fu_333_p3;
                select_ln91_reg_535 <= select_ln91_fu_325_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln91_reg_526_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                or_ln_reg_676 <= or_ln_fu_447_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    MatC_V_1_address0 <= zext_ln94_1_fu_404_p1(11 - 1 downto 0);

    MatC_V_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatC_V_1_ce0 <= ap_const_logic_1;
        else 
            MatC_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MatC_V_2_address0 <= zext_ln94_1_fu_404_p1(11 - 1 downto 0);

    MatC_V_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatC_V_2_ce0 <= ap_const_logic_1;
        else 
            MatC_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MatC_V_3_address0 <= zext_ln94_1_fu_404_p1(11 - 1 downto 0);

    MatC_V_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatC_V_3_ce0 <= ap_const_logic_1;
        else 
            MatC_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MatC_V_4_address0 <= zext_ln94_1_fu_404_p1(11 - 1 downto 0);

    MatC_V_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatC_V_4_ce0 <= ap_const_logic_1;
        else 
            MatC_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MatC_V_5_address0 <= zext_ln94_1_fu_404_p1(11 - 1 downto 0);

    MatC_V_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatC_V_5_ce0 <= ap_const_logic_1;
        else 
            MatC_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MatC_V_6_address0 <= zext_ln94_1_fu_404_p1(11 - 1 downto 0);

    MatC_V_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatC_V_6_ce0 <= ap_const_logic_1;
        else 
            MatC_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MatC_V_7_address0 <= zext_ln94_1_fu_404_p1(11 - 1 downto 0);

    MatC_V_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatC_V_7_ce0 <= ap_const_logic_1;
        else 
            MatC_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MatC_V_8_address0 <= zext_ln94_1_fu_404_p1(11 - 1 downto 0);

    MatC_V_8_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatC_V_8_ce0 <= ap_const_logic_1;
        else 
            MatC_V_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MatC_V_9_address0 <= zext_ln94_1_fu_404_p1(11 - 1 downto 0);

    MatC_V_9_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatC_V_9_ce0 <= ap_const_logic_1;
        else 
            MatC_V_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MatC_V_address0 <= zext_ln94_1_fu_404_p1(11 - 1 downto 0);

    MatC_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatC_V_ce0 <= ap_const_logic_1;
        else 
            MatC_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln91_1_fu_301_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten102_load) + unsigned(ap_const_lv15_1));
    add_ln91_fu_313_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv7_1));
    add_ln93_fu_357_p2 <= std_logic_vector(unsigned(select_ln91_fu_325_p3) + unsigned(ap_const_lv8_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_state13_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state13_io));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_state13_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state13_io));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state13_io_assign_proc : process(m_axi_mem_WREADY, icmp_ln94_reg_546_pp0_iter11_reg)
    begin
                ap_block_state13_io <= ((m_axi_mem_WREADY = ap_const_logic_0) and (icmp_ln94_reg_546_pp0_iter11_reg = ap_const_lv1_1));
    end process;

        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln91_fu_295_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln91_fu_295_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter11_stage0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_subdone, icmp_ln91_reg_526_pp0_iter10_reg)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (icmp_ln91_reg_526_pp0_iter10_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter11_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter11_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter11_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter11_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_116)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_116;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten102_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten102_fu_120)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten102_load <= ap_const_lv15_0;
        else 
            ap_sig_allocacmp_indvar_flatten102_load <= indvar_flatten102_fu_120;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_112)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_112;
        end if; 
    end process;

    empty_38_fu_347_p1 <= select_ln91_fu_325_p3(3 - 1 downto 0);

    grp_fu_341_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_341_ce <= ap_const_logic_1;
        else 
            grp_fu_341_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_341_p0 <= 
        add_ln91_fu_313_p2 when (icmp_ln93_fu_319_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    grp_fu_341_p1 <= ap_const_lv7_A(5 - 1 downto 0);

    grp_fu_485_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_485_ce <= ap_const_logic_1;
        else 
            grp_fu_485_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_485_p0 <= grp_fu_485_p00(4 - 1 downto 0);
    grp_fu_485_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_387_p4),11));
    grp_fu_485_p1 <= ap_const_lv11_C8(8 - 1 downto 0);
    grp_fu_485_p2 <= grp_fu_485_p20(8 - 1 downto 0);
    grp_fu_485_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln91_reg_535_pp0_iter2_reg),11));
    icmp_ln91_fu_295_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten102_load = ap_const_lv15_4E20) else "0";
    icmp_ln93_fu_319_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv8_C8) else "0";
    icmp_ln94_fu_351_p2 <= "1" when (empty_38_fu_347_p1 = ap_const_lv3_7) else "0";
    m_axi_mem_ARADDR <= ap_const_lv64_0;
    m_axi_mem_ARBURST <= ap_const_lv2_0;
    m_axi_mem_ARCACHE <= ap_const_lv4_0;
    m_axi_mem_ARID <= ap_const_lv1_0;
    m_axi_mem_ARLEN <= ap_const_lv32_0;
    m_axi_mem_ARLOCK <= ap_const_lv2_0;
    m_axi_mem_ARPROT <= ap_const_lv3_0;
    m_axi_mem_ARQOS <= ap_const_lv4_0;
    m_axi_mem_ARREGION <= ap_const_lv4_0;
    m_axi_mem_ARSIZE <= ap_const_lv3_0;
    m_axi_mem_ARUSER <= ap_const_lv1_0;
    m_axi_mem_ARVALID <= ap_const_logic_0;
    m_axi_mem_AWADDR <= ap_const_lv64_0;
    m_axi_mem_AWBURST <= ap_const_lv2_0;
    m_axi_mem_AWCACHE <= ap_const_lv4_0;
    m_axi_mem_AWID <= ap_const_lv1_0;
    m_axi_mem_AWLEN <= ap_const_lv32_0;
    m_axi_mem_AWLOCK <= ap_const_lv2_0;
    m_axi_mem_AWPROT <= ap_const_lv3_0;
    m_axi_mem_AWQOS <= ap_const_lv4_0;
    m_axi_mem_AWREGION <= ap_const_lv4_0;
    m_axi_mem_AWSIZE <= ap_const_lv3_0;
    m_axi_mem_AWUSER <= ap_const_lv1_0;
    m_axi_mem_AWVALID <= ap_const_logic_0;
    m_axi_mem_BREADY <= ap_const_logic_0;
    m_axi_mem_RREADY <= ap_const_logic_0;
    m_axi_mem_WDATA <= or_ln_reg_676;
    m_axi_mem_WID <= ap_const_lv1_0;
    m_axi_mem_WLAST <= ap_const_logic_0;
    m_axi_mem_WSTRB <= ap_const_lv16_FFFF;
    m_axi_mem_WUSER <= ap_const_lv1_0;

    m_axi_mem_WVALID_assign_proc : process(ap_enable_reg_pp0_iter12, icmp_ln94_reg_546_pp0_iter11_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln94_reg_546_pp0_iter11_reg = ap_const_lv1_1))) then 
            m_axi_mem_WVALID <= ap_const_logic_1;
        else 
            m_axi_mem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    mem_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter12, m_axi_mem_WREADY, icmp_ln94_reg_546_pp0_iter11_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln94_reg_546_pp0_iter11_reg = ap_const_lv1_1))) then 
            mem_blk_n_W <= m_axi_mem_WREADY;
        else 
            mem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    mul_ln91_fu_381_p0 <= mul_ln91_fu_381_p00(7 - 1 downto 0);
    mul_ln91_fu_381_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln91_2_reg_540),15));
    mul_ln91_fu_381_p1 <= ap_const_lv15_CD(9 - 1 downto 0);
    or_ln_fu_447_p3 <= (tmp_1_fu_432_p12 & select_ln91_1_fu_425_p3);
    select_ln91_1_fu_425_p3 <= 
        ap_const_lv112_0 when (icmp_ln93_reg_530_pp0_iter10_reg(0) = '1') else 
        phi_ln94_fu_108;
    select_ln91_2_fu_333_p3 <= 
        add_ln91_fu_313_p2 when (icmp_ln93_fu_319_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    select_ln91_fu_325_p3 <= 
        ap_const_lv8_0 when (icmp_ln93_fu_319_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    select_ln94_fu_473_p3 <= 
        ap_const_lv112_0 when (icmp_ln94_reg_546_pp0_iter10_reg(0) = '1') else 
        tmp_9_fu_465_p3;
    tmp_8_fu_455_p4 <= select_ln91_1_fu_425_p3(111 downto 16);
    tmp_9_fu_465_p3 <= (tmp_1_fu_432_p12 & tmp_8_fu_455_p4);
    tmp_fu_387_p4 <= mul_ln91_fu_381_p2(14 downto 11);
    zext_ln94_1_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln94_reg_561_pp0_iter8_reg),64));
end behav;
