// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module complex_matmul_complex_matmul_Pipeline_MAT_A_ROWSc_MAT_A_COLSc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_mem_AWVALID,
        m_axi_mem_AWREADY,
        m_axi_mem_AWADDR,
        m_axi_mem_AWID,
        m_axi_mem_AWLEN,
        m_axi_mem_AWSIZE,
        m_axi_mem_AWBURST,
        m_axi_mem_AWLOCK,
        m_axi_mem_AWCACHE,
        m_axi_mem_AWPROT,
        m_axi_mem_AWQOS,
        m_axi_mem_AWREGION,
        m_axi_mem_AWUSER,
        m_axi_mem_WVALID,
        m_axi_mem_WREADY,
        m_axi_mem_WDATA,
        m_axi_mem_WSTRB,
        m_axi_mem_WLAST,
        m_axi_mem_WID,
        m_axi_mem_WUSER,
        m_axi_mem_ARVALID,
        m_axi_mem_ARREADY,
        m_axi_mem_ARADDR,
        m_axi_mem_ARID,
        m_axi_mem_ARLEN,
        m_axi_mem_ARSIZE,
        m_axi_mem_ARBURST,
        m_axi_mem_ARLOCK,
        m_axi_mem_ARCACHE,
        m_axi_mem_ARPROT,
        m_axi_mem_ARQOS,
        m_axi_mem_ARREGION,
        m_axi_mem_ARUSER,
        m_axi_mem_RVALID,
        m_axi_mem_RREADY,
        m_axi_mem_RDATA,
        m_axi_mem_RLAST,
        m_axi_mem_RID,
        m_axi_mem_RFIFONUM,
        m_axi_mem_RUSER,
        m_axi_mem_RRESP,
        m_axi_mem_BVALID,
        m_axi_mem_BREADY,
        m_axi_mem_BRESP,
        m_axi_mem_BID,
        m_axi_mem_BUSER,
        sext_ln55_1,
        MatA_DRAM,
        cMatA_V_address0,
        cMatA_V_ce0,
        cMatA_V_we0,
        cMatA_V_d0,
        cMatA_V_1_address0,
        cMatA_V_1_ce0,
        cMatA_V_1_we0,
        cMatA_V_1_d0,
        cMatA_V_2_address0,
        cMatA_V_2_ce0,
        cMatA_V_2_we0,
        cMatA_V_2_d0,
        cMatA_V_3_address0,
        cMatA_V_3_ce0,
        cMatA_V_3_we0,
        cMatA_V_3_d0,
        cMatA_V_4_address0,
        cMatA_V_4_ce0,
        cMatA_V_4_we0,
        cMatA_V_4_d0,
        cMatA_V_5_address0,
        cMatA_V_5_ce0,
        cMatA_V_5_we0,
        cMatA_V_5_d0,
        cMatA_V_6_address0,
        cMatA_V_6_ce0,
        cMatA_V_6_we0,
        cMatA_V_6_d0,
        cMatA_V_7_address0,
        cMatA_V_7_ce0,
        cMatA_V_7_we0,
        cMatA_V_7_d0,
        cMatA_V_8_address0,
        cMatA_V_8_ce0,
        cMatA_V_8_we0,
        cMatA_V_8_d0,
        cMatA_V_9_address0,
        cMatA_V_9_ce0,
        cMatA_V_9_we0,
        cMatA_V_9_d0,
        cMatA_V_10_address0,
        cMatA_V_10_ce0,
        cMatA_V_10_we0,
        cMatA_V_10_d0,
        cMatA_V_11_address0,
        cMatA_V_11_ce0,
        cMatA_V_11_we0,
        cMatA_V_11_d0,
        cMatA_V_12_address0,
        cMatA_V_12_ce0,
        cMatA_V_12_we0,
        cMatA_V_12_d0,
        cMatA_V_13_address0,
        cMatA_V_13_ce0,
        cMatA_V_13_we0,
        cMatA_V_13_d0,
        cMatA_V_14_address0,
        cMatA_V_14_ce0,
        cMatA_V_14_we0,
        cMatA_V_14_d0,
        cMatA_V_15_address0,
        cMatA_V_15_ce0,
        cMatA_V_15_we0,
        cMatA_V_15_d0,
        cMatA_V_16_address0,
        cMatA_V_16_ce0,
        cMatA_V_16_we0,
        cMatA_V_16_d0,
        cMatA_V_17_address0,
        cMatA_V_17_ce0,
        cMatA_V_17_we0,
        cMatA_V_17_d0,
        cMatA_V_18_address0,
        cMatA_V_18_ce0,
        cMatA_V_18_we0,
        cMatA_V_18_d0,
        cMatA_V_19_address0,
        cMatA_V_19_ce0,
        cMatA_V_19_we0,
        cMatA_V_19_d0,
        zext_ln52
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_pp0_stage0 = 9'd128;
parameter    ap_ST_fsm_state20 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_mem_AWVALID;
input   m_axi_mem_AWREADY;
output  [63:0] m_axi_mem_AWADDR;
output  [0:0] m_axi_mem_AWID;
output  [31:0] m_axi_mem_AWLEN;
output  [2:0] m_axi_mem_AWSIZE;
output  [1:0] m_axi_mem_AWBURST;
output  [1:0] m_axi_mem_AWLOCK;
output  [3:0] m_axi_mem_AWCACHE;
output  [2:0] m_axi_mem_AWPROT;
output  [3:0] m_axi_mem_AWQOS;
output  [3:0] m_axi_mem_AWREGION;
output  [0:0] m_axi_mem_AWUSER;
output   m_axi_mem_WVALID;
input   m_axi_mem_WREADY;
output  [31:0] m_axi_mem_WDATA;
output  [3:0] m_axi_mem_WSTRB;
output   m_axi_mem_WLAST;
output  [0:0] m_axi_mem_WID;
output  [0:0] m_axi_mem_WUSER;
output   m_axi_mem_ARVALID;
input   m_axi_mem_ARREADY;
output  [63:0] m_axi_mem_ARADDR;
output  [0:0] m_axi_mem_ARID;
output  [31:0] m_axi_mem_ARLEN;
output  [2:0] m_axi_mem_ARSIZE;
output  [1:0] m_axi_mem_ARBURST;
output  [1:0] m_axi_mem_ARLOCK;
output  [3:0] m_axi_mem_ARCACHE;
output  [2:0] m_axi_mem_ARPROT;
output  [3:0] m_axi_mem_ARQOS;
output  [3:0] m_axi_mem_ARREGION;
output  [0:0] m_axi_mem_ARUSER;
input   m_axi_mem_RVALID;
output   m_axi_mem_RREADY;
input  [31:0] m_axi_mem_RDATA;
input   m_axi_mem_RLAST;
input  [0:0] m_axi_mem_RID;
input  [8:0] m_axi_mem_RFIFONUM;
input  [0:0] m_axi_mem_RUSER;
input  [1:0] m_axi_mem_RRESP;
input   m_axi_mem_BVALID;
output   m_axi_mem_BREADY;
input  [1:0] m_axi_mem_BRESP;
input  [0:0] m_axi_mem_BID;
input  [0:0] m_axi_mem_BUSER;
input  [61:0] sext_ln55_1;
input  [63:0] MatA_DRAM;
output  [9:0] cMatA_V_address0;
output   cMatA_V_ce0;
output   cMatA_V_we0;
output  [15:0] cMatA_V_d0;
output  [9:0] cMatA_V_1_address0;
output   cMatA_V_1_ce0;
output   cMatA_V_1_we0;
output  [15:0] cMatA_V_1_d0;
output  [9:0] cMatA_V_2_address0;
output   cMatA_V_2_ce0;
output   cMatA_V_2_we0;
output  [15:0] cMatA_V_2_d0;
output  [9:0] cMatA_V_3_address0;
output   cMatA_V_3_ce0;
output   cMatA_V_3_we0;
output  [15:0] cMatA_V_3_d0;
output  [9:0] cMatA_V_4_address0;
output   cMatA_V_4_ce0;
output   cMatA_V_4_we0;
output  [15:0] cMatA_V_4_d0;
output  [9:0] cMatA_V_5_address0;
output   cMatA_V_5_ce0;
output   cMatA_V_5_we0;
output  [15:0] cMatA_V_5_d0;
output  [9:0] cMatA_V_6_address0;
output   cMatA_V_6_ce0;
output   cMatA_V_6_we0;
output  [15:0] cMatA_V_6_d0;
output  [9:0] cMatA_V_7_address0;
output   cMatA_V_7_ce0;
output   cMatA_V_7_we0;
output  [15:0] cMatA_V_7_d0;
output  [9:0] cMatA_V_8_address0;
output   cMatA_V_8_ce0;
output   cMatA_V_8_we0;
output  [15:0] cMatA_V_8_d0;
output  [9:0] cMatA_V_9_address0;
output   cMatA_V_9_ce0;
output   cMatA_V_9_we0;
output  [15:0] cMatA_V_9_d0;
output  [9:0] cMatA_V_10_address0;
output   cMatA_V_10_ce0;
output   cMatA_V_10_we0;
output  [15:0] cMatA_V_10_d0;
output  [9:0] cMatA_V_11_address0;
output   cMatA_V_11_ce0;
output   cMatA_V_11_we0;
output  [15:0] cMatA_V_11_d0;
output  [9:0] cMatA_V_12_address0;
output   cMatA_V_12_ce0;
output   cMatA_V_12_we0;
output  [15:0] cMatA_V_12_d0;
output  [9:0] cMatA_V_13_address0;
output   cMatA_V_13_ce0;
output   cMatA_V_13_we0;
output  [15:0] cMatA_V_13_d0;
output  [9:0] cMatA_V_14_address0;
output   cMatA_V_14_ce0;
output   cMatA_V_14_we0;
output  [15:0] cMatA_V_14_d0;
output  [9:0] cMatA_V_15_address0;
output   cMatA_V_15_ce0;
output   cMatA_V_15_we0;
output  [15:0] cMatA_V_15_d0;
output  [9:0] cMatA_V_16_address0;
output   cMatA_V_16_ce0;
output   cMatA_V_16_we0;
output  [15:0] cMatA_V_16_d0;
output  [9:0] cMatA_V_17_address0;
output   cMatA_V_17_ce0;
output   cMatA_V_17_we0;
output  [15:0] cMatA_V_17_d0;
output  [9:0] cMatA_V_18_address0;
output   cMatA_V_18_ce0;
output   cMatA_V_18_we0;
output  [15:0] cMatA_V_18_d0;
output  [9:0] cMatA_V_19_address0;
output   cMatA_V_19_ce0;
output   cMatA_V_19_we0;
output  [15:0] cMatA_V_19_d0;
input  [4:0] zext_ln52;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_mem_ARVALID;
reg m_axi_mem_RREADY;
reg cMatA_V_ce0;
reg cMatA_V_we0;
reg cMatA_V_1_ce0;
reg cMatA_V_1_we0;
reg cMatA_V_2_ce0;
reg cMatA_V_2_we0;
reg cMatA_V_3_ce0;
reg cMatA_V_3_we0;
reg cMatA_V_4_ce0;
reg cMatA_V_4_we0;
reg cMatA_V_5_ce0;
reg cMatA_V_5_we0;
reg cMatA_V_6_ce0;
reg cMatA_V_6_we0;
reg cMatA_V_7_ce0;
reg cMatA_V_7_we0;
reg cMatA_V_8_ce0;
reg cMatA_V_8_we0;
reg cMatA_V_9_ce0;
reg cMatA_V_9_we0;
reg cMatA_V_10_ce0;
reg cMatA_V_10_we0;
reg cMatA_V_11_ce0;
reg cMatA_V_11_we0;
reg cMatA_V_12_ce0;
reg cMatA_V_12_we0;
reg cMatA_V_13_ce0;
reg cMatA_V_13_we0;
reg cMatA_V_14_ce0;
reg cMatA_V_14_we0;
reg cMatA_V_15_ce0;
reg cMatA_V_15_we0;
reg cMatA_V_16_ce0;
reg cMatA_V_16_we0;
reg cMatA_V_17_ce0;
reg cMatA_V_17_we0;
reg cMatA_V_18_ce0;
reg cMatA_V_18_we0;
reg cMatA_V_19_ce0;
reg cMatA_V_19_we0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    mem_blk_n_AR;
reg    mem_blk_n_R;
reg    ap_enable_reg_pp0_iter9;
wire    ap_block_pp0_stage0;
wire   [31:0] zext_ln52_cast_fu_492_p1;
reg   [31:0] zext_ln52_cast_reg_668;
wire    ap_CS_fsm_state7;
wire   [7:0] select_ln52_fu_529_p3;
reg   [7:0] select_ln52_reg_676;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state8_pp0_stage0_iter0;
wire    ap_block_state9_pp0_stage0_iter1;
wire    ap_block_state10_pp0_stage0_iter2;
wire    ap_block_state11_pp0_stage0_iter3;
wire    ap_block_state12_pp0_stage0_iter4;
wire    ap_block_state13_pp0_stage0_iter5;
wire    ap_block_state14_pp0_stage0_iter6;
wire    ap_block_state15_pp0_stage0_iter7;
wire    ap_block_state16_pp0_stage0_iter8;
reg    ap_block_state17_pp0_stage0_iter9;
wire    ap_block_state18_pp0_stage0_iter10;
wire    ap_block_state19_pp0_stage0_iter11;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln52_fu_499_p2;
reg   [7:0] select_ln52_reg_676_pp0_iter1_reg;
reg   [7:0] select_ln52_reg_676_pp0_iter2_reg;
wire   [6:0] select_ln52_1_fu_537_p3;
reg   [2:0] tmp_reg_686;
wire   [9:0] grp_fu_633_p3;
reg   [9:0] add_ln55_reg_701;
reg    ap_enable_reg_pp0_iter4;
reg   [9:0] add_ln55_reg_701_pp0_iter5_reg;
reg   [9:0] add_ln55_reg_701_pp0_iter6_reg;
reg   [9:0] add_ln55_reg_701_pp0_iter7_reg;
reg   [9:0] add_ln55_reg_701_pp0_iter8_reg;
reg   [9:0] add_ln55_reg_701_pp0_iter9_reg;
reg   [9:0] add_ln55_reg_701_pp0_iter10_reg;
reg   [31:0] mem_addr_read_reg_706;
wire   [4:0] trunc_ln52_fu_598_p1;
reg   [4:0] trunc_ln52_reg_711;
wire   [15:0] trunc_ln55_fu_606_p1;
reg   [15:0] trunc_ln55_reg_715;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state8;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
wire   [63:0] zext_ln55_1_fu_610_p1;
wire  signed [63:0] sext_ln55_1_cast_fu_466_p1;
reg   [7:0] j_1_fu_164;
wire   [7:0] add_ln54_fu_571_p2;
reg   [6:0] i_fu_168;
reg   [13:0] indvar_flatten24_fu_172;
wire   [13:0] add_ln52_1_fu_505_p2;
wire   [0:0] icmp_ln54_fu_523_p2;
wire   [6:0] add_ln52_fu_517_p2;
wire   [6:0] mul_ln52_fu_549_p0;
wire   [8:0] mul_ln52_fu_549_p1;
wire   [14:0] mul_ln52_fu_549_p2;
wire   [5:0] grp_fu_565_p1;
wire   [4:0] grp_fu_565_p2;
wire   [31:0] lshr_ln55_fu_602_p2;
wire   [2:0] grp_fu_633_p0;
wire   [7:0] grp_fu_633_p1;
wire   [7:0] grp_fu_633_p2;
reg    grp_fu_565_ce;
reg    grp_fu_633_ce;
wire    ap_CS_fsm_state20;
reg   [8:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state20_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [9:0] grp_fu_633_p00;
wire   [9:0] grp_fu_633_p20;
wire   [14:0] mul_ln52_fu_549_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
end

complex_matmul_mul_7ns_9ns_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 15 ))
mul_7ns_9ns_15_1_1_U31(
    .din0(mul_ln52_fu_549_p0),
    .din1(mul_ln52_fu_549_p1),
    .dout(mul_ln52_fu_549_p2)
);

complex_matmul_urem_7ns_6ns_5_11_1 #(
    .ID( 1 ),
    .NUM_STAGE( 11 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 5 ))
urem_7ns_6ns_5_11_1_U32(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln52_1_fu_537_p3),
    .din1(grp_fu_565_p1),
    .ce(grp_fu_565_ce),
    .dout(grp_fu_565_p2)
);

complex_matmul_mac_muladd_3ns_8ns_8ns_10_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 10 ))
mac_muladd_3ns_8ns_8ns_10_4_1_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_633_p0),
    .din1(grp_fu_633_p1),
    .din2(grp_fu_633_p2),
    .ce(grp_fu_633_ce),
    .dout(grp_fu_633_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state8) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state8)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state8);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter11 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_mem_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_168 <= 7'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln52_fu_499_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_fu_168 <= select_ln52_1_fu_537_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_mem_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten24_fu_172 <= 14'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln52_fu_499_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten24_fu_172 <= add_ln52_1_fu_505_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_mem_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        j_1_fu_164 <= 8'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln52_fu_499_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_1_fu_164 <= add_ln54_fu_571_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln55_reg_701 <= grp_fu_633_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln55_reg_701_pp0_iter10_reg <= add_ln55_reg_701_pp0_iter9_reg;
        add_ln55_reg_701_pp0_iter5_reg <= add_ln55_reg_701;
        add_ln55_reg_701_pp0_iter6_reg <= add_ln55_reg_701_pp0_iter5_reg;
        add_ln55_reg_701_pp0_iter7_reg <= add_ln55_reg_701_pp0_iter6_reg;
        add_ln55_reg_701_pp0_iter8_reg <= add_ln55_reg_701_pp0_iter7_reg;
        add_ln55_reg_701_pp0_iter9_reg <= add_ln55_reg_701_pp0_iter8_reg;
        mem_addr_read_reg_706 <= m_axi_mem_RDATA;
        select_ln52_reg_676_pp0_iter2_reg <= select_ln52_reg_676_pp0_iter1_reg;
        trunc_ln52_reg_711 <= trunc_ln52_fu_598_p1;
        trunc_ln55_reg_715 <= trunc_ln55_fu_606_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_499_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln52_reg_676 <= select_ln52_fu_529_p3;
        tmp_reg_686 <= {{mul_ln52_fu_549_p2[14:12]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln52_reg_676_pp0_iter1_reg <= select_ln52_reg_676;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        zext_ln52_cast_reg_668[4 : 0] <= zext_ln52_cast_fu_492_p1[4 : 0];
    end
end

always @ (*) begin
    if (((m_axi_mem_ARREADY == 1'b0) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if ((icmp_ln52_fu_499_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatA_V_10_ce0 = 1'b1;
    end else begin
        cMatA_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (trunc_ln52_reg_711 == 5'd10) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatA_V_10_we0 = 1'b1;
    end else begin
        cMatA_V_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatA_V_11_ce0 = 1'b1;
    end else begin
        cMatA_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (trunc_ln52_reg_711 == 5'd11) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatA_V_11_we0 = 1'b1;
    end else begin
        cMatA_V_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatA_V_12_ce0 = 1'b1;
    end else begin
        cMatA_V_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (trunc_ln52_reg_711 == 5'd12) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatA_V_12_we0 = 1'b1;
    end else begin
        cMatA_V_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatA_V_13_ce0 = 1'b1;
    end else begin
        cMatA_V_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (trunc_ln52_reg_711 == 5'd13) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatA_V_13_we0 = 1'b1;
    end else begin
        cMatA_V_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatA_V_14_ce0 = 1'b1;
    end else begin
        cMatA_V_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (trunc_ln52_reg_711 == 5'd14) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatA_V_14_we0 = 1'b1;
    end else begin
        cMatA_V_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatA_V_15_ce0 = 1'b1;
    end else begin
        cMatA_V_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (trunc_ln52_reg_711 == 5'd15) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatA_V_15_we0 = 1'b1;
    end else begin
        cMatA_V_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatA_V_16_ce0 = 1'b1;
    end else begin
        cMatA_V_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (trunc_ln52_reg_711 == 5'd16) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatA_V_16_we0 = 1'b1;
    end else begin
        cMatA_V_16_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatA_V_17_ce0 = 1'b1;
    end else begin
        cMatA_V_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (trunc_ln52_reg_711 == 5'd17) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatA_V_17_we0 = 1'b1;
    end else begin
        cMatA_V_17_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatA_V_18_ce0 = 1'b1;
    end else begin
        cMatA_V_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (trunc_ln52_reg_711 == 5'd18) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatA_V_18_we0 = 1'b1;
    end else begin
        cMatA_V_18_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatA_V_19_ce0 = 1'b1;
    end else begin
        cMatA_V_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & ((trunc_ln52_reg_711 == 5'd19) | ((trunc_ln52_reg_711 == 5'd20) | ((trunc_ln52_reg_711 == 5'd21) | ((trunc_ln52_reg_711 == 5'd22) | ((trunc_ln52_reg_711 == 5'd23) | ((trunc_ln52_reg_711 == 5'd24) | ((trunc_ln52_reg_711 == 5'd25) | ((trunc_ln52_reg_711 == 5'd26) | ((trunc_ln52_reg_711 == 5'd27) | ((trunc_ln52_reg_711 == 5'd28) | ((trunc_ln52_reg_711 == 5'd29) | ((trunc_ln52_reg_711 == 5'd30) | (trunc_ln52_reg_711 == 5'd31))))))))))))))) begin
        cMatA_V_19_we0 = 1'b1;
    end else begin
        cMatA_V_19_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatA_V_1_ce0 = 1'b1;
    end else begin
        cMatA_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (trunc_ln52_reg_711 == 5'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatA_V_1_we0 = 1'b1;
    end else begin
        cMatA_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatA_V_2_ce0 = 1'b1;
    end else begin
        cMatA_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (trunc_ln52_reg_711 == 5'd2) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatA_V_2_we0 = 1'b1;
    end else begin
        cMatA_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatA_V_3_ce0 = 1'b1;
    end else begin
        cMatA_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (trunc_ln52_reg_711 == 5'd3) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatA_V_3_we0 = 1'b1;
    end else begin
        cMatA_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatA_V_4_ce0 = 1'b1;
    end else begin
        cMatA_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (trunc_ln52_reg_711 == 5'd4) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatA_V_4_we0 = 1'b1;
    end else begin
        cMatA_V_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatA_V_5_ce0 = 1'b1;
    end else begin
        cMatA_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (trunc_ln52_reg_711 == 5'd5) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatA_V_5_we0 = 1'b1;
    end else begin
        cMatA_V_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatA_V_6_ce0 = 1'b1;
    end else begin
        cMatA_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (trunc_ln52_reg_711 == 5'd6) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatA_V_6_we0 = 1'b1;
    end else begin
        cMatA_V_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatA_V_7_ce0 = 1'b1;
    end else begin
        cMatA_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (trunc_ln52_reg_711 == 5'd7) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatA_V_7_we0 = 1'b1;
    end else begin
        cMatA_V_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatA_V_8_ce0 = 1'b1;
    end else begin
        cMatA_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (trunc_ln52_reg_711 == 5'd8) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatA_V_8_we0 = 1'b1;
    end else begin
        cMatA_V_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatA_V_9_ce0 = 1'b1;
    end else begin
        cMatA_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (trunc_ln52_reg_711 == 5'd9) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatA_V_9_we0 = 1'b1;
    end else begin
        cMatA_V_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatA_V_ce0 = 1'b1;
    end else begin
        cMatA_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (trunc_ln52_reg_711 == 5'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatA_V_we0 = 1'b1;
    end else begin
        cMatA_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_565_ce = 1'b1;
    end else begin
        grp_fu_565_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_633_ce = 1'b1;
    end else begin
        grp_fu_633_ce = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_mem_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_mem_ARVALID = 1'b1;
    end else begin
        m_axi_mem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        m_axi_mem_RREADY = 1'b1;
    end else begin
        m_axi_mem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        mem_blk_n_AR = m_axi_mem_ARREADY;
    end else begin
        mem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        mem_blk_n_R = m_axi_mem_RVALID;
    end else begin
        mem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((m_axi_mem_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln52_fu_499_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter11 == 1'b1) & (ap_enable_reg_pp0_iter10 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter11 == 1'b1) & (ap_enable_reg_pp0_iter10 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln52_fu_499_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln52_1_fu_505_p2 = (indvar_flatten24_fu_172 + 14'd1);

assign add_ln52_fu_517_p2 = (i_fu_168 + 7'd1);

assign add_ln54_fu_571_p2 = (select_ln52_fu_529_p3 + 8'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_mem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_mem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state17_pp0_stage0_iter9 = (m_axi_mem_RVALID == 1'b0);
end

assign ap_block_state18_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign cMatA_V_10_address0 = zext_ln55_1_fu_610_p1;

assign cMatA_V_10_d0 = trunc_ln55_reg_715;

assign cMatA_V_11_address0 = zext_ln55_1_fu_610_p1;

assign cMatA_V_11_d0 = trunc_ln55_reg_715;

assign cMatA_V_12_address0 = zext_ln55_1_fu_610_p1;

assign cMatA_V_12_d0 = trunc_ln55_reg_715;

assign cMatA_V_13_address0 = zext_ln55_1_fu_610_p1;

assign cMatA_V_13_d0 = trunc_ln55_reg_715;

assign cMatA_V_14_address0 = zext_ln55_1_fu_610_p1;

assign cMatA_V_14_d0 = trunc_ln55_reg_715;

assign cMatA_V_15_address0 = zext_ln55_1_fu_610_p1;

assign cMatA_V_15_d0 = trunc_ln55_reg_715;

assign cMatA_V_16_address0 = zext_ln55_1_fu_610_p1;

assign cMatA_V_16_d0 = trunc_ln55_reg_715;

assign cMatA_V_17_address0 = zext_ln55_1_fu_610_p1;

assign cMatA_V_17_d0 = trunc_ln55_reg_715;

assign cMatA_V_18_address0 = zext_ln55_1_fu_610_p1;

assign cMatA_V_18_d0 = trunc_ln55_reg_715;

assign cMatA_V_19_address0 = zext_ln55_1_fu_610_p1;

assign cMatA_V_19_d0 = trunc_ln55_reg_715;

assign cMatA_V_1_address0 = zext_ln55_1_fu_610_p1;

assign cMatA_V_1_d0 = trunc_ln55_reg_715;

assign cMatA_V_2_address0 = zext_ln55_1_fu_610_p1;

assign cMatA_V_2_d0 = trunc_ln55_reg_715;

assign cMatA_V_3_address0 = zext_ln55_1_fu_610_p1;

assign cMatA_V_3_d0 = trunc_ln55_reg_715;

assign cMatA_V_4_address0 = zext_ln55_1_fu_610_p1;

assign cMatA_V_4_d0 = trunc_ln55_reg_715;

assign cMatA_V_5_address0 = zext_ln55_1_fu_610_p1;

assign cMatA_V_5_d0 = trunc_ln55_reg_715;

assign cMatA_V_6_address0 = zext_ln55_1_fu_610_p1;

assign cMatA_V_6_d0 = trunc_ln55_reg_715;

assign cMatA_V_7_address0 = zext_ln55_1_fu_610_p1;

assign cMatA_V_7_d0 = trunc_ln55_reg_715;

assign cMatA_V_8_address0 = zext_ln55_1_fu_610_p1;

assign cMatA_V_8_d0 = trunc_ln55_reg_715;

assign cMatA_V_9_address0 = zext_ln55_1_fu_610_p1;

assign cMatA_V_9_d0 = trunc_ln55_reg_715;

assign cMatA_V_address0 = zext_ln55_1_fu_610_p1;

assign cMatA_V_d0 = trunc_ln55_reg_715;

assign grp_fu_565_p1 = 7'd20;

assign grp_fu_633_p0 = grp_fu_633_p00;

assign grp_fu_633_p00 = tmp_reg_686;

assign grp_fu_633_p1 = 10'd150;

assign grp_fu_633_p2 = grp_fu_633_p20;

assign grp_fu_633_p20 = select_ln52_reg_676_pp0_iter2_reg;

assign icmp_ln52_fu_499_p2 = ((indvar_flatten24_fu_172 == 14'd15000) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_523_p2 = ((j_1_fu_164 == 8'd150) ? 1'b1 : 1'b0);

assign lshr_ln55_fu_602_p2 = mem_addr_read_reg_706 >> zext_ln52_cast_reg_668;

assign m_axi_mem_ARADDR = sext_ln55_1_cast_fu_466_p1;

assign m_axi_mem_ARBURST = 2'd0;

assign m_axi_mem_ARCACHE = 4'd0;

assign m_axi_mem_ARID = 1'd0;

assign m_axi_mem_ARLEN = 32'd15000;

assign m_axi_mem_ARLOCK = 2'd0;

assign m_axi_mem_ARPROT = 3'd0;

assign m_axi_mem_ARQOS = 4'd0;

assign m_axi_mem_ARREGION = 4'd0;

assign m_axi_mem_ARSIZE = 3'd0;

assign m_axi_mem_ARUSER = 1'd0;

assign m_axi_mem_AWADDR = 64'd0;

assign m_axi_mem_AWBURST = 2'd0;

assign m_axi_mem_AWCACHE = 4'd0;

assign m_axi_mem_AWID = 1'd0;

assign m_axi_mem_AWLEN = 32'd0;

assign m_axi_mem_AWLOCK = 2'd0;

assign m_axi_mem_AWPROT = 3'd0;

assign m_axi_mem_AWQOS = 4'd0;

assign m_axi_mem_AWREGION = 4'd0;

assign m_axi_mem_AWSIZE = 3'd0;

assign m_axi_mem_AWUSER = 1'd0;

assign m_axi_mem_AWVALID = 1'b0;

assign m_axi_mem_BREADY = 1'b0;

assign m_axi_mem_WDATA = 32'd0;

assign m_axi_mem_WID = 1'd0;

assign m_axi_mem_WLAST = 1'b0;

assign m_axi_mem_WSTRB = 4'd0;

assign m_axi_mem_WUSER = 1'd0;

assign m_axi_mem_WVALID = 1'b0;

assign mul_ln52_fu_549_p0 = mul_ln52_fu_549_p00;

assign mul_ln52_fu_549_p00 = select_ln52_1_fu_537_p3;

assign mul_ln52_fu_549_p1 = 15'd205;

assign select_ln52_1_fu_537_p3 = ((icmp_ln54_fu_523_p2[0:0] == 1'b1) ? add_ln52_fu_517_p2 : i_fu_168);

assign select_ln52_fu_529_p3 = ((icmp_ln54_fu_523_p2[0:0] == 1'b1) ? 8'd0 : j_1_fu_164);

assign sext_ln55_1_cast_fu_466_p1 = $signed(sext_ln55_1);

assign trunc_ln52_fu_598_p1 = grp_fu_565_p2[4:0];

assign trunc_ln55_fu_606_p1 = lshr_ln55_fu_602_p2[15:0];

assign zext_ln52_cast_fu_492_p1 = zext_ln52;

assign zext_ln55_1_fu_610_p1 = add_ln55_reg_701_pp0_iter10_reg;

always @ (posedge ap_clk) begin
    zext_ln52_cast_reg_668[31:5] <= 27'b000000000000000000000000000;
end

endmodule //complex_matmul_complex_matmul_Pipeline_MAT_A_ROWSc_MAT_A_COLSc
