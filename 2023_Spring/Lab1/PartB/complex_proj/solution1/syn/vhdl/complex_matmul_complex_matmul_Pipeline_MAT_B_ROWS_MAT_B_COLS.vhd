-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity complex_matmul_complex_matmul_Pipeline_MAT_B_ROWS_MAT_B_COLS is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_mem_AWVALID : OUT STD_LOGIC;
    m_axi_mem_AWREADY : IN STD_LOGIC;
    m_axi_mem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_WVALID : OUT STD_LOGIC;
    m_axi_mem_WREADY : IN STD_LOGIC;
    m_axi_mem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_WLAST : OUT STD_LOGIC;
    m_axi_mem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_ARVALID : OUT STD_LOGIC;
    m_axi_mem_ARREADY : IN STD_LOGIC;
    m_axi_mem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_RVALID : IN STD_LOGIC;
    m_axi_mem_RREADY : OUT STD_LOGIC;
    m_axi_mem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_RLAST : IN STD_LOGIC;
    m_axi_mem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_mem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BVALID : IN STD_LOGIC;
    m_axi_mem_BREADY : OUT STD_LOGIC;
    m_axi_mem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln64_1 : IN STD_LOGIC_VECTOR (61 downto 0);
    MatB_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    MatB_V_ce0 : OUT STD_LOGIC;
    MatB_V_we0 : OUT STD_LOGIC;
    MatB_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    MatB_V_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    MatB_V_1_ce0 : OUT STD_LOGIC;
    MatB_V_1_we0 : OUT STD_LOGIC;
    MatB_V_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    MatB_V_2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    MatB_V_2_ce0 : OUT STD_LOGIC;
    MatB_V_2_we0 : OUT STD_LOGIC;
    MatB_V_2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    MatB_V_3_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    MatB_V_3_ce0 : OUT STD_LOGIC;
    MatB_V_3_we0 : OUT STD_LOGIC;
    MatB_V_3_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    MatB_V_4_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    MatB_V_4_ce0 : OUT STD_LOGIC;
    MatB_V_4_we0 : OUT STD_LOGIC;
    MatB_V_4_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    MatB_V_5_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    MatB_V_5_ce0 : OUT STD_LOGIC;
    MatB_V_5_we0 : OUT STD_LOGIC;
    MatB_V_5_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    MatB_V_6_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    MatB_V_6_ce0 : OUT STD_LOGIC;
    MatB_V_6_we0 : OUT STD_LOGIC;
    MatB_V_6_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    MatB_V_7_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    MatB_V_7_ce0 : OUT STD_LOGIC;
    MatB_V_7_we0 : OUT STD_LOGIC;
    MatB_V_7_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    MatB_V_8_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    MatB_V_8_ce0 : OUT STD_LOGIC;
    MatB_V_8_we0 : OUT STD_LOGIC;
    MatB_V_8_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    MatB_V_9_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    MatB_V_9_ce0 : OUT STD_LOGIC;
    MatB_V_9_we0 : OUT STD_LOGIC;
    MatB_V_9_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    MatB_V_10_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    MatB_V_10_ce0 : OUT STD_LOGIC;
    MatB_V_10_we0 : OUT STD_LOGIC;
    MatB_V_10_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    MatB_V_11_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    MatB_V_11_ce0 : OUT STD_LOGIC;
    MatB_V_11_we0 : OUT STD_LOGIC;
    MatB_V_11_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    MatB_V_12_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    MatB_V_12_ce0 : OUT STD_LOGIC;
    MatB_V_12_we0 : OUT STD_LOGIC;
    MatB_V_12_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    MatB_V_13_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    MatB_V_13_ce0 : OUT STD_LOGIC;
    MatB_V_13_we0 : OUT STD_LOGIC;
    MatB_V_13_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    MatB_V_14_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    MatB_V_14_ce0 : OUT STD_LOGIC;
    MatB_V_14_we0 : OUT STD_LOGIC;
    MatB_V_14_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    MatB_V_15_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    MatB_V_15_ce0 : OUT STD_LOGIC;
    MatB_V_15_we0 : OUT STD_LOGIC;
    MatB_V_15_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    MatB_V_16_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    MatB_V_16_ce0 : OUT STD_LOGIC;
    MatB_V_16_we0 : OUT STD_LOGIC;
    MatB_V_16_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    MatB_V_17_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    MatB_V_17_ce0 : OUT STD_LOGIC;
    MatB_V_17_we0 : OUT STD_LOGIC;
    MatB_V_17_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    MatB_V_18_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    MatB_V_18_ce0 : OUT STD_LOGIC;
    MatB_V_18_we0 : OUT STD_LOGIC;
    MatB_V_18_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    MatB_V_19_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    MatB_V_19_ce0 : OUT STD_LOGIC;
    MatB_V_19_we0 : OUT STD_LOGIC;
    MatB_V_19_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    MatB_DRAM : IN STD_LOGIC_VECTOR (63 downto 0);
    zext_ln61 : IN STD_LOGIC_VECTOR (4 downto 0) );
end;


architecture behav of complex_matmul_complex_matmul_Pipeline_MAT_B_ROWS_MAT_B_COLS is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7530 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000111010100110000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1D : STD_LOGIC_VECTOR (4 downto 0) := "11101";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1B : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_const_lv5_1A : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv5_16 : STD_LOGIC_VECTOR (4 downto 0) := "10110";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv15_7530 : STD_LOGIC_VECTOR (14 downto 0) := "111010100110000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_C8 : STD_LOGIC_VECTOR (7 downto 0) := "11001000";
    constant ap_const_lv17_19A : STD_LOGIC_VECTOR (16 downto 0) := "00000000110011010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv8_14 : STD_LOGIC_VECTOR (7 downto 0) := "00010100";
    constant ap_const_lv11_C8 : STD_LOGIC_VECTOR (10 downto 0) := "00011001000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mem_blk_n_AR : STD_LOGIC;
    signal mem_blk_n_R : STD_LOGIC;
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln61_cast_fu_486_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln61_cast_reg_661 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal select_ln61_fu_523_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln61_reg_669 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state8_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln61_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln61_reg_669_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln61_reg_669_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln61_1_fu_531_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln61_1_reg_674 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_626_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln64_reg_690 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal add_ln64_reg_690_pp0_iter5_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln64_reg_690_pp0_iter6_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln64_reg_690_pp0_iter7_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln64_reg_690_pp0_iter8_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln64_reg_690_pp0_iter9_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln64_reg_690_pp0_iter10_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln64_reg_690_pp0_iter11_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln64_reg_690_pp0_iter12_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal mem_addr_read_reg_695 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln61_fu_591_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln61_reg_700 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln64_fu_599_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln64_reg_704 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state8 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal zext_ln64_1_fu_603_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln64_1_cast_fu_460_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_158 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln63_fu_539_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_162 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten37_fu_166 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln61_1_fu_499_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln63_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln61_fu_511_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln61_fu_563_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln61_fu_563_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln61_fu_563_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_fu_569_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_583_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_583_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal lshr_ln64_fu_595_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_626_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_626_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_626_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_583_ce : STD_LOGIC;
    signal grp_fu_626_ce : STD_LOGIC;
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_626_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_626_p20 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln61_fu_563_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component complex_matmul_mul_8ns_10ns_17_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component complex_matmul_urem_8ns_6ns_5_12_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component complex_matmul_mac_muladd_4ns_8ns_8ns_11_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;



begin
    mul_8ns_10ns_17_1_1_U58 : component complex_matmul_mul_8ns_10ns_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        dout_WIDTH => 17)
    port map (
        din0 => mul_ln61_fu_563_p0,
        din1 => mul_ln61_fu_563_p1,
        dout => mul_ln61_fu_563_p2);

    urem_8ns_6ns_5_12_1_U59 : component complex_matmul_urem_8ns_6ns_5_12_1
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 8,
        din1_WIDTH => 6,
        dout_WIDTH => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln61_1_reg_674,
        din1 => grp_fu_583_p1,
        ce => grp_fu_583_ce,
        dout => grp_fu_583_p2);

    mac_muladd_4ns_8ns_8ns_11_4_1_U60 : component complex_matmul_mac_muladd_4ns_8ns_8ns_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 4,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_626_p0,
        din1 => grp_fu_626_p1,
        din2 => grp_fu_626_p2,
        ce => grp_fu_626_ce,
        dout => grp_fu_626_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state8);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_mem_ARREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_162 <= ap_const_lv8_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln61_fu_493_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_fu_162 <= select_ln61_1_fu_531_p3;
            end if; 
        end if;
    end process;

    indvar_flatten37_fu_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_mem_ARREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten37_fu_166 <= ap_const_lv15_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln61_fu_493_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten37_fu_166 <= add_ln61_1_fu_499_p2;
            end if; 
        end if;
    end process;

    j_fu_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_mem_ARREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_fu_158 <= ap_const_lv8_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln61_fu_493_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_fu_158 <= add_ln63_fu_539_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln64_reg_690 <= grp_fu_626_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln64_reg_690_pp0_iter10_reg <= add_ln64_reg_690_pp0_iter9_reg;
                add_ln64_reg_690_pp0_iter11_reg <= add_ln64_reg_690_pp0_iter10_reg;
                add_ln64_reg_690_pp0_iter12_reg <= add_ln64_reg_690_pp0_iter11_reg;
                add_ln64_reg_690_pp0_iter5_reg <= add_ln64_reg_690;
                add_ln64_reg_690_pp0_iter6_reg <= add_ln64_reg_690_pp0_iter5_reg;
                add_ln64_reg_690_pp0_iter7_reg <= add_ln64_reg_690_pp0_iter6_reg;
                add_ln64_reg_690_pp0_iter8_reg <= add_ln64_reg_690_pp0_iter7_reg;
                add_ln64_reg_690_pp0_iter9_reg <= add_ln64_reg_690_pp0_iter8_reg;
                mem_addr_read_reg_695 <= m_axi_mem_RDATA;
                select_ln61_reg_669_pp0_iter2_reg <= select_ln61_reg_669_pp0_iter1_reg;
                trunc_ln61_reg_700 <= trunc_ln61_fu_591_p1;
                trunc_ln64_reg_704 <= trunc_ln64_fu_599_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln61_fu_493_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln61_1_reg_674 <= select_ln61_1_fu_531_p3;
                select_ln61_reg_669 <= select_ln61_fu_523_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln61_reg_669_pp0_iter1_reg <= select_ln61_reg_669;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                    zext_ln61_cast_reg_661(4 downto 0) <= zext_ln61_cast_fu_486_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln61_cast_reg_661(31 downto 5) <= "000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_mem_ARREADY, icmp_ln61_fu_493_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((m_axi_mem_ARREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln61_fu_493_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln61_fu_493_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    MatB_V_10_address0 <= zext_ln64_1_fu_603_p1(11 - 1 downto 0);

    MatB_V_10_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatB_V_10_ce0 <= ap_const_logic_1;
        else 
            MatB_V_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MatB_V_10_d0 <= trunc_ln64_reg_704;

    MatB_V_10_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln61_reg_700, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (trunc_ln61_reg_700 = ap_const_lv5_A) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatB_V_10_we0 <= ap_const_logic_1;
        else 
            MatB_V_10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    MatB_V_11_address0 <= zext_ln64_1_fu_603_p1(11 - 1 downto 0);

    MatB_V_11_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatB_V_11_ce0 <= ap_const_logic_1;
        else 
            MatB_V_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MatB_V_11_d0 <= trunc_ln64_reg_704;

    MatB_V_11_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln61_reg_700, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (trunc_ln61_reg_700 = ap_const_lv5_B) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatB_V_11_we0 <= ap_const_logic_1;
        else 
            MatB_V_11_we0 <= ap_const_logic_0;
        end if; 
    end process;

    MatB_V_12_address0 <= zext_ln64_1_fu_603_p1(11 - 1 downto 0);

    MatB_V_12_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatB_V_12_ce0 <= ap_const_logic_1;
        else 
            MatB_V_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MatB_V_12_d0 <= trunc_ln64_reg_704;

    MatB_V_12_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln61_reg_700, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (trunc_ln61_reg_700 = ap_const_lv5_C) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatB_V_12_we0 <= ap_const_logic_1;
        else 
            MatB_V_12_we0 <= ap_const_logic_0;
        end if; 
    end process;

    MatB_V_13_address0 <= zext_ln64_1_fu_603_p1(11 - 1 downto 0);

    MatB_V_13_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatB_V_13_ce0 <= ap_const_logic_1;
        else 
            MatB_V_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MatB_V_13_d0 <= trunc_ln64_reg_704;

    MatB_V_13_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln61_reg_700, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (trunc_ln61_reg_700 = ap_const_lv5_D) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatB_V_13_we0 <= ap_const_logic_1;
        else 
            MatB_V_13_we0 <= ap_const_logic_0;
        end if; 
    end process;

    MatB_V_14_address0 <= zext_ln64_1_fu_603_p1(11 - 1 downto 0);

    MatB_V_14_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatB_V_14_ce0 <= ap_const_logic_1;
        else 
            MatB_V_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MatB_V_14_d0 <= trunc_ln64_reg_704;

    MatB_V_14_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln61_reg_700, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (trunc_ln61_reg_700 = ap_const_lv5_E) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatB_V_14_we0 <= ap_const_logic_1;
        else 
            MatB_V_14_we0 <= ap_const_logic_0;
        end if; 
    end process;

    MatB_V_15_address0 <= zext_ln64_1_fu_603_p1(11 - 1 downto 0);

    MatB_V_15_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatB_V_15_ce0 <= ap_const_logic_1;
        else 
            MatB_V_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MatB_V_15_d0 <= trunc_ln64_reg_704;

    MatB_V_15_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln61_reg_700, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (trunc_ln61_reg_700 = ap_const_lv5_F) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatB_V_15_we0 <= ap_const_logic_1;
        else 
            MatB_V_15_we0 <= ap_const_logic_0;
        end if; 
    end process;

    MatB_V_16_address0 <= zext_ln64_1_fu_603_p1(11 - 1 downto 0);

    MatB_V_16_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatB_V_16_ce0 <= ap_const_logic_1;
        else 
            MatB_V_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MatB_V_16_d0 <= trunc_ln64_reg_704;

    MatB_V_16_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln61_reg_700, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (trunc_ln61_reg_700 = ap_const_lv5_10) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatB_V_16_we0 <= ap_const_logic_1;
        else 
            MatB_V_16_we0 <= ap_const_logic_0;
        end if; 
    end process;

    MatB_V_17_address0 <= zext_ln64_1_fu_603_p1(11 - 1 downto 0);

    MatB_V_17_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatB_V_17_ce0 <= ap_const_logic_1;
        else 
            MatB_V_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MatB_V_17_d0 <= trunc_ln64_reg_704;

    MatB_V_17_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln61_reg_700, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (trunc_ln61_reg_700 = ap_const_lv5_11) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatB_V_17_we0 <= ap_const_logic_1;
        else 
            MatB_V_17_we0 <= ap_const_logic_0;
        end if; 
    end process;

    MatB_V_18_address0 <= zext_ln64_1_fu_603_p1(11 - 1 downto 0);

    MatB_V_18_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatB_V_18_ce0 <= ap_const_logic_1;
        else 
            MatB_V_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MatB_V_18_d0 <= trunc_ln64_reg_704;

    MatB_V_18_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln61_reg_700, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (trunc_ln61_reg_700 = ap_const_lv5_12) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatB_V_18_we0 <= ap_const_logic_1;
        else 
            MatB_V_18_we0 <= ap_const_logic_0;
        end if; 
    end process;

    MatB_V_19_address0 <= zext_ln64_1_fu_603_p1(11 - 1 downto 0);

    MatB_V_19_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatB_V_19_ce0 <= ap_const_logic_1;
        else 
            MatB_V_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MatB_V_19_d0 <= trunc_ln64_reg_704;

    MatB_V_19_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln61_reg_700, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and ((trunc_ln61_reg_700 = ap_const_lv5_13) or ((trunc_ln61_reg_700 = ap_const_lv5_14) or ((trunc_ln61_reg_700 = ap_const_lv5_15) or ((trunc_ln61_reg_700 = ap_const_lv5_16) or ((trunc_ln61_reg_700 = ap_const_lv5_17) or ((trunc_ln61_reg_700 = ap_const_lv5_18) or ((trunc_ln61_reg_700 = ap_const_lv5_19) or ((trunc_ln61_reg_700 = ap_const_lv5_1A) or ((trunc_ln61_reg_700 = ap_const_lv5_1B) or ((trunc_ln61_reg_700 = ap_const_lv5_1C) or ((trunc_ln61_reg_700 = ap_const_lv5_1D) or ((trunc_ln61_reg_700 = ap_const_lv5_1E) or (trunc_ln61_reg_700 = ap_const_lv5_1F))))))))))))))) then 
            MatB_V_19_we0 <= ap_const_logic_1;
        else 
            MatB_V_19_we0 <= ap_const_logic_0;
        end if; 
    end process;

    MatB_V_1_address0 <= zext_ln64_1_fu_603_p1(11 - 1 downto 0);

    MatB_V_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatB_V_1_ce0 <= ap_const_logic_1;
        else 
            MatB_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MatB_V_1_d0 <= trunc_ln64_reg_704;

    MatB_V_1_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln61_reg_700, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (trunc_ln61_reg_700 = ap_const_lv5_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatB_V_1_we0 <= ap_const_logic_1;
        else 
            MatB_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    MatB_V_2_address0 <= zext_ln64_1_fu_603_p1(11 - 1 downto 0);

    MatB_V_2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatB_V_2_ce0 <= ap_const_logic_1;
        else 
            MatB_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MatB_V_2_d0 <= trunc_ln64_reg_704;

    MatB_V_2_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln61_reg_700, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (trunc_ln61_reg_700 = ap_const_lv5_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatB_V_2_we0 <= ap_const_logic_1;
        else 
            MatB_V_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    MatB_V_3_address0 <= zext_ln64_1_fu_603_p1(11 - 1 downto 0);

    MatB_V_3_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatB_V_3_ce0 <= ap_const_logic_1;
        else 
            MatB_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MatB_V_3_d0 <= trunc_ln64_reg_704;

    MatB_V_3_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln61_reg_700, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (trunc_ln61_reg_700 = ap_const_lv5_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatB_V_3_we0 <= ap_const_logic_1;
        else 
            MatB_V_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    MatB_V_4_address0 <= zext_ln64_1_fu_603_p1(11 - 1 downto 0);

    MatB_V_4_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatB_V_4_ce0 <= ap_const_logic_1;
        else 
            MatB_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MatB_V_4_d0 <= trunc_ln64_reg_704;

    MatB_V_4_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln61_reg_700, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (trunc_ln61_reg_700 = ap_const_lv5_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatB_V_4_we0 <= ap_const_logic_1;
        else 
            MatB_V_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    MatB_V_5_address0 <= zext_ln64_1_fu_603_p1(11 - 1 downto 0);

    MatB_V_5_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatB_V_5_ce0 <= ap_const_logic_1;
        else 
            MatB_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MatB_V_5_d0 <= trunc_ln64_reg_704;

    MatB_V_5_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln61_reg_700, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (trunc_ln61_reg_700 = ap_const_lv5_5) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatB_V_5_we0 <= ap_const_logic_1;
        else 
            MatB_V_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    MatB_V_6_address0 <= zext_ln64_1_fu_603_p1(11 - 1 downto 0);

    MatB_V_6_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatB_V_6_ce0 <= ap_const_logic_1;
        else 
            MatB_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MatB_V_6_d0 <= trunc_ln64_reg_704;

    MatB_V_6_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln61_reg_700, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (trunc_ln61_reg_700 = ap_const_lv5_6) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatB_V_6_we0 <= ap_const_logic_1;
        else 
            MatB_V_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    MatB_V_7_address0 <= zext_ln64_1_fu_603_p1(11 - 1 downto 0);

    MatB_V_7_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatB_V_7_ce0 <= ap_const_logic_1;
        else 
            MatB_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MatB_V_7_d0 <= trunc_ln64_reg_704;

    MatB_V_7_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln61_reg_700, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (trunc_ln61_reg_700 = ap_const_lv5_7) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatB_V_7_we0 <= ap_const_logic_1;
        else 
            MatB_V_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    MatB_V_8_address0 <= zext_ln64_1_fu_603_p1(11 - 1 downto 0);

    MatB_V_8_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatB_V_8_ce0 <= ap_const_logic_1;
        else 
            MatB_V_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MatB_V_8_d0 <= trunc_ln64_reg_704;

    MatB_V_8_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln61_reg_700, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (trunc_ln61_reg_700 = ap_const_lv5_8) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatB_V_8_we0 <= ap_const_logic_1;
        else 
            MatB_V_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    MatB_V_9_address0 <= zext_ln64_1_fu_603_p1(11 - 1 downto 0);

    MatB_V_9_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatB_V_9_ce0 <= ap_const_logic_1;
        else 
            MatB_V_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MatB_V_9_d0 <= trunc_ln64_reg_704;

    MatB_V_9_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln61_reg_700, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (trunc_ln61_reg_700 = ap_const_lv5_9) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatB_V_9_we0 <= ap_const_logic_1;
        else 
            MatB_V_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    MatB_V_address0 <= zext_ln64_1_fu_603_p1(11 - 1 downto 0);

    MatB_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatB_V_ce0 <= ap_const_logic_1;
        else 
            MatB_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MatB_V_d0 <= trunc_ln64_reg_704;

    MatB_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln61_reg_700, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (trunc_ln61_reg_700 = ap_const_lv5_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatB_V_we0 <= ap_const_logic_1;
        else 
            MatB_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln61_1_fu_499_p2 <= std_logic_vector(unsigned(indvar_flatten37_fu_166) + unsigned(ap_const_lv15_1));
    add_ln61_fu_511_p2 <= std_logic_vector(unsigned(i_fu_162) + unsigned(ap_const_lv8_1));
    add_ln63_fu_539_p2 <= std_logic_vector(unsigned(select_ln61_fu_523_p3) + unsigned(ap_const_lv8_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state22 <= ap_CS_fsm(8);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, m_axi_mem_ARREADY)
    begin
        if (((m_axi_mem_ARREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_mem_RVALID, ap_enable_reg_pp0_iter11)
    begin
                ap_block_pp0_stage0_11001 <= ((m_axi_mem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_mem_RVALID, ap_enable_reg_pp0_iter11)
    begin
                ap_block_pp0_stage0_subdone <= ((m_axi_mem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state19_pp0_stage0_iter11_assign_proc : process(m_axi_mem_RVALID)
    begin
                ap_block_state19_pp0_stage0_iter11 <= (m_axi_mem_RVALID = ap_const_logic_0);
    end process;

        ap_block_state20_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state8_assign_proc : process(icmp_ln61_fu_493_p2)
    begin
        if ((icmp_ln61_fu_493_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_583_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_583_ce <= ap_const_logic_1;
        else 
            grp_fu_583_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_583_p1 <= ap_const_lv8_14(6 - 1 downto 0);

    grp_fu_626_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_626_ce <= ap_const_logic_1;
        else 
            grp_fu_626_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_626_p0 <= grp_fu_626_p00(4 - 1 downto 0);
    grp_fu_626_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_569_p4),11));
    grp_fu_626_p1 <= ap_const_lv11_C8(8 - 1 downto 0);
    grp_fu_626_p2 <= grp_fu_626_p20(8 - 1 downto 0);
    grp_fu_626_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln61_reg_669_pp0_iter2_reg),11));
    icmp_ln61_fu_493_p2 <= "1" when (indvar_flatten37_fu_166 = ap_const_lv15_7530) else "0";
    icmp_ln63_fu_517_p2 <= "1" when (j_fu_158 = ap_const_lv8_C8) else "0";
    lshr_ln64_fu_595_p2 <= std_logic_vector(shift_right(unsigned(mem_addr_read_reg_695),to_integer(unsigned('0' & zext_ln61_cast_reg_661(31-1 downto 0)))));
    m_axi_mem_ARADDR <= sext_ln64_1_cast_fu_460_p1;
    m_axi_mem_ARBURST <= ap_const_lv2_0;
    m_axi_mem_ARCACHE <= ap_const_lv4_0;
    m_axi_mem_ARID <= ap_const_lv1_0;
    m_axi_mem_ARLEN <= ap_const_lv32_7530;
    m_axi_mem_ARLOCK <= ap_const_lv2_0;
    m_axi_mem_ARPROT <= ap_const_lv3_0;
    m_axi_mem_ARQOS <= ap_const_lv4_0;
    m_axi_mem_ARREGION <= ap_const_lv4_0;
    m_axi_mem_ARSIZE <= ap_const_lv3_0;
    m_axi_mem_ARUSER <= ap_const_lv1_0;

    m_axi_mem_ARVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_mem_ARREADY)
    begin
        if ((not(((m_axi_mem_ARREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_mem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_mem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_mem_AWADDR <= ap_const_lv64_0;
    m_axi_mem_AWBURST <= ap_const_lv2_0;
    m_axi_mem_AWCACHE <= ap_const_lv4_0;
    m_axi_mem_AWID <= ap_const_lv1_0;
    m_axi_mem_AWLEN <= ap_const_lv32_0;
    m_axi_mem_AWLOCK <= ap_const_lv2_0;
    m_axi_mem_AWPROT <= ap_const_lv3_0;
    m_axi_mem_AWQOS <= ap_const_lv4_0;
    m_axi_mem_AWREGION <= ap_const_lv4_0;
    m_axi_mem_AWSIZE <= ap_const_lv3_0;
    m_axi_mem_AWUSER <= ap_const_lv1_0;
    m_axi_mem_AWVALID <= ap_const_logic_0;
    m_axi_mem_BREADY <= ap_const_logic_0;

    m_axi_mem_RREADY_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            m_axi_mem_RREADY <= ap_const_logic_1;
        else 
            m_axi_mem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_mem_WDATA <= ap_const_lv32_0;
    m_axi_mem_WID <= ap_const_lv1_0;
    m_axi_mem_WLAST <= ap_const_logic_0;
    m_axi_mem_WSTRB <= ap_const_lv4_0;
    m_axi_mem_WUSER <= ap_const_lv1_0;
    m_axi_mem_WVALID <= ap_const_logic_0;

    mem_blk_n_AR_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_mem_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            mem_blk_n_AR <= m_axi_mem_ARREADY;
        else 
            mem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_R_assign_proc : process(m_axi_mem_RVALID, ap_enable_reg_pp0_iter11, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            mem_blk_n_R <= m_axi_mem_RVALID;
        else 
            mem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    mul_ln61_fu_563_p0 <= mul_ln61_fu_563_p00(8 - 1 downto 0);
    mul_ln61_fu_563_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln61_1_reg_674),17));
    mul_ln61_fu_563_p1 <= ap_const_lv17_19A(10 - 1 downto 0);
    select_ln61_1_fu_531_p3 <= 
        add_ln61_fu_511_p2 when (icmp_ln63_fu_517_p2(0) = '1') else 
        i_fu_162;
    select_ln61_fu_523_p3 <= 
        ap_const_lv8_0 when (icmp_ln63_fu_517_p2(0) = '1') else 
        j_fu_158;
        sext_ln64_1_cast_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln64_1),64));

    tmp_fu_569_p4 <= mul_ln61_fu_563_p2(16 downto 13);
    trunc_ln61_fu_591_p1 <= grp_fu_583_p2(5 - 1 downto 0);
    trunc_ln64_fu_599_p1 <= lshr_ln64_fu_595_p2(16 - 1 downto 0);
    zext_ln61_cast_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln61),32));
    zext_ln64_1_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln64_reg_690_pp0_iter12_reg),64));
end behav;
