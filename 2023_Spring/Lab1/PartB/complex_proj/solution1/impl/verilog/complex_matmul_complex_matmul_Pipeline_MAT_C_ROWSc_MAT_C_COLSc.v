// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module complex_matmul_complex_matmul_Pipeline_MAT_C_ROWSc_MAT_C_COLSc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_mem_AWVALID,
        m_axi_mem_AWREADY,
        m_axi_mem_AWADDR,
        m_axi_mem_AWID,
        m_axi_mem_AWLEN,
        m_axi_mem_AWSIZE,
        m_axi_mem_AWBURST,
        m_axi_mem_AWLOCK,
        m_axi_mem_AWCACHE,
        m_axi_mem_AWPROT,
        m_axi_mem_AWQOS,
        m_axi_mem_AWREGION,
        m_axi_mem_AWUSER,
        m_axi_mem_WVALID,
        m_axi_mem_WREADY,
        m_axi_mem_WDATA,
        m_axi_mem_WSTRB,
        m_axi_mem_WLAST,
        m_axi_mem_WID,
        m_axi_mem_WUSER,
        m_axi_mem_ARVALID,
        m_axi_mem_ARREADY,
        m_axi_mem_ARADDR,
        m_axi_mem_ARID,
        m_axi_mem_ARLEN,
        m_axi_mem_ARSIZE,
        m_axi_mem_ARBURST,
        m_axi_mem_ARLOCK,
        m_axi_mem_ARCACHE,
        m_axi_mem_ARPROT,
        m_axi_mem_ARQOS,
        m_axi_mem_ARREGION,
        m_axi_mem_ARUSER,
        m_axi_mem_RVALID,
        m_axi_mem_RREADY,
        m_axi_mem_RDATA,
        m_axi_mem_RLAST,
        m_axi_mem_RID,
        m_axi_mem_RFIFONUM,
        m_axi_mem_RUSER,
        m_axi_mem_RRESP,
        m_axi_mem_BVALID,
        m_axi_mem_BREADY,
        m_axi_mem_BRESP,
        m_axi_mem_BID,
        m_axi_mem_BUSER,
        MatC_DRAM,
        cMatC_V_address0,
        cMatC_V_ce0,
        cMatC_V_q0,
        cMatC_V_1_address0,
        cMatC_V_1_ce0,
        cMatC_V_1_q0,
        cMatC_V_2_address0,
        cMatC_V_2_ce0,
        cMatC_V_2_q0,
        cMatC_V_3_address0,
        cMatC_V_3_ce0,
        cMatC_V_3_q0,
        cMatC_V_4_address0,
        cMatC_V_4_ce0,
        cMatC_V_4_q0,
        cMatC_V_5_address0,
        cMatC_V_5_ce0,
        cMatC_V_5_q0,
        cMatC_V_6_address0,
        cMatC_V_6_ce0,
        cMatC_V_6_q0,
        cMatC_V_7_address0,
        cMatC_V_7_ce0,
        cMatC_V_7_q0,
        cMatC_V_8_address0,
        cMatC_V_8_ce0,
        cMatC_V_8_q0,
        cMatC_V_9_address0,
        cMatC_V_9_ce0,
        cMatC_V_9_q0,
        cMatC_V_10_address0,
        cMatC_V_10_ce0,
        cMatC_V_10_q0,
        cMatC_V_11_address0,
        cMatC_V_11_ce0,
        cMatC_V_11_q0,
        cMatC_V_12_address0,
        cMatC_V_12_ce0,
        cMatC_V_12_q0,
        cMatC_V_13_address0,
        cMatC_V_13_ce0,
        cMatC_V_13_q0,
        cMatC_V_14_address0,
        cMatC_V_14_ce0,
        cMatC_V_14_q0,
        cMatC_V_15_address0,
        cMatC_V_15_ce0,
        cMatC_V_15_q0,
        cMatC_V_16_address0,
        cMatC_V_16_ce0,
        cMatC_V_16_q0,
        cMatC_V_17_address0,
        cMatC_V_17_ce0,
        cMatC_V_17_q0,
        cMatC_V_18_address0,
        cMatC_V_18_ce0,
        cMatC_V_18_q0,
        cMatC_V_19_address0,
        cMatC_V_19_ce0,
        cMatC_V_19_q0,
        zext_ln122,
        shl_ln125
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_mem_AWVALID;
input   m_axi_mem_AWREADY;
output  [63:0] m_axi_mem_AWADDR;
output  [0:0] m_axi_mem_AWID;
output  [31:0] m_axi_mem_AWLEN;
output  [2:0] m_axi_mem_AWSIZE;
output  [1:0] m_axi_mem_AWBURST;
output  [1:0] m_axi_mem_AWLOCK;
output  [3:0] m_axi_mem_AWCACHE;
output  [2:0] m_axi_mem_AWPROT;
output  [3:0] m_axi_mem_AWQOS;
output  [3:0] m_axi_mem_AWREGION;
output  [0:0] m_axi_mem_AWUSER;
output   m_axi_mem_WVALID;
input   m_axi_mem_WREADY;
output  [31:0] m_axi_mem_WDATA;
output  [3:0] m_axi_mem_WSTRB;
output   m_axi_mem_WLAST;
output  [0:0] m_axi_mem_WID;
output  [0:0] m_axi_mem_WUSER;
output   m_axi_mem_ARVALID;
input   m_axi_mem_ARREADY;
output  [63:0] m_axi_mem_ARADDR;
output  [0:0] m_axi_mem_ARID;
output  [31:0] m_axi_mem_ARLEN;
output  [2:0] m_axi_mem_ARSIZE;
output  [1:0] m_axi_mem_ARBURST;
output  [1:0] m_axi_mem_ARLOCK;
output  [3:0] m_axi_mem_ARCACHE;
output  [2:0] m_axi_mem_ARPROT;
output  [3:0] m_axi_mem_ARQOS;
output  [3:0] m_axi_mem_ARREGION;
output  [0:0] m_axi_mem_ARUSER;
input   m_axi_mem_RVALID;
output   m_axi_mem_RREADY;
input  [31:0] m_axi_mem_RDATA;
input   m_axi_mem_RLAST;
input  [0:0] m_axi_mem_RID;
input  [8:0] m_axi_mem_RFIFONUM;
input  [0:0] m_axi_mem_RUSER;
input  [1:0] m_axi_mem_RRESP;
input   m_axi_mem_BVALID;
output   m_axi_mem_BREADY;
input  [1:0] m_axi_mem_BRESP;
input  [0:0] m_axi_mem_BID;
input  [0:0] m_axi_mem_BUSER;
input  [63:0] MatC_DRAM;
output  [9:0] cMatC_V_address0;
output   cMatC_V_ce0;
input  [15:0] cMatC_V_q0;
output  [9:0] cMatC_V_1_address0;
output   cMatC_V_1_ce0;
input  [15:0] cMatC_V_1_q0;
output  [9:0] cMatC_V_2_address0;
output   cMatC_V_2_ce0;
input  [15:0] cMatC_V_2_q0;
output  [9:0] cMatC_V_3_address0;
output   cMatC_V_3_ce0;
input  [15:0] cMatC_V_3_q0;
output  [9:0] cMatC_V_4_address0;
output   cMatC_V_4_ce0;
input  [15:0] cMatC_V_4_q0;
output  [9:0] cMatC_V_5_address0;
output   cMatC_V_5_ce0;
input  [15:0] cMatC_V_5_q0;
output  [9:0] cMatC_V_6_address0;
output   cMatC_V_6_ce0;
input  [15:0] cMatC_V_6_q0;
output  [9:0] cMatC_V_7_address0;
output   cMatC_V_7_ce0;
input  [15:0] cMatC_V_7_q0;
output  [9:0] cMatC_V_8_address0;
output   cMatC_V_8_ce0;
input  [15:0] cMatC_V_8_q0;
output  [9:0] cMatC_V_9_address0;
output   cMatC_V_9_ce0;
input  [15:0] cMatC_V_9_q0;
output  [9:0] cMatC_V_10_address0;
output   cMatC_V_10_ce0;
input  [15:0] cMatC_V_10_q0;
output  [9:0] cMatC_V_11_address0;
output   cMatC_V_11_ce0;
input  [15:0] cMatC_V_11_q0;
output  [9:0] cMatC_V_12_address0;
output   cMatC_V_12_ce0;
input  [15:0] cMatC_V_12_q0;
output  [9:0] cMatC_V_13_address0;
output   cMatC_V_13_ce0;
input  [15:0] cMatC_V_13_q0;
output  [9:0] cMatC_V_14_address0;
output   cMatC_V_14_ce0;
input  [15:0] cMatC_V_14_q0;
output  [9:0] cMatC_V_15_address0;
output   cMatC_V_15_ce0;
input  [15:0] cMatC_V_15_q0;
output  [9:0] cMatC_V_16_address0;
output   cMatC_V_16_ce0;
input  [15:0] cMatC_V_16_q0;
output  [9:0] cMatC_V_17_address0;
output   cMatC_V_17_ce0;
input  [15:0] cMatC_V_17_q0;
output  [9:0] cMatC_V_18_address0;
output   cMatC_V_18_ce0;
input  [15:0] cMatC_V_18_q0;
output  [9:0] cMatC_V_19_address0;
output   cMatC_V_19_ce0;
input  [15:0] cMatC_V_19_q0;
input  [4:0] zext_ln122;
input  [3:0] shl_ln125;

reg ap_idle;
reg m_axi_mem_AWVALID;
reg m_axi_mem_WVALID;
reg m_axi_mem_BREADY;
reg cMatC_V_ce0;
reg cMatC_V_1_ce0;
reg cMatC_V_2_ce0;
reg cMatC_V_3_ce0;
reg cMatC_V_4_ce0;
reg cMatC_V_5_ce0;
reg cMatC_V_6_ce0;
reg cMatC_V_7_ce0;
reg cMatC_V_8_ce0;
reg cMatC_V_9_ce0;
reg cMatC_V_10_ce0;
reg cMatC_V_11_ce0;
reg cMatC_V_12_ce0;
reg cMatC_V_13_ce0;
reg cMatC_V_14_ce0;
reg cMatC_V_15_ce0;
reg cMatC_V_16_ce0;
reg cMatC_V_17_ce0;
reg cMatC_V_18_ce0;
reg cMatC_V_19_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
reg    ap_block_state18_pp0_stage0_iter17;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln122_fu_467_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    mem_blk_n_AW;
wire    ap_block_pp0_stage0;
reg    mem_blk_n_W;
reg    mem_blk_n_B;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] zext_ln122_cast_fu_445_p1;
reg   [31:0] zext_ln122_cast_reg_743;
wire   [7:0] select_ln122_fu_497_p3;
reg   [7:0] select_ln122_reg_752;
reg   [7:0] select_ln122_reg_752_pp0_iter1_reg;
reg   [7:0] select_ln122_reg_752_pp0_iter2_reg;
reg   [7:0] select_ln122_reg_752_pp0_iter3_reg;
reg   [7:0] select_ln122_reg_752_pp0_iter4_reg;
reg   [7:0] select_ln122_reg_752_pp0_iter5_reg;
reg   [7:0] select_ln122_reg_752_pp0_iter6_reg;
reg   [7:0] select_ln122_reg_752_pp0_iter7_reg;
reg   [7:0] select_ln122_reg_752_pp0_iter8_reg;
reg   [7:0] select_ln122_reg_752_pp0_iter9_reg;
wire   [6:0] select_ln122_1_fu_505_p3;
reg   [6:0] select_ln122_1_reg_758;
reg   [6:0] select_ln122_1_reg_758_pp0_iter1_reg;
reg   [6:0] select_ln122_1_reg_758_pp0_iter2_reg;
reg   [6:0] select_ln122_1_reg_758_pp0_iter3_reg;
reg   [6:0] select_ln122_1_reg_758_pp0_iter4_reg;
reg   [6:0] select_ln122_1_reg_758_pp0_iter5_reg;
wire   [16:0] grp_fu_706_p2;
reg   [16:0] mul_ln122_1_reg_780;
wire   [15:0] tmp_s_fu_623_p22;
reg   [15:0] tmp_s_reg_885;
reg   [63:0] mem_addr_reg_890;
wire   [31:0] shl_ln125_1_fu_692_p2;
reg   [31:0] shl_ln125_1_reg_896;
wire   [63:0] zext_ln125_3_fu_569_p1;
wire  signed [63:0] sext_ln125_fu_679_p1;
reg    ap_block_pp0_stage0_01001;
reg   [7:0] j_fu_140;
wire   [7:0] add_ln124_fu_519_p2;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_j_load;
reg   [6:0] i_fu_144;
reg   [6:0] ap_sig_allocacmp_i_load;
reg   [14:0] indvar_flatten320_fu_148;
wire   [14:0] add_ln122_2_fu_473_p2;
reg   [14:0] ap_sig_allocacmp_indvar_flatten320_load;
wire   [0:0] icmp_ln124_fu_491_p2;
wire   [6:0] add_ln122_fu_485_p2;
wire   [6:0] grp_fu_513_p0;
wire   [5:0] grp_fu_513_p1;
wire   [6:0] mul_ln122_fu_543_p0;
wire   [8:0] mul_ln122_fu_543_p1;
wire   [14:0] mul_ln122_fu_543_p2;
wire   [2:0] tmp_fu_549_p4;
wire   [9:0] grp_fu_697_p3;
wire   [63:0] zext_ln122_4_fu_592_p1;
wire   [9:0] shl_ln125_3_fu_600_p3;
wire   [9:0] or_ln125_fu_607_p2;
wire   [63:0] zext_ln125_1_fu_613_p1;
wire   [63:0] add_ln122_1_fu_595_p2;
wire   [6:0] grp_fu_513_p2;
wire   [63:0] add_ln125_1_fu_617_p2;
wire   [61:0] trunc_ln8_fu_669_p4;
wire   [31:0] zext_ln125_2_fu_689_p1;
wire   [2:0] grp_fu_697_p0;
wire   [7:0] grp_fu_697_p1;
wire   [7:0] grp_fu_697_p2;
wire   [6:0] grp_fu_706_p0;
wire   [9:0] grp_fu_706_p1;
reg    grp_fu_513_ce;
reg    grp_fu_697_ce;
reg    grp_fu_706_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [9:0] grp_fu_697_p00;
wire   [9:0] grp_fu_697_p20;
wire   [16:0] grp_fu_706_p00;
wire   [14:0] mul_ln122_fu_543_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_done_reg = 1'b0;
end

complex_matmul_urem_7ns_6ns_7_11_1 #(
    .ID( 1 ),
    .NUM_STAGE( 11 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 7 ))
urem_7ns_6ns_7_11_1_U413(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_513_p0),
    .din1(grp_fu_513_p1),
    .ce(grp_fu_513_ce),
    .dout(grp_fu_513_p2)
);

complex_matmul_mul_7ns_9ns_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 15 ))
mul_7ns_9ns_15_1_1_U414(
    .din0(mul_ln122_fu_543_p0),
    .din1(mul_ln122_fu_543_p1),
    .dout(mul_ln122_fu_543_p2)
);

complex_matmul_mux_207_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 16 ),
    .din17_WIDTH( 16 ),
    .din18_WIDTH( 16 ),
    .din19_WIDTH( 16 ),
    .din20_WIDTH( 7 ),
    .dout_WIDTH( 16 ))
mux_207_16_1_1_U415(
    .din0(cMatC_V_q0),
    .din1(cMatC_V_1_q0),
    .din2(cMatC_V_2_q0),
    .din3(cMatC_V_3_q0),
    .din4(cMatC_V_4_q0),
    .din5(cMatC_V_5_q0),
    .din6(cMatC_V_6_q0),
    .din7(cMatC_V_7_q0),
    .din8(cMatC_V_8_q0),
    .din9(cMatC_V_9_q0),
    .din10(cMatC_V_10_q0),
    .din11(cMatC_V_11_q0),
    .din12(cMatC_V_12_q0),
    .din13(cMatC_V_13_q0),
    .din14(cMatC_V_14_q0),
    .din15(cMatC_V_15_q0),
    .din16(cMatC_V_16_q0),
    .din17(cMatC_V_17_q0),
    .din18(cMatC_V_18_q0),
    .din19(cMatC_V_19_q0),
    .din20(grp_fu_513_p2),
    .dout(tmp_s_fu_623_p22)
);

complex_matmul_mac_muladd_3ns_8ns_8ns_10_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 10 ))
mac_muladd_3ns_8ns_8ns_10_4_1_U416(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_697_p0),
    .din1(grp_fu_697_p1),
    .din2(grp_fu_697_p2),
    .ce(grp_fu_697_ce),
    .dout(grp_fu_697_p3)
);

complex_matmul_mul_mul_7ns_10ns_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 17 ))
mul_mul_7ns_10ns_17_4_1_U417(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_706_p0),
    .din1(grp_fu_706_p1),
    .ce(grp_fu_706_ce),
    .dout(grp_fu_706_p2)
);

complex_matmul_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter16_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln122_fu_467_p2 == 1'd0))) begin
            i_fu_144 <= select_ln122_1_fu_505_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_144 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln122_fu_467_p2 == 1'd0))) begin
            indvar_flatten320_fu_148 <= add_ln122_2_fu_473_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten320_fu_148 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln122_fu_467_p2 == 1'd0))) begin
            j_fu_140 <= add_ln124_fu_519_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_140 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        mem_addr_reg_890 <= sext_ln125_fu_679_p1;
        mul_ln122_1_reg_780 <= grp_fu_706_p2;
        select_ln122_1_reg_758_pp0_iter2_reg <= select_ln122_1_reg_758_pp0_iter1_reg;
        select_ln122_1_reg_758_pp0_iter3_reg <= select_ln122_1_reg_758_pp0_iter2_reg;
        select_ln122_1_reg_758_pp0_iter4_reg <= select_ln122_1_reg_758_pp0_iter3_reg;
        select_ln122_1_reg_758_pp0_iter5_reg <= select_ln122_1_reg_758_pp0_iter4_reg;
        select_ln122_reg_752_pp0_iter2_reg <= select_ln122_reg_752_pp0_iter1_reg;
        select_ln122_reg_752_pp0_iter3_reg <= select_ln122_reg_752_pp0_iter2_reg;
        select_ln122_reg_752_pp0_iter4_reg <= select_ln122_reg_752_pp0_iter3_reg;
        select_ln122_reg_752_pp0_iter5_reg <= select_ln122_reg_752_pp0_iter4_reg;
        select_ln122_reg_752_pp0_iter6_reg <= select_ln122_reg_752_pp0_iter5_reg;
        select_ln122_reg_752_pp0_iter7_reg <= select_ln122_reg_752_pp0_iter6_reg;
        select_ln122_reg_752_pp0_iter8_reg <= select_ln122_reg_752_pp0_iter7_reg;
        select_ln122_reg_752_pp0_iter9_reg <= select_ln122_reg_752_pp0_iter8_reg;
        shl_ln125_1_reg_896 <= shl_ln125_1_fu_692_p2;
        tmp_s_reg_885 <= tmp_s_fu_623_p22;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        select_ln122_1_reg_758_pp0_iter1_reg <= select_ln122_1_reg_758;
        select_ln122_reg_752_pp0_iter1_reg <= select_ln122_reg_752;
        zext_ln122_cast_reg_743[4 : 0] <= zext_ln122_cast_fu_445_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln122_fu_467_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln122_1_reg_758 <= select_ln122_1_fu_505_p3;
        select_ln122_reg_752 <= select_ln122_fu_497_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln122_fu_467_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter16_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 7'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_144;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten320_load = 15'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten320_load = indvar_flatten320_fu_148;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 8'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_140;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatC_V_10_ce0 = 1'b1;
    end else begin
        cMatC_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatC_V_11_ce0 = 1'b1;
    end else begin
        cMatC_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatC_V_12_ce0 = 1'b1;
    end else begin
        cMatC_V_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatC_V_13_ce0 = 1'b1;
    end else begin
        cMatC_V_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatC_V_14_ce0 = 1'b1;
    end else begin
        cMatC_V_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatC_V_15_ce0 = 1'b1;
    end else begin
        cMatC_V_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatC_V_16_ce0 = 1'b1;
    end else begin
        cMatC_V_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatC_V_17_ce0 = 1'b1;
    end else begin
        cMatC_V_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatC_V_18_ce0 = 1'b1;
    end else begin
        cMatC_V_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatC_V_19_ce0 = 1'b1;
    end else begin
        cMatC_V_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatC_V_1_ce0 = 1'b1;
    end else begin
        cMatC_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatC_V_2_ce0 = 1'b1;
    end else begin
        cMatC_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatC_V_3_ce0 = 1'b1;
    end else begin
        cMatC_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatC_V_4_ce0 = 1'b1;
    end else begin
        cMatC_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatC_V_5_ce0 = 1'b1;
    end else begin
        cMatC_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatC_V_6_ce0 = 1'b1;
    end else begin
        cMatC_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatC_V_7_ce0 = 1'b1;
    end else begin
        cMatC_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatC_V_8_ce0 = 1'b1;
    end else begin
        cMatC_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatC_V_9_ce0 = 1'b1;
    end else begin
        cMatC_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        cMatC_V_ce0 = 1'b1;
    end else begin
        cMatC_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_513_ce = 1'b1;
    end else begin
        grp_fu_513_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_697_ce = 1'b1;
    end else begin
        grp_fu_697_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_706_ce = 1'b1;
    end else begin
        grp_fu_706_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_mem_AWVALID = 1'b1;
    end else begin
        m_axi_mem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter17 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_mem_BREADY = 1'b1;
    end else begin
        m_axi_mem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_mem_WVALID = 1'b1;
    end else begin
        m_axi_mem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        mem_blk_n_AW = m_axi_mem_AWREADY;
    end else begin
        mem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter17 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        mem_blk_n_B = m_axi_mem_BVALID;
    end else begin
        mem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        mem_blk_n_W = m_axi_mem_WREADY;
    end else begin
        mem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln122_1_fu_595_p2 = (zext_ln122_4_fu_592_p1 + MatC_DRAM);

assign add_ln122_2_fu_473_p2 = (ap_sig_allocacmp_indvar_flatten320_load + 15'd1);

assign add_ln122_fu_485_p2 = (ap_sig_allocacmp_i_load + 7'd1);

assign add_ln124_fu_519_p2 = (select_ln122_fu_497_p3 + 8'd1);

assign add_ln125_1_fu_617_p2 = (zext_ln125_1_fu_613_p1 + add_ln122_1_fu_595_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter17 == 1'b1) & (m_axi_mem_BVALID == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter17 == 1'b1) & (m_axi_mem_BVALID == 1'b0)) | ((ap_enable_reg_pp0_iter12 == 1'b1) & (m_axi_mem_WREADY == 1'b0)) | ((m_axi_mem_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter17 == 1'b1) & (m_axi_mem_BVALID == 1'b0)) | ((ap_enable_reg_pp0_iter12 == 1'b1) & (m_axi_mem_WREADY == 1'b0)) | ((m_axi_mem_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b1)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state18_pp0_stage0_iter17 = (m_axi_mem_BVALID == 1'b0);
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign cMatC_V_10_address0 = zext_ln125_3_fu_569_p1;

assign cMatC_V_11_address0 = zext_ln125_3_fu_569_p1;

assign cMatC_V_12_address0 = zext_ln125_3_fu_569_p1;

assign cMatC_V_13_address0 = zext_ln125_3_fu_569_p1;

assign cMatC_V_14_address0 = zext_ln125_3_fu_569_p1;

assign cMatC_V_15_address0 = zext_ln125_3_fu_569_p1;

assign cMatC_V_16_address0 = zext_ln125_3_fu_569_p1;

assign cMatC_V_17_address0 = zext_ln125_3_fu_569_p1;

assign cMatC_V_18_address0 = zext_ln125_3_fu_569_p1;

assign cMatC_V_19_address0 = zext_ln125_3_fu_569_p1;

assign cMatC_V_1_address0 = zext_ln125_3_fu_569_p1;

assign cMatC_V_2_address0 = zext_ln125_3_fu_569_p1;

assign cMatC_V_3_address0 = zext_ln125_3_fu_569_p1;

assign cMatC_V_4_address0 = zext_ln125_3_fu_569_p1;

assign cMatC_V_5_address0 = zext_ln125_3_fu_569_p1;

assign cMatC_V_6_address0 = zext_ln125_3_fu_569_p1;

assign cMatC_V_7_address0 = zext_ln125_3_fu_569_p1;

assign cMatC_V_8_address0 = zext_ln125_3_fu_569_p1;

assign cMatC_V_9_address0 = zext_ln125_3_fu_569_p1;

assign cMatC_V_address0 = zext_ln125_3_fu_569_p1;

assign grp_fu_513_p0 = ((icmp_ln124_fu_491_p2[0:0] == 1'b1) ? add_ln122_fu_485_p2 : ap_sig_allocacmp_i_load);

assign grp_fu_513_p1 = 7'd20;

assign grp_fu_697_p0 = grp_fu_697_p00;

assign grp_fu_697_p00 = tmp_fu_549_p4;

assign grp_fu_697_p1 = 10'd200;

assign grp_fu_697_p2 = grp_fu_697_p20;

assign grp_fu_697_p20 = select_ln122_reg_752_pp0_iter7_reg;

assign grp_fu_706_p0 = grp_fu_706_p00;

assign grp_fu_706_p00 = select_ln122_1_reg_758_pp0_iter5_reg;

assign grp_fu_706_p1 = 17'd800;

assign icmp_ln122_fu_467_p2 = ((ap_sig_allocacmp_indvar_flatten320_load == 15'd20000) ? 1'b1 : 1'b0);

assign icmp_ln124_fu_491_p2 = ((ap_sig_allocacmp_j_load == 8'd200) ? 1'b1 : 1'b0);

assign m_axi_mem_ARADDR = 64'd0;

assign m_axi_mem_ARBURST = 2'd0;

assign m_axi_mem_ARCACHE = 4'd0;

assign m_axi_mem_ARID = 1'd0;

assign m_axi_mem_ARLEN = 32'd0;

assign m_axi_mem_ARLOCK = 2'd0;

assign m_axi_mem_ARPROT = 3'd0;

assign m_axi_mem_ARQOS = 4'd0;

assign m_axi_mem_ARREGION = 4'd0;

assign m_axi_mem_ARSIZE = 3'd0;

assign m_axi_mem_ARUSER = 1'd0;

assign m_axi_mem_ARVALID = 1'b0;

assign m_axi_mem_AWADDR = mem_addr_reg_890;

assign m_axi_mem_AWBURST = 2'd0;

assign m_axi_mem_AWCACHE = 4'd0;

assign m_axi_mem_AWID = 1'd0;

assign m_axi_mem_AWLEN = 32'd1;

assign m_axi_mem_AWLOCK = 2'd0;

assign m_axi_mem_AWPROT = 3'd0;

assign m_axi_mem_AWQOS = 4'd0;

assign m_axi_mem_AWREGION = 4'd0;

assign m_axi_mem_AWSIZE = 3'd0;

assign m_axi_mem_AWUSER = 1'd0;

assign m_axi_mem_RREADY = 1'b0;

assign m_axi_mem_WDATA = shl_ln125_1_reg_896;

assign m_axi_mem_WID = 1'd0;

assign m_axi_mem_WLAST = 1'b0;

assign m_axi_mem_WSTRB = shl_ln125;

assign m_axi_mem_WUSER = 1'd0;

assign mul_ln122_fu_543_p0 = mul_ln122_fu_543_p00;

assign mul_ln122_fu_543_p00 = select_ln122_1_reg_758_pp0_iter5_reg;

assign mul_ln122_fu_543_p1 = 15'd205;

assign or_ln125_fu_607_p2 = (shl_ln125_3_fu_600_p3 | 10'd2);

assign select_ln122_1_fu_505_p3 = ((icmp_ln124_fu_491_p2[0:0] == 1'b1) ? add_ln122_fu_485_p2 : ap_sig_allocacmp_i_load);

assign select_ln122_fu_497_p3 = ((icmp_ln124_fu_491_p2[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_j_load);

assign sext_ln125_fu_679_p1 = $signed(trunc_ln8_fu_669_p4);

assign shl_ln125_1_fu_692_p2 = zext_ln125_2_fu_689_p1 << zext_ln122_cast_reg_743;

assign shl_ln125_3_fu_600_p3 = {{select_ln122_reg_752_pp0_iter9_reg}, {2'd0}};

assign tmp_fu_549_p4 = {{mul_ln122_fu_543_p2[14:12]}};

assign trunc_ln8_fu_669_p4 = {{add_ln125_1_fu_617_p2[63:2]}};

assign zext_ln122_4_fu_592_p1 = mul_ln122_1_reg_780;

assign zext_ln122_cast_fu_445_p1 = zext_ln122;

assign zext_ln125_1_fu_613_p1 = or_ln125_fu_607_p2;

assign zext_ln125_2_fu_689_p1 = tmp_s_reg_885;

assign zext_ln125_3_fu_569_p1 = grp_fu_697_p3;

always @ (posedge ap_clk) begin
    zext_ln122_cast_reg_743[31:5] <= 27'b000000000000000000000000000;
end

endmodule //complex_matmul_complex_matmul_Pipeline_MAT_C_ROWSc_MAT_C_COLSc
