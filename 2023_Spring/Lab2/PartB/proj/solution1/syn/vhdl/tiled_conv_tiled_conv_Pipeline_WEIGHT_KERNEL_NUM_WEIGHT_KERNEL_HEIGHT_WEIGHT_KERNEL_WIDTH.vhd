-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tiled_conv_tiled_conv_Pipeline_WEIGHT_KERNEL_NUM_WEIGHT_KERNEL_HEIGHT_WEIGHT_KERNEL_WIDTH is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_wt_AWVALID : OUT STD_LOGIC;
    m_axi_wt_AWREADY : IN STD_LOGIC;
    m_axi_wt_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_wt_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wt_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_wt_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_wt_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wt_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wt_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wt_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_wt_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wt_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wt_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wt_WVALID : OUT STD_LOGIC;
    m_axi_wt_WREADY : IN STD_LOGIC;
    m_axi_wt_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_wt_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wt_WLAST : OUT STD_LOGIC;
    m_axi_wt_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wt_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wt_ARVALID : OUT STD_LOGIC;
    m_axi_wt_ARREADY : IN STD_LOGIC;
    m_axi_wt_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_wt_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wt_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_wt_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_wt_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wt_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wt_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wt_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_wt_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wt_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wt_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wt_RVALID : IN STD_LOGIC;
    m_axi_wt_RREADY : OUT STD_LOGIC;
    m_axi_wt_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_wt_RLAST : IN STD_LOGIC;
    m_axi_wt_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wt_RFIFONUM : IN STD_LOGIC_VECTOR (9 downto 0);
    m_axi_wt_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wt_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wt_BVALID : IN STD_LOGIC;
    m_axi_wt_BREADY : OUT STD_LOGIC;
    m_axi_wt_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wt_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wt_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln76 : IN STD_LOGIC_VECTOR (62 downto 0);
    conv_wt_buf_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv_wt_buf_V_ce0 : OUT STD_LOGIC;
    conv_wt_buf_V_we0 : OUT STD_LOGIC;
    conv_wt_buf_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of tiled_conv_tiled_conv_Pipeline_WEIGHT_KERNEL_NUM_WEIGHT_KERNEL_HEIGHT_WEIGHT_KERNEL_WIDTH is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_24C : STD_LOGIC_VECTOR (9 downto 0) := "1001001100";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv8_93 : STD_LOGIC_VECTOR (7 downto 0) := "10010011";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal icmp_ln76_reg_565 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_565_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln76_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal wt_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln79_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_reg_569 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln76_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln76_reg_577 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_reg_582 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln76_1_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln76_1_reg_587 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln79_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln79_reg_593 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln87_fu_362_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln87_reg_598 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln82_fu_400_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln82_reg_604 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln82_reg_604_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln82_1_fu_408_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln82_1_reg_609 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln87_fu_477_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln87_reg_614 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln87_1_fu_481_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln87_1_reg_619 : STD_LOGIC_VECTOR (6 downto 0);
    signal wt_addr_read_reg_624 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_condition_exit_pp0_iter2_stage0 : STD_LOGIC;
    signal zext_ln87_5_fu_506_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal kw_fu_84 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln85_fu_416_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal kh_fu_88 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten49_fu_92 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln82_2_fu_232_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_indvar_flatten49_load : STD_LOGIC_VECTOR (5 downto 0);
    signal c_fu_96 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln79_1_fu_351_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten63_fu_100 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln79_2_fu_246_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_indvar_flatten63_load : STD_LOGIC_VECTOR (7 downto 0);
    signal f_fu_104 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln76_1_fu_294_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten87_fu_108 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln76_1_fu_184_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten87_load : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln82_1_fu_226_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln79_1_fu_240_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln76_fu_281_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_305_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln87_1_fu_313_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln87_fu_301_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln87_fu_317_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln85_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln76_fu_287_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln79_fu_338_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln79_fu_323_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln87_2_fu_358_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln79_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln76_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln79_1_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln79_fu_344_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln79_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln82_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln82_1_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln82_fu_384_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_451_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln87_1_fu_458_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal sext_ln87_fu_448_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal sub_ln87_1_fu_462_p2 : STD_LOGIC_VECTOR (60 downto 0);
    signal zext_ln87_3_fu_468_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal add_ln87_1_fu_471_p2 : STD_LOGIC_VECTOR (60 downto 0);
    signal p_shl_fu_485_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln87_2_fu_492_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln87_4_fu_497_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln87_2_fu_500_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component tiled_conv_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component tiled_conv_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    c_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    c_fu_96 <= ap_const_lv2_0;
                elsif (((icmp_ln76_reg_565 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    c_fu_96 <= select_ln79_1_fu_351_p3;
                end if;
            end if; 
        end if;
    end process;

    f_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    f_fu_104 <= ap_const_lv3_0;
                elsif (((icmp_ln76_reg_565 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    f_fu_104 <= select_ln76_1_fu_294_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten49_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln76_fu_178_p2 = ap_const_lv1_0))) then 
                    indvar_flatten49_fu_92 <= select_ln82_2_fu_232_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten49_fu_92 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten63_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln76_fu_178_p2 = ap_const_lv1_0))) then 
                    indvar_flatten63_fu_100 <= select_ln79_2_fu_246_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten63_fu_100 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten87_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln76_fu_178_p2 = ap_const_lv1_0))) then 
                    indvar_flatten87_fu_108 <= add_ln76_1_fu_184_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten87_fu_108 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    kh_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    kh_fu_88 <= ap_const_lv3_0;
                elsif (((icmp_ln76_reg_565 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    kh_fu_88 <= select_ln82_1_fu_408_p3;
                end if;
            end if; 
        end if;
    end process;

    kw_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    kw_fu_84 <= ap_const_lv3_0;
                elsif (((icmp_ln76_reg_565 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    kw_fu_84 <= add_ln85_fu_416_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln76_reg_565 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln87_reg_598 <= add_ln87_fu_362_p2;
                select_ln82_1_reg_609 <= select_ln82_1_fu_408_p3;
                select_ln82_reg_604 <= select_ln82_fu_400_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln76_fu_178_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln76_1_reg_587 <= and_ln76_1_fu_214_p2;
                icmp_ln79_reg_569 <= icmp_ln79_fu_196_p2;
                icmp_ln82_reg_582 <= icmp_ln82_fu_208_p2;
                or_ln79_reg_593 <= or_ln79_fu_220_p2;
                xor_ln76_reg_577 <= xor_ln76_fu_202_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln76_reg_565 <= icmp_ln76_fu_178_p2;
                icmp_ln76_reg_565_pp0_iter1_reg <= icmp_ln76_reg_565;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                select_ln82_reg_604_pp0_iter2_reg <= select_ln82_reg_604;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln76_reg_565_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                trunc_ln87_1_reg_619 <= trunc_ln87_1_fu_481_p1;
                trunc_ln87_reg_614 <= trunc_ln87_fu_477_p1;
                wt_addr_read_reg_624 <= m_axi_wt_RDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln76_1_fu_184_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten87_load) + unsigned(ap_const_lv10_1));
    add_ln76_fu_281_p2 <= std_logic_vector(unsigned(f_fu_104) + unsigned(ap_const_lv3_1));
    add_ln79_1_fu_240_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten63_load) + unsigned(ap_const_lv8_1));
    add_ln79_fu_338_p2 <= std_logic_vector(unsigned(select_ln76_fu_287_p3) + unsigned(ap_const_lv2_1));
    add_ln82_1_fu_226_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten49_load) + unsigned(ap_const_lv6_1));
    add_ln82_fu_384_p2 <= std_logic_vector(unsigned(select_ln79_fu_344_p3) + unsigned(ap_const_lv3_1));
    add_ln85_fu_416_p2 <= std_logic_vector(unsigned(select_ln82_fu_400_p3) + unsigned(ap_const_lv3_1));
    add_ln87_1_fu_471_p2 <= std_logic_vector(unsigned(sub_ln87_1_fu_462_p2) + unsigned(zext_ln87_3_fu_468_p1));
    add_ln87_2_fu_500_p2 <= std_logic_vector(unsigned(sub_ln87_2_fu_492_p2) + unsigned(zext_ln87_4_fu_497_p1));
    add_ln87_fu_362_p2 <= std_logic_vector(signed(sext_ln79_fu_323_p1) + signed(zext_ln87_2_fu_358_p1));
    and_ln76_1_fu_214_p2 <= (xor_ln76_fu_202_p2 and icmp_ln82_fu_208_p2);
    and_ln76_fu_333_p2 <= (xor_ln76_reg_577 and icmp_ln85_fu_327_p2);
    and_ln79_fu_378_p2 <= (or_ln79_1_fu_373_p2 and and_ln76_fu_333_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_wt_RVALID, icmp_ln76_reg_565_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln76_reg_565_pp0_iter1_reg = ap_const_lv1_0) and (m_axi_wt_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_wt_RVALID, icmp_ln76_reg_565_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln76_reg_565_pp0_iter1_reg = ap_const_lv1_0) and (m_axi_wt_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter2_assign_proc : process(m_axi_wt_RVALID, icmp_ln76_reg_565_pp0_iter1_reg)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((icmp_ln76_reg_565_pp0_iter1_reg = ap_const_lv1_0) and (m_axi_wt_RVALID = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln76_fu_178_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln76_fu_178_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage0_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln76_reg_565_pp0_iter1_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln76_reg_565_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten49_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten49_fu_92)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten49_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_indvar_flatten49_load <= indvar_flatten49_fu_92;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten63_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten63_fu_100)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten63_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_indvar_flatten63_load <= indvar_flatten63_fu_100;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten87_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten87_fu_108)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten87_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten87_load <= indvar_flatten87_fu_108;
        end if; 
    end process;

    conv_wt_buf_V_address0 <= zext_ln87_5_fu_506_p1(10 - 1 downto 0);

    conv_wt_buf_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_wt_buf_V_ce0 <= ap_const_logic_1;
        else 
            conv_wt_buf_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_wt_buf_V_d0 <= wt_addr_read_reg_624;

    conv_wt_buf_V_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_wt_buf_V_we0 <= ap_const_logic_1;
        else 
            conv_wt_buf_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln76_fu_178_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten87_load = ap_const_lv10_24C) else "0";
    icmp_ln79_fu_196_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten63_load = ap_const_lv8_93) else "0";
    icmp_ln82_fu_208_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten49_load = ap_const_lv6_31) else "0";
    icmp_ln85_fu_327_p2 <= "1" when (kw_fu_84 = ap_const_lv3_7) else "0";
    m_axi_wt_ARADDR <= ap_const_lv64_0;
    m_axi_wt_ARBURST <= ap_const_lv2_0;
    m_axi_wt_ARCACHE <= ap_const_lv4_0;
    m_axi_wt_ARID <= ap_const_lv1_0;
    m_axi_wt_ARLEN <= ap_const_lv32_0;
    m_axi_wt_ARLOCK <= ap_const_lv2_0;
    m_axi_wt_ARPROT <= ap_const_lv3_0;
    m_axi_wt_ARQOS <= ap_const_lv4_0;
    m_axi_wt_ARREGION <= ap_const_lv4_0;
    m_axi_wt_ARSIZE <= ap_const_lv3_0;
    m_axi_wt_ARUSER <= ap_const_lv1_0;
    m_axi_wt_ARVALID <= ap_const_logic_0;
    m_axi_wt_AWADDR <= ap_const_lv64_0;
    m_axi_wt_AWBURST <= ap_const_lv2_0;
    m_axi_wt_AWCACHE <= ap_const_lv4_0;
    m_axi_wt_AWID <= ap_const_lv1_0;
    m_axi_wt_AWLEN <= ap_const_lv32_0;
    m_axi_wt_AWLOCK <= ap_const_lv2_0;
    m_axi_wt_AWPROT <= ap_const_lv3_0;
    m_axi_wt_AWQOS <= ap_const_lv4_0;
    m_axi_wt_AWREGION <= ap_const_lv4_0;
    m_axi_wt_AWSIZE <= ap_const_lv3_0;
    m_axi_wt_AWUSER <= ap_const_lv1_0;
    m_axi_wt_AWVALID <= ap_const_logic_0;
    m_axi_wt_BREADY <= ap_const_logic_0;

    m_axi_wt_RREADY_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln76_reg_565_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln76_reg_565_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_wt_RREADY <= ap_const_logic_1;
        else 
            m_axi_wt_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_wt_WDATA <= ap_const_lv16_0;
    m_axi_wt_WID <= ap_const_lv1_0;
    m_axi_wt_WLAST <= ap_const_logic_0;
    m_axi_wt_WSTRB <= ap_const_lv2_0;
    m_axi_wt_WUSER <= ap_const_lv1_0;
    m_axi_wt_WVALID <= ap_const_logic_0;
    or_ln79_1_fu_373_p2 <= (xor_ln79_fu_368_p2 or icmp_ln79_reg_569);
    or_ln79_fu_220_p2 <= (icmp_ln79_fu_196_p2 or and_ln76_1_fu_214_p2);
    or_ln82_1_fu_395_p2 <= (or_ln82_fu_390_p2 or icmp_ln79_reg_569);
    or_ln82_fu_390_p2 <= (and_ln79_fu_378_p2 or and_ln76_1_reg_587);
    p_shl_fu_485_p3 <= (trunc_ln87_1_reg_619 & ap_const_lv3_0);
    select_ln76_1_fu_294_p3 <= 
        add_ln76_fu_281_p2 when (icmp_ln79_reg_569(0) = '1') else 
        f_fu_104;
    select_ln76_fu_287_p3 <= 
        ap_const_lv2_0 when (icmp_ln79_reg_569(0) = '1') else 
        c_fu_96;
    select_ln79_1_fu_351_p3 <= 
        add_ln79_fu_338_p2 when (and_ln76_1_reg_587(0) = '1') else 
        select_ln76_fu_287_p3;
    select_ln79_2_fu_246_p3 <= 
        ap_const_lv8_1 when (icmp_ln79_fu_196_p2(0) = '1') else 
        add_ln79_1_fu_240_p2;
    select_ln79_fu_344_p3 <= 
        ap_const_lv3_0 when (or_ln79_reg_593(0) = '1') else 
        kh_fu_88;
    select_ln82_1_fu_408_p3 <= 
        add_ln82_fu_384_p2 when (and_ln79_fu_378_p2(0) = '1') else 
        select_ln79_fu_344_p3;
    select_ln82_2_fu_232_p3 <= 
        ap_const_lv6_1 when (or_ln79_fu_220_p2(0) = '1') else 
        add_ln82_1_fu_226_p2;
    select_ln82_fu_400_p3 <= 
        ap_const_lv3_0 when (or_ln82_1_fu_395_p2(0) = '1') else 
        kw_fu_84;
        sext_ln79_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln87_fu_317_p2),7));

        sext_ln87_1_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_451_p3),61));

        sext_ln87_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln87_reg_598),61));

    sub_ln87_1_fu_462_p2 <= std_logic_vector(signed(sext_ln87_1_fu_458_p1) - signed(sext_ln87_fu_448_p1));
    sub_ln87_2_fu_492_p2 <= std_logic_vector(unsigned(p_shl_fu_485_p3) - unsigned(trunc_ln87_reg_614));
    sub_ln87_fu_317_p2 <= std_logic_vector(unsigned(zext_ln87_1_fu_313_p1) - unsigned(zext_ln87_fu_301_p1));
    tmp_fu_451_p3 <= (add_ln87_reg_598 & ap_const_lv3_0);
    tmp_s_fu_305_p3 <= (select_ln76_1_fu_294_p3 & ap_const_lv2_0);
    trunc_ln87_1_fu_481_p1 <= add_ln87_1_fu_471_p2(7 - 1 downto 0);
    trunc_ln87_fu_477_p1 <= add_ln87_1_fu_471_p2(10 - 1 downto 0);

    wt_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_wt_RVALID, icmp_ln76_reg_565_pp0_iter1_reg, ap_block_pp0_stage0)
    begin
        if (((icmp_ln76_reg_565_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            wt_blk_n_R <= m_axi_wt_RVALID;
        else 
            wt_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    xor_ln76_fu_202_p2 <= (icmp_ln79_fu_196_p2 xor ap_const_lv1_1);
    xor_ln79_fu_368_p2 <= (icmp_ln82_reg_582 xor ap_const_lv1_1);
    zext_ln87_1_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_305_p3),6));
    zext_ln87_2_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln79_1_fu_351_p3),7));
    zext_ln87_3_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln82_1_reg_609),61));
    zext_ln87_4_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln82_reg_604_pp0_iter2_reg),10));
    zext_ln87_5_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln87_2_fu_500_p2),64));
    zext_ln87_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln76_1_fu_294_p3),6));
end behav;
