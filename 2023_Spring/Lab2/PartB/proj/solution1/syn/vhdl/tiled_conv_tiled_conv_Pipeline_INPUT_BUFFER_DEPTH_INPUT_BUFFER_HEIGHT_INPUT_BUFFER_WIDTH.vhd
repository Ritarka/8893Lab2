-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tiled_conv_tiled_conv_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEIGHT_INPUT_BUFFER_WIDTH is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_fm_AWVALID : OUT STD_LOGIC;
    m_axi_fm_AWREADY : IN STD_LOGIC;
    m_axi_fm_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_fm_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fm_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fm_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fm_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_WVALID : OUT STD_LOGIC;
    m_axi_fm_WREADY : IN STD_LOGIC;
    m_axi_fm_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_fm_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_WLAST : OUT STD_LOGIC;
    m_axi_fm_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_ARVALID : OUT STD_LOGIC;
    m_axi_fm_ARREADY : IN STD_LOGIC;
    m_axi_fm_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_fm_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fm_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fm_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fm_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_RVALID : IN STD_LOGIC;
    m_axi_fm_RREADY : OUT STD_LOGIC;
    m_axi_fm_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_fm_RLAST : IN STD_LOGIC;
    m_axi_fm_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_RFIFONUM : IN STD_LOGIC_VECTOR (9 downto 0);
    m_axi_fm_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_BVALID : IN STD_LOGIC;
    m_axi_fm_BREADY : OUT STD_LOGIC;
    m_axi_fm_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    p_mid2258 : IN STD_LOGIC_VECTOR (10 downto 0);
    input_feature_map : IN STD_LOGIC_VECTOR (63 downto 0);
    p_mid130 : IN STD_LOGIC_VECTOR (0 downto 0);
    conv_in_buf_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    conv_in_buf_V_ce0 : OUT STD_LOGIC;
    conv_in_buf_V_we0 : OUT STD_LOGIC;
    conv_in_buf_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    select_ln24_3 : IN STD_LOGIC_VECTOR (10 downto 0) );
end;


architecture behav of tiled_conv_tiled_conv_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEIGHT_INPUT_BUFFER_WIDTH is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv13_1C08 : STD_LOGIC_VECTOR (12 downto 0) := "1110000001000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv12_958 : STD_LOGIC_VECTOR (11 downto 0) := "100101011000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv6_2E : STD_LOGIC_VECTOR (5 downto 0) := "101110";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv7_7D : STD_LOGIC_VECTOR (6 downto 0) := "1111101";
    constant ap_const_lv11_2DF : STD_LOGIC_VECTOR (10 downto 0) := "01011011111";
    constant ap_const_lv23_1CC000 : STD_LOGIC_VECTOR (22 downto 0) := "00111001100000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv12_4FF : STD_LOGIC_VECTOR (11 downto 0) := "010011111111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_34 : STD_LOGIC_VECTOR (7 downto 0) := "00110100";
    constant ap_const_lv13_2E : STD_LOGIC_VECTOR (12 downto 0) := "0000000101110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal icmp_ln33_reg_635 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_635_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln50_reg_691 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln50_reg_691_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op97_readreq_state5 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal icmp_ln33_reg_635_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln50_reg_691_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op114_read_state12 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln33_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal fm_blk_n_AR : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal fm_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln24_3_cast_fu_195_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln24_3_cast_reg_630 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln33_reg_635_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_635_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_635_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_635_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_635_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_635_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_635_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_635_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_635_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_639 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_639_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_reg_649 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln33_1_fu_297_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln33_1_reg_654 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln33_1_reg_654_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln33_1_reg_654_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln33_1_reg_654_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln33_1_reg_654_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln33_1_reg_654_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln33_1_reg_654_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln33_1_reg_654_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln33_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_reg_660 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln36_fu_321_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln36_reg_666 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln36_fu_332_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln36_reg_671 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln36_reg_671_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln36_reg_671_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln36_reg_671_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln36_reg_671_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln36_reg_671_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln36_reg_671_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln36_reg_671_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln36_reg_671_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln36_reg_671_pp0_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln36_1_fu_340_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln36_1_reg_676 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln36_1_reg_676_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln36_1_reg_676_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln36_1_reg_676_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln36_1_reg_676_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln36_1_reg_676_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln36_1_reg_676_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln36_1_reg_676_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln50_1_fu_352_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln50_1_reg_681 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln33_fu_396_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln33_reg_686 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln50_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln50_reg_691_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln50_reg_691_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln50_reg_691_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln50_reg_691_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln50_reg_691_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln50_reg_691_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln50_reg_691_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln53_1_fu_504_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln53_1_reg_695 : STD_LOGIC_VECTOR (22 downto 0);
    signal fm_addr_reg_700 : STD_LOGIC_VECTOR (63 downto 0);
    signal fm_addr_read_reg_711 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_condition_exit_pp0_iter2_stage0 : STD_LOGIC;
    signal ap_phi_mux_storemerge5_phi_fu_187_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter12_storemerge5_reg_183 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter0_storemerge5_reg_183 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_storemerge5_reg_183 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter2_storemerge5_reg_183 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter3_storemerge5_reg_183 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter4_storemerge5_reg_183 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter5_storemerge5_reg_183 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter6_storemerge5_reg_183 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter7_storemerge5_reg_183 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter8_storemerge5_reg_183 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter9_storemerge5_reg_183 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter10_storemerge5_reg_183 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter11_storemerge5_reg_183 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln51_3_fu_562_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln53_fu_537_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_114 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln39_fu_358_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_118 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten_fu_122 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln36_4_fu_257_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load_1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (11 downto 0);
    signal c_fu_126 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten42_fu_130 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln33_2_fu_233_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_allocacmp_indvar_flatten42_load : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln36_1_fu_251_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln33_fu_284_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln39_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln33_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln33_fu_290_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln36_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln48_fu_348_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln36_fu_379_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_fu_382_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln33_fu_396_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln33_fu_396_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal empty_35_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln36_2_fu_414_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_mid1_fu_417_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_mid17_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln33_2_fu_402_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln33_3_fu_408_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln36_3_fu_435_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln53_1_mid2_v_fu_442_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln39_mid2_v_fu_454_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln50_fu_466_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln50_fu_469_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln50_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln36_2_fu_428_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_486_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln36_fu_450_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln53_fu_494_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln53_fu_498_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln39_mid2_v_cast_fu_462_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln33_2_fu_510_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln53_1_fu_518_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln33_1_fu_513_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln53_2_fu_521_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1_fu_527_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal mul_ln51_fu_550_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln51_fu_550_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_566_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln51_fu_550_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_566_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_566_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_566_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_566_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_566_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_566_p30 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln33_fu_396_p00 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln51_fu_550_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component tiled_conv_mul_2ns_22ns_23_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component tiled_conv_mul_2ns_7ns_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component tiled_conv_ama_addmuladd_8ns_6ns_6ns_6ns_13_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        din3 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component tiled_conv_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_2ns_22ns_23_1_1_U1 : component tiled_conv_mul_2ns_22ns_23_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 22,
        dout_WIDTH => 23)
    port map (
        din0 => mul_ln33_fu_396_p0,
        din1 => mul_ln33_fu_396_p1,
        dout => mul_ln33_fu_396_p2);

    mul_2ns_7ns_8_1_1_U2 : component tiled_conv_mul_2ns_7ns_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 7,
        dout_WIDTH => 8)
    port map (
        din0 => mul_ln51_fu_550_p0,
        din1 => mul_ln51_fu_550_p1,
        dout => mul_ln51_fu_550_p2);

    ama_addmuladd_8ns_6ns_6ns_6ns_13_4_1_U3 : component tiled_conv_ama_addmuladd_8ns_6ns_6ns_6ns_13_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_ln51_fu_550_p2,
        din1 => grp_fu_566_p1,
        din2 => grp_fu_566_p2,
        din3 => grp_fu_566_p3,
        ce => grp_fu_566_ce,
        dout => grp_fu_566_p4);

    flow_control_loop_pipe_sequential_init_U : component tiled_conv_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter11_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter3_storemerge5_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((or_ln50_fu_480_p2 = ap_const_lv1_1) and (icmp_ln33_reg_635_pp0_iter1_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter3_storemerge5_reg_183 <= ap_const_lv16_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter3_storemerge5_reg_183 <= ap_phi_reg_pp0_iter2_storemerge5_reg_183;
                end if;
            end if; 
        end if;
    end process;

    c_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    c_fu_126 <= ap_const_lv2_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln33_reg_635 = ap_const_lv1_0))) then 
                    c_fu_126 <= select_ln33_1_fu_297_p3;
                end if;
            end if; 
        end if;
    end process;

    i_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_118 <= ap_const_lv6_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln33_reg_635 = ap_const_lv1_0))) then 
                    i_fu_118 <= select_ln36_1_fu_340_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten42_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln33_fu_227_p2 = ap_const_lv1_0))) then 
                    indvar_flatten42_fu_130 <= add_ln33_2_fu_233_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten42_fu_130 <= ap_const_lv13_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln33_fu_227_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_122 <= select_ln36_4_fu_257_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_122 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_114 <= ap_const_lv6_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln33_reg_635 = ap_const_lv1_0))) then 
                    j_fu_114 <= add_ln39_fu_358_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln33_reg_635 = ap_const_lv1_0))) then
                add_ln36_reg_666 <= add_ln36_fu_321_p2;
                add_ln50_1_reg_681 <= add_ln50_1_fu_352_p2;
                and_ln33_reg_660 <= and_ln33_fu_315_p2;
                select_ln33_1_reg_654 <= select_ln33_1_fu_297_p3;
                select_ln36_1_reg_676 <= select_ln36_1_fu_340_p3;
                select_ln36_reg_671 <= select_ln36_fu_332_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln50_fu_480_p2 = ap_const_lv1_0) and (icmp_ln33_reg_635_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    add_ln53_1_reg_695(22 downto 1) <= add_ln53_1_fu_504_p2(22 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln33_reg_635_pp0_iter10_reg <= icmp_ln33_reg_635_pp0_iter9_reg;
                icmp_ln33_reg_635_pp0_iter11_reg <= icmp_ln33_reg_635_pp0_iter10_reg;
                icmp_ln33_reg_635_pp0_iter2_reg <= icmp_ln33_reg_635_pp0_iter1_reg;
                icmp_ln33_reg_635_pp0_iter3_reg <= icmp_ln33_reg_635_pp0_iter2_reg;
                icmp_ln33_reg_635_pp0_iter4_reg <= icmp_ln33_reg_635_pp0_iter3_reg;
                icmp_ln33_reg_635_pp0_iter5_reg <= icmp_ln33_reg_635_pp0_iter4_reg;
                icmp_ln33_reg_635_pp0_iter6_reg <= icmp_ln33_reg_635_pp0_iter5_reg;
                icmp_ln33_reg_635_pp0_iter7_reg <= icmp_ln33_reg_635_pp0_iter6_reg;
                icmp_ln33_reg_635_pp0_iter8_reg <= icmp_ln33_reg_635_pp0_iter7_reg;
                icmp_ln33_reg_635_pp0_iter9_reg <= icmp_ln33_reg_635_pp0_iter8_reg;
                or_ln50_reg_691_pp0_iter10_reg <= or_ln50_reg_691_pp0_iter9_reg;
                or_ln50_reg_691_pp0_iter11_reg <= or_ln50_reg_691_pp0_iter10_reg;
                or_ln50_reg_691_pp0_iter3_reg <= or_ln50_reg_691;
                or_ln50_reg_691_pp0_iter4_reg <= or_ln50_reg_691_pp0_iter3_reg;
                or_ln50_reg_691_pp0_iter5_reg <= or_ln50_reg_691_pp0_iter4_reg;
                or_ln50_reg_691_pp0_iter6_reg <= or_ln50_reg_691_pp0_iter5_reg;
                or_ln50_reg_691_pp0_iter7_reg <= or_ln50_reg_691_pp0_iter6_reg;
                or_ln50_reg_691_pp0_iter8_reg <= or_ln50_reg_691_pp0_iter7_reg;
                or_ln50_reg_691_pp0_iter9_reg <= or_ln50_reg_691_pp0_iter8_reg;
                select_ln33_1_reg_654_pp0_iter2_reg <= select_ln33_1_reg_654;
                select_ln33_1_reg_654_pp0_iter3_reg <= select_ln33_1_reg_654_pp0_iter2_reg;
                select_ln33_1_reg_654_pp0_iter4_reg <= select_ln33_1_reg_654_pp0_iter3_reg;
                select_ln33_1_reg_654_pp0_iter5_reg <= select_ln33_1_reg_654_pp0_iter4_reg;
                select_ln33_1_reg_654_pp0_iter6_reg <= select_ln33_1_reg_654_pp0_iter5_reg;
                select_ln33_1_reg_654_pp0_iter7_reg <= select_ln33_1_reg_654_pp0_iter6_reg;
                select_ln33_1_reg_654_pp0_iter8_reg <= select_ln33_1_reg_654_pp0_iter7_reg;
                select_ln36_1_reg_676_pp0_iter2_reg <= select_ln36_1_reg_676;
                select_ln36_1_reg_676_pp0_iter3_reg <= select_ln36_1_reg_676_pp0_iter2_reg;
                select_ln36_1_reg_676_pp0_iter4_reg <= select_ln36_1_reg_676_pp0_iter3_reg;
                select_ln36_1_reg_676_pp0_iter5_reg <= select_ln36_1_reg_676_pp0_iter4_reg;
                select_ln36_1_reg_676_pp0_iter6_reg <= select_ln36_1_reg_676_pp0_iter5_reg;
                select_ln36_1_reg_676_pp0_iter7_reg <= select_ln36_1_reg_676_pp0_iter6_reg;
                select_ln36_1_reg_676_pp0_iter8_reg <= select_ln36_1_reg_676_pp0_iter7_reg;
                select_ln36_reg_671_pp0_iter10_reg <= select_ln36_reg_671_pp0_iter9_reg;
                select_ln36_reg_671_pp0_iter2_reg <= select_ln36_reg_671;
                select_ln36_reg_671_pp0_iter3_reg <= select_ln36_reg_671_pp0_iter2_reg;
                select_ln36_reg_671_pp0_iter4_reg <= select_ln36_reg_671_pp0_iter3_reg;
                select_ln36_reg_671_pp0_iter5_reg <= select_ln36_reg_671_pp0_iter4_reg;
                select_ln36_reg_671_pp0_iter6_reg <= select_ln36_reg_671_pp0_iter5_reg;
                select_ln36_reg_671_pp0_iter7_reg <= select_ln36_reg_671_pp0_iter6_reg;
                select_ln36_reg_671_pp0_iter8_reg <= select_ln36_reg_671_pp0_iter7_reg;
                select_ln36_reg_671_pp0_iter9_reg <= select_ln36_reg_671_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                i_3_reg_649 <= i_fu_118;
                icmp_ln33_reg_635 <= icmp_ln33_fu_227_p2;
                icmp_ln33_reg_635_pp0_iter1_reg <= icmp_ln33_reg_635;
                icmp_ln36_reg_639_pp0_iter1_reg <= icmp_ln36_reg_639;
                    select_ln24_3_cast_reg_630(10 downto 0) <= select_ln24_3_cast_fu_195_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter10_storemerge5_reg_183 <= ap_phi_reg_pp0_iter9_storemerge5_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter11_storemerge5_reg_183 <= ap_phi_reg_pp0_iter10_storemerge5_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter12_storemerge5_reg_183 <= ap_phi_reg_pp0_iter11_storemerge5_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter1_storemerge5_reg_183 <= ap_phi_reg_pp0_iter0_storemerge5_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter2_storemerge5_reg_183 <= ap_phi_reg_pp0_iter1_storemerge5_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter4_storemerge5_reg_183 <= ap_phi_reg_pp0_iter3_storemerge5_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter5_storemerge5_reg_183 <= ap_phi_reg_pp0_iter4_storemerge5_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter6_storemerge5_reg_183 <= ap_phi_reg_pp0_iter5_storemerge5_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter7_storemerge5_reg_183 <= ap_phi_reg_pp0_iter6_storemerge5_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter8_storemerge5_reg_183 <= ap_phi_reg_pp0_iter7_storemerge5_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter9_storemerge5_reg_183 <= ap_phi_reg_pp0_iter8_storemerge5_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op114_read_state12 = ap_const_boolean_1))) then
                fm_addr_read_reg_711 <= m_axi_fm_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_reg_635_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln50_reg_691 = ap_const_lv1_0))) then
                fm_addr_reg_700 <= sext_ln53_fu_537_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln33_fu_227_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln36_reg_639 <= icmp_ln36_fu_242_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_reg_635_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_ln33_reg_686 <= mul_ln33_fu_396_p2;
                or_ln50_reg_691 <= or_ln50_fu_480_p2;
            end if;
        end if;
    end process;
    select_ln24_3_cast_reg_630(11) <= '0';
    add_ln53_1_reg_695(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln33_1_fu_513_p2 <= std_logic_vector(unsigned(zext_ln33_2_fu_510_p1) + unsigned(input_feature_map));
    add_ln33_2_fu_233_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten42_load) + unsigned(ap_const_lv13_1));
    add_ln33_fu_284_p2 <= std_logic_vector(unsigned(c_fu_126) + unsigned(ap_const_lv2_1));
    add_ln36_1_fu_251_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv12_1));
    add_ln36_fu_321_p2 <= std_logic_vector(unsigned(select_ln33_fu_290_p3) + unsigned(ap_const_lv6_1));
    add_ln39_fu_358_p2 <= std_logic_vector(unsigned(select_ln36_fu_332_p3) + unsigned(ap_const_lv6_1));
    add_ln50_1_fu_352_p2 <= std_logic_vector(unsigned(zext_ln48_fu_348_p1) + unsigned(ap_const_lv7_7D));
    add_ln50_fu_469_p2 <= std_logic_vector(signed(sext_ln50_fu_466_p1) + signed(select_ln24_3_cast_reg_630));
    add_ln53_1_fu_504_p2 <= std_logic_vector(unsigned(add_ln53_fu_498_p2) + unsigned(sext_ln39_mid2_v_cast_fu_462_p1));
    add_ln53_2_fu_521_p2 <= std_logic_vector(signed(sext_ln53_1_fu_518_p1) + signed(add_ln33_1_fu_513_p2));
    add_ln53_fu_498_p2 <= std_logic_vector(signed(sext_ln36_fu_450_p1) + signed(zext_ln53_fu_494_p1));
    and_ln33_fu_315_p2 <= (xor_ln33_fu_304_p2 and icmp_ln39_fu_309_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter11, m_axi_fm_RVALID, ap_block_state5_io, ap_predicate_op114_read_state12)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_predicate_op114_read_state12 = ap_const_boolean_1) and (m_axi_fm_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter11, m_axi_fm_RVALID, ap_block_state5_io, ap_predicate_op114_read_state12)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_predicate_op114_read_state12 = ap_const_boolean_1) and (m_axi_fm_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_pp0_stage0_iter11_assign_proc : process(m_axi_fm_RVALID, ap_predicate_op114_read_state12)
    begin
                ap_block_state12_pp0_stage0_iter11 <= ((ap_predicate_op114_read_state12 = ap_const_boolean_1) and (m_axi_fm_RVALID = ap_const_logic_0));
    end process;

        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(m_axi_fm_ARREADY, ap_predicate_op97_readreq_state5)
    begin
                ap_block_state5_io <= ((m_axi_fm_ARREADY = ap_const_logic_0) and (ap_predicate_op97_readreq_state5 = ap_const_boolean_1));
    end process;

        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln33_fu_227_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln33_fu_227_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, icmp_ln33_reg_635_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln33_reg_635_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter11_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter11_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_storemerge5_phi_fu_187_p4_assign_proc : process(icmp_ln33_reg_635_pp0_iter11_reg, or_ln50_reg_691_pp0_iter11_reg, fm_addr_read_reg_711, ap_phi_reg_pp0_iter12_storemerge5_reg_183)
    begin
        if (((or_ln50_reg_691_pp0_iter11_reg = ap_const_lv1_0) and (icmp_ln33_reg_635_pp0_iter11_reg = ap_const_lv1_0))) then 
            ap_phi_mux_storemerge5_phi_fu_187_p4 <= fm_addr_read_reg_711;
        else 
            ap_phi_mux_storemerge5_phi_fu_187_p4 <= ap_phi_reg_pp0_iter12_storemerge5_reg_183;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_storemerge5_reg_183 <= "XXXXXXXXXXXXXXXX";

    ap_predicate_op114_read_state12_assign_proc : process(icmp_ln33_reg_635_pp0_iter10_reg, or_ln50_reg_691_pp0_iter10_reg)
    begin
                ap_predicate_op114_read_state12 <= ((or_ln50_reg_691_pp0_iter10_reg = ap_const_lv1_0) and (icmp_ln33_reg_635_pp0_iter10_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op97_readreq_state5_assign_proc : process(icmp_ln33_reg_635_pp0_iter3_reg, or_ln50_reg_691_pp0_iter3_reg)
    begin
                ap_predicate_op97_readreq_state5 <= ((or_ln50_reg_691_pp0_iter3_reg = ap_const_lv1_0) and (icmp_ln33_reg_635_pp0_iter3_reg = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten42_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten42_fu_130)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten42_load <= ap_const_lv13_0;
        else 
            ap_sig_allocacmp_indvar_flatten42_load <= indvar_flatten42_fu_130;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_122)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv12_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_122;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_122)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load_1 <= ap_const_lv12_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load_1 <= indvar_flatten_fu_122;
        end if; 
    end process;

    conv_in_buf_V_address0 <= zext_ln51_3_fu_562_p1(13 - 1 downto 0);

    conv_in_buf_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_in_buf_V_ce0 <= ap_const_logic_1;
        else 
            conv_in_buf_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_in_buf_V_d0 <= ap_phi_mux_storemerge5_phi_fu_187_p4;

    conv_in_buf_V_we0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_in_buf_V_we0 <= ap_const_logic_1;
        else 
            conv_in_buf_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_35_fu_387_p2 <= "1" when (unsigned(empty_fu_382_p2) > unsigned(ap_const_lv11_2DF)) else "0";
    empty_fu_382_p2 <= std_logic_vector(unsigned(p_mid2258) + unsigned(zext_ln36_fu_379_p1));

    fm_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter4, m_axi_fm_ARREADY, ap_predicate_op97_readreq_state5, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op97_readreq_state5 = ap_const_boolean_1))) then 
            fm_blk_n_AR <= m_axi_fm_ARREADY;
        else 
            fm_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    fm_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter11, m_axi_fm_RVALID, ap_predicate_op114_read_state12, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op114_read_state12 = ap_const_boolean_1))) then 
            fm_blk_n_R <= m_axi_fm_RVALID;
        else 
            fm_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_566_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_566_ce <= ap_const_logic_1;
        else 
            grp_fu_566_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_566_p1 <= grp_fu_566_p10(6 - 1 downto 0);
    grp_fu_566_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln36_1_reg_676_pp0_iter8_reg),8));
    grp_fu_566_p2 <= ap_const_lv13_2E(6 - 1 downto 0);
    grp_fu_566_p3 <= grp_fu_566_p30(6 - 1 downto 0);
    grp_fu_566_p30 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln36_reg_671_pp0_iter10_reg),13));
    icmp_ln33_fu_227_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten42_load = ap_const_lv13_1C08) else "0";
    icmp_ln36_fu_242_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load_1 = ap_const_lv12_958) else "0";
    icmp_ln39_fu_309_p2 <= "1" when (j_fu_114 = ap_const_lv6_2E) else "0";
    icmp_ln50_fu_474_p2 <= "1" when (unsigned(add_ln50_fu_469_p2) > unsigned(ap_const_lv12_4FF)) else "0";
    m_axi_fm_ARADDR <= fm_addr_reg_700;
    m_axi_fm_ARBURST <= ap_const_lv2_0;
    m_axi_fm_ARCACHE <= ap_const_lv4_0;
    m_axi_fm_ARID <= ap_const_lv1_0;
    m_axi_fm_ARLEN <= ap_const_lv32_1;
    m_axi_fm_ARLOCK <= ap_const_lv2_0;
    m_axi_fm_ARPROT <= ap_const_lv3_0;
    m_axi_fm_ARQOS <= ap_const_lv4_0;
    m_axi_fm_ARREGION <= ap_const_lv4_0;
    m_axi_fm_ARSIZE <= ap_const_lv3_0;
    m_axi_fm_ARUSER <= ap_const_lv1_0;

    m_axi_fm_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter4, ap_predicate_op97_readreq_state5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op97_readreq_state5 = ap_const_boolean_1))) then 
            m_axi_fm_ARVALID <= ap_const_logic_1;
        else 
            m_axi_fm_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_fm_AWADDR <= ap_const_lv64_0;
    m_axi_fm_AWBURST <= ap_const_lv2_0;
    m_axi_fm_AWCACHE <= ap_const_lv4_0;
    m_axi_fm_AWID <= ap_const_lv1_0;
    m_axi_fm_AWLEN <= ap_const_lv32_0;
    m_axi_fm_AWLOCK <= ap_const_lv2_0;
    m_axi_fm_AWPROT <= ap_const_lv3_0;
    m_axi_fm_AWQOS <= ap_const_lv4_0;
    m_axi_fm_AWREGION <= ap_const_lv4_0;
    m_axi_fm_AWSIZE <= ap_const_lv3_0;
    m_axi_fm_AWUSER <= ap_const_lv1_0;
    m_axi_fm_AWVALID <= ap_const_logic_0;
    m_axi_fm_BREADY <= ap_const_logic_0;

    m_axi_fm_RREADY_assign_proc : process(ap_enable_reg_pp0_iter11, ap_predicate_op114_read_state12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op114_read_state12 = ap_const_boolean_1))) then 
            m_axi_fm_RREADY <= ap_const_logic_1;
        else 
            m_axi_fm_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_fm_WDATA <= ap_const_lv16_0;
    m_axi_fm_WID <= ap_const_lv1_0;
    m_axi_fm_WLAST <= ap_const_logic_0;
    m_axi_fm_WSTRB <= ap_const_lv2_0;
    m_axi_fm_WUSER <= ap_const_lv1_0;
    m_axi_fm_WVALID <= ap_const_logic_0;
    mul_ln33_fu_396_p0 <= mul_ln33_fu_396_p00(2 - 1 downto 0);
    mul_ln33_fu_396_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln33_1_reg_654),23));
    mul_ln33_fu_396_p1 <= ap_const_lv23_1CC000(22 - 1 downto 0);
    mul_ln51_fu_550_p0 <= mul_ln51_fu_550_p00(2 - 1 downto 0);
    mul_ln51_fu_550_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln33_1_reg_654_pp0_iter8_reg),8));
    mul_ln51_fu_550_p1 <= ap_const_lv8_34(7 - 1 downto 0);
    or_ln36_fu_327_p2 <= (icmp_ln36_reg_639 or and_ln33_fu_315_p2);
    or_ln50_fu_480_p2 <= (select_ln36_2_fu_428_p3 or icmp_ln50_fu_474_p2);
    p_mid17_fu_422_p2 <= "1" when (unsigned(p_mid1_fu_417_p2) > unsigned(ap_const_lv11_2DF)) else "0";
    p_mid1_fu_417_p2 <= std_logic_vector(unsigned(p_mid2258) + unsigned(zext_ln36_2_fu_414_p1));
    select_ln24_3_cast_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_3),12));
    select_ln33_1_fu_297_p3 <= 
        add_ln33_fu_284_p2 when (icmp_ln36_reg_639(0) = '1') else 
        c_fu_126;
    select_ln33_2_fu_402_p3 <= 
        p_mid130 when (icmp_ln36_reg_639_pp0_iter1_reg(0) = '1') else 
        empty_35_fu_387_p2;
    select_ln33_3_fu_408_p3 <= 
        p_mid2258 when (icmp_ln36_reg_639_pp0_iter1_reg(0) = '1') else 
        empty_fu_382_p2;
    select_ln33_fu_290_p3 <= 
        ap_const_lv6_0 when (icmp_ln36_reg_639(0) = '1') else 
        i_fu_118;
    select_ln36_1_fu_340_p3 <= 
        add_ln36_fu_321_p2 when (and_ln33_fu_315_p2(0) = '1') else 
        select_ln33_fu_290_p3;
    select_ln36_2_fu_428_p3 <= 
        p_mid17_fu_422_p2 when (and_ln33_reg_660(0) = '1') else 
        select_ln33_2_fu_402_p3;
    select_ln36_3_fu_435_p3 <= 
        p_mid1_fu_417_p2 when (and_ln33_reg_660(0) = '1') else 
        select_ln33_3_fu_408_p3;
    select_ln36_4_fu_257_p3 <= 
        ap_const_lv12_1 when (icmp_ln36_fu_242_p2(0) = '1') else 
        add_ln36_1_fu_251_p2;
    select_ln36_fu_332_p3 <= 
        ap_const_lv6_0 when (or_ln36_fu_327_p2(0) = '1') else 
        j_fu_114;
        sext_ln36_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln53_1_mid2_v_fu_442_p3),23));

        sext_ln39_mid2_v_cast_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln39_mid2_v_fu_454_p3),23));

    sext_ln39_mid2_v_fu_454_p3 <= (select_ln36_3_fu_435_p3 & ap_const_lv9_0);
        sext_ln50_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln50_1_reg_681),12));

        sext_ln53_1_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln53_1_reg_695),64));

    sext_ln53_1_mid2_v_fu_442_p3 <= (select_ln36_3_fu_435_p3 & ap_const_lv11_0);
        sext_ln53_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_527_p4),64));

    tmp_s_fu_486_p3 <= (add_ln50_fu_469_p2 & ap_const_lv1_0);
    trunc_ln1_fu_527_p4 <= add_ln53_2_fu_521_p2(63 downto 1);
    xor_ln33_fu_304_p2 <= (icmp_ln36_reg_639 xor ap_const_lv1_1);
    zext_ln33_2_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln33_reg_686),64));
    zext_ln36_2_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_reg_666),11));
    zext_ln36_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_649),11));
    zext_ln48_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln36_fu_332_p3),7));
    zext_ln51_3_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_566_p4),64));
    zext_ln53_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_486_p3),23));
end behav;
