// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tiled_conv_tiled_conv_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEIGHT_INPUT_BUFFER_WIDTH (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_fm_AWVALID,
        m_axi_fm_AWREADY,
        m_axi_fm_AWADDR,
        m_axi_fm_AWID,
        m_axi_fm_AWLEN,
        m_axi_fm_AWSIZE,
        m_axi_fm_AWBURST,
        m_axi_fm_AWLOCK,
        m_axi_fm_AWCACHE,
        m_axi_fm_AWPROT,
        m_axi_fm_AWQOS,
        m_axi_fm_AWREGION,
        m_axi_fm_AWUSER,
        m_axi_fm_WVALID,
        m_axi_fm_WREADY,
        m_axi_fm_WDATA,
        m_axi_fm_WSTRB,
        m_axi_fm_WLAST,
        m_axi_fm_WID,
        m_axi_fm_WUSER,
        m_axi_fm_ARVALID,
        m_axi_fm_ARREADY,
        m_axi_fm_ARADDR,
        m_axi_fm_ARID,
        m_axi_fm_ARLEN,
        m_axi_fm_ARSIZE,
        m_axi_fm_ARBURST,
        m_axi_fm_ARLOCK,
        m_axi_fm_ARCACHE,
        m_axi_fm_ARPROT,
        m_axi_fm_ARQOS,
        m_axi_fm_ARREGION,
        m_axi_fm_ARUSER,
        m_axi_fm_RVALID,
        m_axi_fm_RREADY,
        m_axi_fm_RDATA,
        m_axi_fm_RLAST,
        m_axi_fm_RID,
        m_axi_fm_RFIFONUM,
        m_axi_fm_RUSER,
        m_axi_fm_RRESP,
        m_axi_fm_BVALID,
        m_axi_fm_BREADY,
        m_axi_fm_BRESP,
        m_axi_fm_BID,
        m_axi_fm_BUSER,
        p_mid2258,
        input_feature_map,
        p_mid130,
        conv_in_buf_V_address0,
        conv_in_buf_V_ce0,
        conv_in_buf_V_we0,
        conv_in_buf_V_d0,
        select_ln24_3
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_fm_AWVALID;
input   m_axi_fm_AWREADY;
output  [63:0] m_axi_fm_AWADDR;
output  [0:0] m_axi_fm_AWID;
output  [31:0] m_axi_fm_AWLEN;
output  [2:0] m_axi_fm_AWSIZE;
output  [1:0] m_axi_fm_AWBURST;
output  [1:0] m_axi_fm_AWLOCK;
output  [3:0] m_axi_fm_AWCACHE;
output  [2:0] m_axi_fm_AWPROT;
output  [3:0] m_axi_fm_AWQOS;
output  [3:0] m_axi_fm_AWREGION;
output  [0:0] m_axi_fm_AWUSER;
output   m_axi_fm_WVALID;
input   m_axi_fm_WREADY;
output  [15:0] m_axi_fm_WDATA;
output  [1:0] m_axi_fm_WSTRB;
output   m_axi_fm_WLAST;
output  [0:0] m_axi_fm_WID;
output  [0:0] m_axi_fm_WUSER;
output   m_axi_fm_ARVALID;
input   m_axi_fm_ARREADY;
output  [63:0] m_axi_fm_ARADDR;
output  [0:0] m_axi_fm_ARID;
output  [31:0] m_axi_fm_ARLEN;
output  [2:0] m_axi_fm_ARSIZE;
output  [1:0] m_axi_fm_ARBURST;
output  [1:0] m_axi_fm_ARLOCK;
output  [3:0] m_axi_fm_ARCACHE;
output  [2:0] m_axi_fm_ARPROT;
output  [3:0] m_axi_fm_ARQOS;
output  [3:0] m_axi_fm_ARREGION;
output  [0:0] m_axi_fm_ARUSER;
input   m_axi_fm_RVALID;
output   m_axi_fm_RREADY;
input  [15:0] m_axi_fm_RDATA;
input   m_axi_fm_RLAST;
input  [0:0] m_axi_fm_RID;
input  [9:0] m_axi_fm_RFIFONUM;
input  [0:0] m_axi_fm_RUSER;
input  [1:0] m_axi_fm_RRESP;
input   m_axi_fm_BVALID;
output   m_axi_fm_BREADY;
input  [1:0] m_axi_fm_BRESP;
input  [0:0] m_axi_fm_BID;
input  [0:0] m_axi_fm_BUSER;
input  [10:0] p_mid2258;
input  [63:0] input_feature_map;
input  [0:0] p_mid130;
output  [12:0] conv_in_buf_V_address0;
output   conv_in_buf_V_ce0;
output   conv_in_buf_V_we0;
output  [15:0] conv_in_buf_V_d0;
input  [10:0] select_ln24_3;

reg ap_idle;
reg m_axi_fm_ARVALID;
reg m_axi_fm_RREADY;
reg conv_in_buf_V_ce0;
reg conv_in_buf_V_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
reg   [0:0] icmp_ln33_reg_635;
reg   [0:0] icmp_ln33_reg_635_pp0_iter3_reg;
reg   [0:0] or_ln50_reg_691;
reg   [0:0] or_ln50_reg_691_pp0_iter3_reg;
reg    ap_predicate_op97_readreq_state5;
reg    ap_block_state5_io;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
reg   [0:0] icmp_ln33_reg_635_pp0_iter10_reg;
reg   [0:0] or_ln50_reg_691_pp0_iter10_reg;
reg    ap_predicate_op114_read_state12;
reg    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln33_fu_227_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    fm_blk_n_AR;
wire    ap_block_pp0_stage0;
reg    fm_blk_n_R;
reg    ap_block_pp0_stage0_11001;
wire   [11:0] select_ln24_3_cast_fu_195_p1;
reg   [11:0] select_ln24_3_cast_reg_630;
reg   [0:0] icmp_ln33_reg_635_pp0_iter1_reg;
reg   [0:0] icmp_ln33_reg_635_pp0_iter2_reg;
reg   [0:0] icmp_ln33_reg_635_pp0_iter4_reg;
reg   [0:0] icmp_ln33_reg_635_pp0_iter5_reg;
reg   [0:0] icmp_ln33_reg_635_pp0_iter6_reg;
reg   [0:0] icmp_ln33_reg_635_pp0_iter7_reg;
reg   [0:0] icmp_ln33_reg_635_pp0_iter8_reg;
reg   [0:0] icmp_ln33_reg_635_pp0_iter9_reg;
reg   [0:0] icmp_ln33_reg_635_pp0_iter11_reg;
wire   [0:0] icmp_ln36_fu_242_p2;
reg   [0:0] icmp_ln36_reg_639;
reg   [0:0] icmp_ln36_reg_639_pp0_iter1_reg;
reg   [5:0] i_3_reg_649;
wire   [1:0] select_ln33_1_fu_297_p3;
reg   [1:0] select_ln33_1_reg_654;
reg   [1:0] select_ln33_1_reg_654_pp0_iter2_reg;
reg   [1:0] select_ln33_1_reg_654_pp0_iter3_reg;
reg   [1:0] select_ln33_1_reg_654_pp0_iter4_reg;
reg   [1:0] select_ln33_1_reg_654_pp0_iter5_reg;
reg   [1:0] select_ln33_1_reg_654_pp0_iter6_reg;
reg   [1:0] select_ln33_1_reg_654_pp0_iter7_reg;
reg   [1:0] select_ln33_1_reg_654_pp0_iter8_reg;
wire   [0:0] and_ln33_fu_315_p2;
reg   [0:0] and_ln33_reg_660;
wire   [5:0] add_ln36_fu_321_p2;
reg   [5:0] add_ln36_reg_666;
wire   [5:0] select_ln36_fu_332_p3;
reg   [5:0] select_ln36_reg_671;
reg   [5:0] select_ln36_reg_671_pp0_iter2_reg;
reg   [5:0] select_ln36_reg_671_pp0_iter3_reg;
reg   [5:0] select_ln36_reg_671_pp0_iter4_reg;
reg   [5:0] select_ln36_reg_671_pp0_iter5_reg;
reg   [5:0] select_ln36_reg_671_pp0_iter6_reg;
reg   [5:0] select_ln36_reg_671_pp0_iter7_reg;
reg   [5:0] select_ln36_reg_671_pp0_iter8_reg;
reg   [5:0] select_ln36_reg_671_pp0_iter9_reg;
reg   [5:0] select_ln36_reg_671_pp0_iter10_reg;
wire   [5:0] select_ln36_1_fu_340_p3;
reg   [5:0] select_ln36_1_reg_676;
reg   [5:0] select_ln36_1_reg_676_pp0_iter2_reg;
reg   [5:0] select_ln36_1_reg_676_pp0_iter3_reg;
reg   [5:0] select_ln36_1_reg_676_pp0_iter4_reg;
reg   [5:0] select_ln36_1_reg_676_pp0_iter5_reg;
reg   [5:0] select_ln36_1_reg_676_pp0_iter6_reg;
reg   [5:0] select_ln36_1_reg_676_pp0_iter7_reg;
reg   [5:0] select_ln36_1_reg_676_pp0_iter8_reg;
wire   [6:0] add_ln50_1_fu_352_p2;
reg   [6:0] add_ln50_1_reg_681;
wire   [22:0] mul_ln33_fu_396_p2;
reg   [22:0] mul_ln33_reg_686;
wire   [0:0] or_ln50_fu_480_p2;
reg   [0:0] or_ln50_reg_691_pp0_iter4_reg;
reg   [0:0] or_ln50_reg_691_pp0_iter5_reg;
reg   [0:0] or_ln50_reg_691_pp0_iter6_reg;
reg   [0:0] or_ln50_reg_691_pp0_iter7_reg;
reg   [0:0] or_ln50_reg_691_pp0_iter8_reg;
reg   [0:0] or_ln50_reg_691_pp0_iter9_reg;
reg   [0:0] or_ln50_reg_691_pp0_iter11_reg;
wire   [22:0] add_ln53_1_fu_504_p2;
reg   [22:0] add_ln53_1_reg_695;
reg   [63:0] fm_addr_reg_700;
reg   [15:0] fm_addr_read_reg_711;
reg    ap_condition_exit_pp0_iter2_stage0;
reg   [15:0] ap_phi_mux_storemerge5_phi_fu_187_p4;
reg   [15:0] ap_phi_reg_pp0_iter12_storemerge5_reg_183;
wire   [15:0] ap_phi_reg_pp0_iter0_storemerge5_reg_183;
reg   [15:0] ap_phi_reg_pp0_iter1_storemerge5_reg_183;
reg   [15:0] ap_phi_reg_pp0_iter2_storemerge5_reg_183;
reg   [15:0] ap_phi_reg_pp0_iter3_storemerge5_reg_183;
reg   [15:0] ap_phi_reg_pp0_iter4_storemerge5_reg_183;
reg   [15:0] ap_phi_reg_pp0_iter5_storemerge5_reg_183;
reg   [15:0] ap_phi_reg_pp0_iter6_storemerge5_reg_183;
reg   [15:0] ap_phi_reg_pp0_iter7_storemerge5_reg_183;
reg   [15:0] ap_phi_reg_pp0_iter8_storemerge5_reg_183;
reg   [15:0] ap_phi_reg_pp0_iter9_storemerge5_reg_183;
reg   [15:0] ap_phi_reg_pp0_iter10_storemerge5_reg_183;
reg   [15:0] ap_phi_reg_pp0_iter11_storemerge5_reg_183;
wire   [63:0] zext_ln51_3_fu_562_p1;
wire  signed [63:0] sext_ln53_fu_537_p1;
reg   [5:0] j_fu_114;
wire   [5:0] add_ln39_fu_358_p2;
wire    ap_loop_init;
reg   [5:0] i_fu_118;
reg   [11:0] indvar_flatten_fu_122;
wire   [11:0] select_ln36_4_fu_257_p3;
reg   [11:0] ap_sig_allocacmp_indvar_flatten_load_1;
reg   [11:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [1:0] c_fu_126;
reg   [12:0] indvar_flatten42_fu_130;
wire   [12:0] add_ln33_2_fu_233_p2;
reg   [12:0] ap_sig_allocacmp_indvar_flatten42_load;
wire   [11:0] add_ln36_1_fu_251_p2;
wire   [1:0] add_ln33_fu_284_p2;
wire   [0:0] icmp_ln39_fu_309_p2;
wire   [0:0] xor_ln33_fu_304_p2;
wire   [5:0] select_ln33_fu_290_p3;
wire   [0:0] or_ln36_fu_327_p2;
wire   [6:0] zext_ln48_fu_348_p1;
wire   [10:0] zext_ln36_fu_379_p1;
wire   [10:0] empty_fu_382_p2;
wire   [1:0] mul_ln33_fu_396_p0;
wire   [21:0] mul_ln33_fu_396_p1;
wire   [0:0] empty_35_fu_387_p2;
wire   [10:0] zext_ln36_2_fu_414_p1;
wire   [10:0] p_mid1_fu_417_p2;
wire   [0:0] p_mid17_fu_422_p2;
wire   [0:0] select_ln33_2_fu_402_p3;
wire   [10:0] select_ln33_3_fu_408_p3;
wire   [10:0] select_ln36_3_fu_435_p3;
wire   [21:0] sext_ln53_1_mid2_v_fu_442_p3;
wire   [19:0] sext_ln39_mid2_v_fu_454_p3;
wire  signed [11:0] sext_ln50_fu_466_p1;
wire   [11:0] add_ln50_fu_469_p2;
wire   [0:0] icmp_ln50_fu_474_p2;
wire   [0:0] select_ln36_2_fu_428_p3;
wire   [12:0] tmp_s_fu_486_p3;
wire  signed [22:0] sext_ln36_fu_450_p1;
wire   [22:0] zext_ln53_fu_494_p1;
wire   [22:0] add_ln53_fu_498_p2;
wire  signed [22:0] sext_ln39_mid2_v_cast_fu_462_p1;
wire   [63:0] zext_ln33_2_fu_510_p1;
wire  signed [63:0] sext_ln53_1_fu_518_p1;
wire   [63:0] add_ln33_1_fu_513_p2;
wire   [63:0] add_ln53_2_fu_521_p2;
wire   [62:0] trunc_ln1_fu_527_p4;
wire   [1:0] mul_ln51_fu_550_p0;
wire   [6:0] mul_ln51_fu_550_p1;
wire   [12:0] grp_fu_566_p4;
wire   [7:0] mul_ln51_fu_550_p2;
wire   [5:0] grp_fu_566_p1;
wire   [5:0] grp_fu_566_p2;
wire   [5:0] grp_fu_566_p3;
reg    grp_fu_566_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [7:0] grp_fu_566_p10;
wire   [12:0] grp_fu_566_p30;
wire   [22:0] mul_ln33_fu_396_p00;
wire   [7:0] mul_ln51_fu_550_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tiled_conv_mul_2ns_22ns_23_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 2 ),
    .din1_WIDTH( 22 ),
    .dout_WIDTH( 23 ))
mul_2ns_22ns_23_1_1_U1(
    .din0(mul_ln33_fu_396_p0),
    .din1(mul_ln33_fu_396_p1),
    .dout(mul_ln33_fu_396_p2)
);

tiled_conv_mul_2ns_7ns_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 2 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 8 ))
mul_2ns_7ns_8_1_1_U2(
    .din0(mul_ln51_fu_550_p0),
    .din1(mul_ln51_fu_550_p1),
    .dout(mul_ln51_fu_550_p2)
);

tiled_conv_ama_addmuladd_8ns_6ns_6ns_6ns_13_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .din3_WIDTH( 6 ),
    .dout_WIDTH( 13 ))
ama_addmuladd_8ns_6ns_6ns_6ns_13_4_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul_ln51_fu_550_p2),
    .din1(grp_fu_566_p1),
    .din2(grp_fu_566_p2),
    .din3(grp_fu_566_p3),
    .ce(grp_fu_566_ce),
    .dout(grp_fu_566_p4)
);

tiled_conv_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter11_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((or_ln50_fu_480_p2 == 1'd1) & (icmp_ln33_reg_635_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_storemerge5_reg_183 <= 16'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_storemerge5_reg_183 <= ap_phi_reg_pp0_iter2_storemerge5_reg_183;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            c_fu_126 <= 2'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln33_reg_635 == 1'd0))) begin
            c_fu_126 <= select_ln33_1_fu_297_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_118 <= 6'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln33_reg_635 == 1'd0))) begin
            i_fu_118 <= select_ln36_1_fu_340_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln33_fu_227_p2 == 1'd0))) begin
            indvar_flatten42_fu_130 <= add_ln33_2_fu_233_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten42_fu_130 <= 13'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln33_fu_227_p2 == 1'd0))) begin
            indvar_flatten_fu_122 <= select_ln36_4_fu_257_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_122 <= 12'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_114 <= 6'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln33_reg_635 == 1'd0))) begin
            j_fu_114 <= add_ln39_fu_358_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln33_reg_635 == 1'd0))) begin
        add_ln36_reg_666 <= add_ln36_fu_321_p2;
        add_ln50_1_reg_681 <= add_ln50_1_fu_352_p2;
        and_ln33_reg_660 <= and_ln33_fu_315_p2;
        select_ln33_1_reg_654 <= select_ln33_1_fu_297_p3;
        select_ln36_1_reg_676 <= select_ln36_1_fu_340_p3;
        select_ln36_reg_671 <= select_ln36_fu_332_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln50_fu_480_p2 == 1'd0) & (icmp_ln33_reg_635_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln53_1_reg_695[22 : 1] <= add_ln53_1_fu_504_p2[22 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln33_reg_635_pp0_iter10_reg <= icmp_ln33_reg_635_pp0_iter9_reg;
        icmp_ln33_reg_635_pp0_iter11_reg <= icmp_ln33_reg_635_pp0_iter10_reg;
        icmp_ln33_reg_635_pp0_iter2_reg <= icmp_ln33_reg_635_pp0_iter1_reg;
        icmp_ln33_reg_635_pp0_iter3_reg <= icmp_ln33_reg_635_pp0_iter2_reg;
        icmp_ln33_reg_635_pp0_iter4_reg <= icmp_ln33_reg_635_pp0_iter3_reg;
        icmp_ln33_reg_635_pp0_iter5_reg <= icmp_ln33_reg_635_pp0_iter4_reg;
        icmp_ln33_reg_635_pp0_iter6_reg <= icmp_ln33_reg_635_pp0_iter5_reg;
        icmp_ln33_reg_635_pp0_iter7_reg <= icmp_ln33_reg_635_pp0_iter6_reg;
        icmp_ln33_reg_635_pp0_iter8_reg <= icmp_ln33_reg_635_pp0_iter7_reg;
        icmp_ln33_reg_635_pp0_iter9_reg <= icmp_ln33_reg_635_pp0_iter8_reg;
        or_ln50_reg_691_pp0_iter10_reg <= or_ln50_reg_691_pp0_iter9_reg;
        or_ln50_reg_691_pp0_iter11_reg <= or_ln50_reg_691_pp0_iter10_reg;
        or_ln50_reg_691_pp0_iter3_reg <= or_ln50_reg_691;
        or_ln50_reg_691_pp0_iter4_reg <= or_ln50_reg_691_pp0_iter3_reg;
        or_ln50_reg_691_pp0_iter5_reg <= or_ln50_reg_691_pp0_iter4_reg;
        or_ln50_reg_691_pp0_iter6_reg <= or_ln50_reg_691_pp0_iter5_reg;
        or_ln50_reg_691_pp0_iter7_reg <= or_ln50_reg_691_pp0_iter6_reg;
        or_ln50_reg_691_pp0_iter8_reg <= or_ln50_reg_691_pp0_iter7_reg;
        or_ln50_reg_691_pp0_iter9_reg <= or_ln50_reg_691_pp0_iter8_reg;
        select_ln33_1_reg_654_pp0_iter2_reg <= select_ln33_1_reg_654;
        select_ln33_1_reg_654_pp0_iter3_reg <= select_ln33_1_reg_654_pp0_iter2_reg;
        select_ln33_1_reg_654_pp0_iter4_reg <= select_ln33_1_reg_654_pp0_iter3_reg;
        select_ln33_1_reg_654_pp0_iter5_reg <= select_ln33_1_reg_654_pp0_iter4_reg;
        select_ln33_1_reg_654_pp0_iter6_reg <= select_ln33_1_reg_654_pp0_iter5_reg;
        select_ln33_1_reg_654_pp0_iter7_reg <= select_ln33_1_reg_654_pp0_iter6_reg;
        select_ln33_1_reg_654_pp0_iter8_reg <= select_ln33_1_reg_654_pp0_iter7_reg;
        select_ln36_1_reg_676_pp0_iter2_reg <= select_ln36_1_reg_676;
        select_ln36_1_reg_676_pp0_iter3_reg <= select_ln36_1_reg_676_pp0_iter2_reg;
        select_ln36_1_reg_676_pp0_iter4_reg <= select_ln36_1_reg_676_pp0_iter3_reg;
        select_ln36_1_reg_676_pp0_iter5_reg <= select_ln36_1_reg_676_pp0_iter4_reg;
        select_ln36_1_reg_676_pp0_iter6_reg <= select_ln36_1_reg_676_pp0_iter5_reg;
        select_ln36_1_reg_676_pp0_iter7_reg <= select_ln36_1_reg_676_pp0_iter6_reg;
        select_ln36_1_reg_676_pp0_iter8_reg <= select_ln36_1_reg_676_pp0_iter7_reg;
        select_ln36_reg_671_pp0_iter10_reg <= select_ln36_reg_671_pp0_iter9_reg;
        select_ln36_reg_671_pp0_iter2_reg <= select_ln36_reg_671;
        select_ln36_reg_671_pp0_iter3_reg <= select_ln36_reg_671_pp0_iter2_reg;
        select_ln36_reg_671_pp0_iter4_reg <= select_ln36_reg_671_pp0_iter3_reg;
        select_ln36_reg_671_pp0_iter5_reg <= select_ln36_reg_671_pp0_iter4_reg;
        select_ln36_reg_671_pp0_iter6_reg <= select_ln36_reg_671_pp0_iter5_reg;
        select_ln36_reg_671_pp0_iter7_reg <= select_ln36_reg_671_pp0_iter6_reg;
        select_ln36_reg_671_pp0_iter8_reg <= select_ln36_reg_671_pp0_iter7_reg;
        select_ln36_reg_671_pp0_iter9_reg <= select_ln36_reg_671_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        i_3_reg_649 <= i_fu_118;
        icmp_ln33_reg_635 <= icmp_ln33_fu_227_p2;
        icmp_ln33_reg_635_pp0_iter1_reg <= icmp_ln33_reg_635;
        icmp_ln36_reg_639_pp0_iter1_reg <= icmp_ln36_reg_639;
        select_ln24_3_cast_reg_630[10 : 0] <= select_ln24_3_cast_fu_195_p1[10 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter10_storemerge5_reg_183 <= ap_phi_reg_pp0_iter9_storemerge5_reg_183;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter11_storemerge5_reg_183 <= ap_phi_reg_pp0_iter10_storemerge5_reg_183;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter12_storemerge5_reg_183 <= ap_phi_reg_pp0_iter11_storemerge5_reg_183;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter1_storemerge5_reg_183 <= ap_phi_reg_pp0_iter0_storemerge5_reg_183;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter2_storemerge5_reg_183 <= ap_phi_reg_pp0_iter1_storemerge5_reg_183;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter4_storemerge5_reg_183 <= ap_phi_reg_pp0_iter3_storemerge5_reg_183;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter5_storemerge5_reg_183 <= ap_phi_reg_pp0_iter4_storemerge5_reg_183;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter6_storemerge5_reg_183 <= ap_phi_reg_pp0_iter5_storemerge5_reg_183;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter7_storemerge5_reg_183 <= ap_phi_reg_pp0_iter6_storemerge5_reg_183;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter8_storemerge5_reg_183 <= ap_phi_reg_pp0_iter7_storemerge5_reg_183;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter9_storemerge5_reg_183 <= ap_phi_reg_pp0_iter8_storemerge5_reg_183;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op114_read_state12 == 1'b1))) begin
        fm_addr_read_reg_711 <= m_axi_fm_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_reg_635_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (or_ln50_reg_691 == 1'd0))) begin
        fm_addr_reg_700 <= sext_ln53_fu_537_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln33_fu_227_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln36_reg_639 <= icmp_ln36_fu_242_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_reg_635_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln33_reg_686 <= mul_ln33_fu_396_p2;
        or_ln50_reg_691 <= or_ln50_fu_480_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln33_fu_227_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln33_reg_635_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter11_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln50_reg_691_pp0_iter11_reg == 1'd0) & (icmp_ln33_reg_635_pp0_iter11_reg == 1'd0))) begin
        ap_phi_mux_storemerge5_phi_fu_187_p4 = fm_addr_read_reg_711;
    end else begin
        ap_phi_mux_storemerge5_phi_fu_187_p4 = ap_phi_reg_pp0_iter12_storemerge5_reg_183;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten42_load = 13'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten42_load = indvar_flatten42_fu_130;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 12'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_122;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load_1 = 12'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load_1 = indvar_flatten_fu_122;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_in_buf_V_ce0 = 1'b1;
    end else begin
        conv_in_buf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_in_buf_V_we0 = 1'b1;
    end else begin
        conv_in_buf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op97_readreq_state5 == 1'b1))) begin
        fm_blk_n_AR = m_axi_fm_ARREADY;
    end else begin
        fm_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op114_read_state12 == 1'b1))) begin
        fm_blk_n_R = m_axi_fm_RVALID;
    end else begin
        fm_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_566_ce = 1'b1;
    end else begin
        grp_fu_566_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op97_readreq_state5 == 1'b1))) begin
        m_axi_fm_ARVALID = 1'b1;
    end else begin
        m_axi_fm_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op114_read_state12 == 1'b1))) begin
        m_axi_fm_RREADY = 1'b1;
    end else begin
        m_axi_fm_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln33_1_fu_513_p2 = (zext_ln33_2_fu_510_p1 + input_feature_map);

assign add_ln33_2_fu_233_p2 = (ap_sig_allocacmp_indvar_flatten42_load + 13'd1);

assign add_ln33_fu_284_p2 = (c_fu_126 + 2'd1);

assign add_ln36_1_fu_251_p2 = (ap_sig_allocacmp_indvar_flatten_load + 12'd1);

assign add_ln36_fu_321_p2 = (select_ln33_fu_290_p3 + 6'd1);

assign add_ln39_fu_358_p2 = (select_ln36_fu_332_p3 + 6'd1);

assign add_ln50_1_fu_352_p2 = ($signed(zext_ln48_fu_348_p1) + $signed(7'd125));

assign add_ln50_fu_469_p2 = ($signed(sext_ln50_fu_466_p1) + $signed(select_ln24_3_cast_reg_630));

assign add_ln53_1_fu_504_p2 = ($signed(add_ln53_fu_498_p2) + $signed(sext_ln39_mid2_v_cast_fu_462_p1));

assign add_ln53_2_fu_521_p2 = ($signed(sext_ln53_1_fu_518_p1) + $signed(add_ln33_1_fu_513_p2));

assign add_ln53_fu_498_p2 = ($signed(sext_ln36_fu_450_p1) + $signed(zext_ln53_fu_494_p1));

assign and_ln33_fu_315_p2 = (xor_ln33_fu_304_p2 & icmp_ln39_fu_309_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter11 == 1'b1) & (ap_predicate_op114_read_state12 == 1'b1) & (m_axi_fm_RVALID == 1'b0)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state5_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter11 == 1'b1) & (ap_predicate_op114_read_state12 == 1'b1) & (m_axi_fm_RVALID == 1'b0)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state5_io)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_pp0_stage0_iter11 = ((ap_predicate_op114_read_state12 == 1'b1) & (m_axi_fm_RVALID == 1'b0));
end

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((m_axi_fm_ARREADY == 1'b0) & (ap_predicate_op97_readreq_state5 == 1'b1));
end

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_storemerge5_reg_183 = 'bx;

always @ (*) begin
    ap_predicate_op114_read_state12 = ((or_ln50_reg_691_pp0_iter10_reg == 1'd0) & (icmp_ln33_reg_635_pp0_iter10_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op97_readreq_state5 = ((or_ln50_reg_691_pp0_iter3_reg == 1'd0) & (icmp_ln33_reg_635_pp0_iter3_reg == 1'd0));
end

assign conv_in_buf_V_address0 = zext_ln51_3_fu_562_p1;

assign conv_in_buf_V_d0 = ap_phi_mux_storemerge5_phi_fu_187_p4;

assign empty_35_fu_387_p2 = ((empty_fu_382_p2 > 11'd735) ? 1'b1 : 1'b0);

assign empty_fu_382_p2 = (p_mid2258 + zext_ln36_fu_379_p1);

assign grp_fu_566_p1 = grp_fu_566_p10;

assign grp_fu_566_p10 = select_ln36_1_reg_676_pp0_iter8_reg;

assign grp_fu_566_p2 = 13'd46;

assign grp_fu_566_p3 = grp_fu_566_p30;

assign grp_fu_566_p30 = select_ln36_reg_671_pp0_iter10_reg;

assign icmp_ln33_fu_227_p2 = ((ap_sig_allocacmp_indvar_flatten42_load == 13'd7176) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_242_p2 = ((ap_sig_allocacmp_indvar_flatten_load_1 == 12'd2392) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_309_p2 = ((j_fu_114 == 6'd46) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_474_p2 = ((add_ln50_fu_469_p2 > 12'd1279) ? 1'b1 : 1'b0);

assign m_axi_fm_ARADDR = fm_addr_reg_700;

assign m_axi_fm_ARBURST = 2'd0;

assign m_axi_fm_ARCACHE = 4'd0;

assign m_axi_fm_ARID = 1'd0;

assign m_axi_fm_ARLEN = 32'd1;

assign m_axi_fm_ARLOCK = 2'd0;

assign m_axi_fm_ARPROT = 3'd0;

assign m_axi_fm_ARQOS = 4'd0;

assign m_axi_fm_ARREGION = 4'd0;

assign m_axi_fm_ARSIZE = 3'd0;

assign m_axi_fm_ARUSER = 1'd0;

assign m_axi_fm_AWADDR = 64'd0;

assign m_axi_fm_AWBURST = 2'd0;

assign m_axi_fm_AWCACHE = 4'd0;

assign m_axi_fm_AWID = 1'd0;

assign m_axi_fm_AWLEN = 32'd0;

assign m_axi_fm_AWLOCK = 2'd0;

assign m_axi_fm_AWPROT = 3'd0;

assign m_axi_fm_AWQOS = 4'd0;

assign m_axi_fm_AWREGION = 4'd0;

assign m_axi_fm_AWSIZE = 3'd0;

assign m_axi_fm_AWUSER = 1'd0;

assign m_axi_fm_AWVALID = 1'b0;

assign m_axi_fm_BREADY = 1'b0;

assign m_axi_fm_WDATA = 16'd0;

assign m_axi_fm_WID = 1'd0;

assign m_axi_fm_WLAST = 1'b0;

assign m_axi_fm_WSTRB = 2'd0;

assign m_axi_fm_WUSER = 1'd0;

assign m_axi_fm_WVALID = 1'b0;

assign mul_ln33_fu_396_p0 = mul_ln33_fu_396_p00;

assign mul_ln33_fu_396_p00 = select_ln33_1_reg_654;

assign mul_ln33_fu_396_p1 = 23'd1884160;

assign mul_ln51_fu_550_p0 = mul_ln51_fu_550_p00;

assign mul_ln51_fu_550_p00 = select_ln33_1_reg_654_pp0_iter8_reg;

assign mul_ln51_fu_550_p1 = 8'd52;

assign or_ln36_fu_327_p2 = (icmp_ln36_reg_639 | and_ln33_fu_315_p2);

assign or_ln50_fu_480_p2 = (select_ln36_2_fu_428_p3 | icmp_ln50_fu_474_p2);

assign p_mid17_fu_422_p2 = ((p_mid1_fu_417_p2 > 11'd735) ? 1'b1 : 1'b0);

assign p_mid1_fu_417_p2 = (p_mid2258 + zext_ln36_2_fu_414_p1);

assign select_ln24_3_cast_fu_195_p1 = select_ln24_3;

assign select_ln33_1_fu_297_p3 = ((icmp_ln36_reg_639[0:0] == 1'b1) ? add_ln33_fu_284_p2 : c_fu_126);

assign select_ln33_2_fu_402_p3 = ((icmp_ln36_reg_639_pp0_iter1_reg[0:0] == 1'b1) ? p_mid130 : empty_35_fu_387_p2);

assign select_ln33_3_fu_408_p3 = ((icmp_ln36_reg_639_pp0_iter1_reg[0:0] == 1'b1) ? p_mid2258 : empty_fu_382_p2);

assign select_ln33_fu_290_p3 = ((icmp_ln36_reg_639[0:0] == 1'b1) ? 6'd0 : i_fu_118);

assign select_ln36_1_fu_340_p3 = ((and_ln33_fu_315_p2[0:0] == 1'b1) ? add_ln36_fu_321_p2 : select_ln33_fu_290_p3);

assign select_ln36_2_fu_428_p3 = ((and_ln33_reg_660[0:0] == 1'b1) ? p_mid17_fu_422_p2 : select_ln33_2_fu_402_p3);

assign select_ln36_3_fu_435_p3 = ((and_ln33_reg_660[0:0] == 1'b1) ? p_mid1_fu_417_p2 : select_ln33_3_fu_408_p3);

assign select_ln36_4_fu_257_p3 = ((icmp_ln36_fu_242_p2[0:0] == 1'b1) ? 12'd1 : add_ln36_1_fu_251_p2);

assign select_ln36_fu_332_p3 = ((or_ln36_fu_327_p2[0:0] == 1'b1) ? 6'd0 : j_fu_114);

assign sext_ln36_fu_450_p1 = $signed(sext_ln53_1_mid2_v_fu_442_p3);

assign sext_ln39_mid2_v_cast_fu_462_p1 = $signed(sext_ln39_mid2_v_fu_454_p3);

assign sext_ln39_mid2_v_fu_454_p3 = {{select_ln36_3_fu_435_p3}, {9'd0}};

assign sext_ln50_fu_466_p1 = $signed(add_ln50_1_reg_681);

assign sext_ln53_1_fu_518_p1 = $signed(add_ln53_1_reg_695);

assign sext_ln53_1_mid2_v_fu_442_p3 = {{select_ln36_3_fu_435_p3}, {11'd0}};

assign sext_ln53_fu_537_p1 = $signed(trunc_ln1_fu_527_p4);

assign tmp_s_fu_486_p3 = {{add_ln50_fu_469_p2}, {1'd0}};

assign trunc_ln1_fu_527_p4 = {{add_ln53_2_fu_521_p2[63:1]}};

assign xor_ln33_fu_304_p2 = (icmp_ln36_reg_639 ^ 1'd1);

assign zext_ln33_2_fu_510_p1 = mul_ln33_reg_686;

assign zext_ln36_2_fu_414_p1 = add_ln36_reg_666;

assign zext_ln36_fu_379_p1 = i_3_reg_649;

assign zext_ln48_fu_348_p1 = select_ln36_fu_332_p3;

assign zext_ln51_3_fu_562_p1 = grp_fu_566_p4;

assign zext_ln53_fu_494_p1 = tmp_s_fu_486_p3;

always @ (posedge ap_clk) begin
    select_ln24_3_cast_reg_630[11] <= 1'b0;
    add_ln53_1_reg_695[0] <= 1'b0;
end

endmodule //tiled_conv_tiled_conv_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEIGHT_INPUT_BUFFER_WIDTH
