-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tiled_conv_load_layer_params_from_DRAM_Pipeline_BIAS is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_wt_AWVALID : OUT STD_LOGIC;
    m_axi_wt_AWREADY : IN STD_LOGIC;
    m_axi_wt_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_wt_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wt_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_wt_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_wt_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wt_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wt_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wt_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_wt_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wt_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wt_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wt_WVALID : OUT STD_LOGIC;
    m_axi_wt_WREADY : IN STD_LOGIC;
    m_axi_wt_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_wt_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wt_WLAST : OUT STD_LOGIC;
    m_axi_wt_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wt_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wt_ARVALID : OUT STD_LOGIC;
    m_axi_wt_ARREADY : IN STD_LOGIC;
    m_axi_wt_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_wt_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wt_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_wt_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_wt_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wt_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wt_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wt_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_wt_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wt_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wt_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wt_RVALID : IN STD_LOGIC;
    m_axi_wt_RREADY : OUT STD_LOGIC;
    m_axi_wt_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_wt_RLAST : IN STD_LOGIC;
    m_axi_wt_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wt_RFIFONUM : IN STD_LOGIC_VECTOR (9 downto 0);
    m_axi_wt_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wt_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wt_BVALID : IN STD_LOGIC;
    m_axi_wt_BREADY : OUT STD_LOGIC;
    m_axi_wt_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wt_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wt_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln91 : IN STD_LOGIC_VECTOR (62 downto 0);
    write_flag4_0_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    write_flag4_0_out_ap_vld : OUT STD_LOGIC;
    bias_buf16_07_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias_buf16_07_out_ap_vld : OUT STD_LOGIC;
    write_flag8_0_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    write_flag8_0_out_ap_vld : OUT STD_LOGIC;
    bias_buf_06_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias_buf_06_out_ap_vld : OUT STD_LOGIC;
    bias_buf2_05_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias_buf2_05_out_ap_vld : OUT STD_LOGIC;
    write_flag11_0_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    write_flag11_0_out_ap_vld : OUT STD_LOGIC;
    write_flag_0_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    write_flag_0_out_ap_vld : OUT STD_LOGIC;
    bias_buf3_04_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias_buf3_04_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of tiled_conv_load_layer_params_from_DRAM_Pipeline_BIAS is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln91_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal wt_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln93_fu_227_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln93_reg_375 : STD_LOGIC_VECTOR (1 downto 0);
    signal f_fu_74 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln91_fu_221_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_f_2 : STD_LOGIC_VECTOR (2 downto 0);
    signal bias_buf3_04_fu_78 : STD_LOGIC_VECTOR (15 downto 0);
    signal write_flag_0_fu_82 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag11_0_fu_86 : STD_LOGIC_VECTOR (0 downto 0);
    signal bias_buf2_05_fu_90 : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_buf_06_fu_94 : STD_LOGIC_VECTOR (15 downto 0);
    signal write_flag8_0_fu_98 : STD_LOGIC_VECTOR (0 downto 0);
    signal bias_buf16_07_fu_102 : STD_LOGIC_VECTOR (15 downto 0);
    signal write_flag4_0_fu_106 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component tiled_conv_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component tiled_conv_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    f_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln91_fu_215_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    f_fu_74 <= add_ln91_fu_221_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    f_fu_74 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    write_flag11_0_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    write_flag11_0_fu_86 <= ap_const_lv1_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln93_reg_375 = ap_const_lv2_3))) then 
                    write_flag11_0_fu_86 <= ap_const_lv1_1;
                end if;
            end if; 
        end if;
    end process;

    write_flag4_0_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    write_flag4_0_fu_106 <= ap_const_lv1_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln93_reg_375 = ap_const_lv2_1))) then 
                    write_flag4_0_fu_106 <= ap_const_lv1_1;
                end if;
            end if; 
        end if;
    end process;

    write_flag8_0_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    write_flag8_0_fu_98 <= ap_const_lv1_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln93_reg_375 = ap_const_lv2_2))) then 
                    write_flag8_0_fu_98 <= ap_const_lv1_1;
                end if;
            end if; 
        end if;
    end process;

    write_flag_0_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    write_flag_0_fu_82 <= ap_const_lv1_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln93_reg_375 = ap_const_lv2_0))) then 
                    write_flag_0_fu_82 <= ap_const_lv1_1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln93_reg_375 = ap_const_lv2_1))) then
                bias_buf16_07_fu_102 <= m_axi_wt_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln93_reg_375 = ap_const_lv2_2))) then
                bias_buf2_05_fu_90 <= m_axi_wt_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln93_reg_375 = ap_const_lv2_3))) then
                bias_buf3_04_fu_78 <= m_axi_wt_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln93_reg_375 = ap_const_lv2_0))) then
                bias_buf_06_fu_94 <= m_axi_wt_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln91_fu_215_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln93_reg_375 <= trunc_ln93_fu_227_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln91_fu_221_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_f_2) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_wt_RVALID)
    begin
                ap_block_pp0_stage0_01001 <= ((m_axi_wt_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_wt_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((m_axi_wt_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_wt_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((m_axi_wt_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(m_axi_wt_RVALID)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (m_axi_wt_RVALID = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln91_fu_215_p2)
    begin
        if (((icmp_ln91_fu_215_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_f_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, f_fu_74, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_f_2 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_f_2 <= f_fu_74;
        end if; 
    end process;

    bias_buf16_07_out <= bias_buf16_07_fu_102;

    bias_buf16_07_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln91_fu_215_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln91_fu_215_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bias_buf16_07_out_ap_vld <= ap_const_logic_1;
        else 
            bias_buf16_07_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    bias_buf2_05_out <= bias_buf2_05_fu_90;

    bias_buf2_05_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln91_fu_215_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln91_fu_215_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bias_buf2_05_out_ap_vld <= ap_const_logic_1;
        else 
            bias_buf2_05_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    bias_buf3_04_out <= bias_buf3_04_fu_78;

    bias_buf3_04_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln91_fu_215_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln91_fu_215_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bias_buf3_04_out_ap_vld <= ap_const_logic_1;
        else 
            bias_buf3_04_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    bias_buf_06_out <= bias_buf_06_fu_94;

    bias_buf_06_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln91_fu_215_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln91_fu_215_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bias_buf_06_out_ap_vld <= ap_const_logic_1;
        else 
            bias_buf_06_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln91_fu_215_p2 <= "1" when (ap_sig_allocacmp_f_2 = ap_const_lv3_4) else "0";
    m_axi_wt_ARADDR <= ap_const_lv64_0;
    m_axi_wt_ARBURST <= ap_const_lv2_0;
    m_axi_wt_ARCACHE <= ap_const_lv4_0;
    m_axi_wt_ARID <= ap_const_lv1_0;
    m_axi_wt_ARLEN <= ap_const_lv32_0;
    m_axi_wt_ARLOCK <= ap_const_lv2_0;
    m_axi_wt_ARPROT <= ap_const_lv3_0;
    m_axi_wt_ARQOS <= ap_const_lv4_0;
    m_axi_wt_ARREGION <= ap_const_lv4_0;
    m_axi_wt_ARSIZE <= ap_const_lv3_0;
    m_axi_wt_ARUSER <= ap_const_lv1_0;
    m_axi_wt_ARVALID <= ap_const_logic_0;
    m_axi_wt_AWADDR <= ap_const_lv64_0;
    m_axi_wt_AWBURST <= ap_const_lv2_0;
    m_axi_wt_AWCACHE <= ap_const_lv4_0;
    m_axi_wt_AWID <= ap_const_lv1_0;
    m_axi_wt_AWLEN <= ap_const_lv32_0;
    m_axi_wt_AWLOCK <= ap_const_lv2_0;
    m_axi_wt_AWPROT <= ap_const_lv3_0;
    m_axi_wt_AWQOS <= ap_const_lv4_0;
    m_axi_wt_AWREGION <= ap_const_lv4_0;
    m_axi_wt_AWSIZE <= ap_const_lv3_0;
    m_axi_wt_AWUSER <= ap_const_lv1_0;
    m_axi_wt_AWVALID <= ap_const_logic_0;
    m_axi_wt_BREADY <= ap_const_logic_0;

    m_axi_wt_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axi_wt_RREADY <= ap_const_logic_1;
        else 
            m_axi_wt_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_wt_WDATA <= ap_const_lv16_0;
    m_axi_wt_WID <= ap_const_lv1_0;
    m_axi_wt_WLAST <= ap_const_logic_0;
    m_axi_wt_WSTRB <= ap_const_lv2_0;
    m_axi_wt_WUSER <= ap_const_lv1_0;
    m_axi_wt_WVALID <= ap_const_logic_0;
    trunc_ln93_fu_227_p1 <= ap_sig_allocacmp_f_2(2 - 1 downto 0);
    write_flag11_0_out <= write_flag11_0_fu_86;

    write_flag11_0_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln91_fu_215_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln91_fu_215_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            write_flag11_0_out_ap_vld <= ap_const_logic_1;
        else 
            write_flag11_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    write_flag4_0_out <= write_flag4_0_fu_106;

    write_flag4_0_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln91_fu_215_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln91_fu_215_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            write_flag4_0_out_ap_vld <= ap_const_logic_1;
        else 
            write_flag4_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    write_flag8_0_out <= write_flag8_0_fu_98;

    write_flag8_0_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln91_fu_215_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln91_fu_215_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            write_flag8_0_out_ap_vld <= ap_const_logic_1;
        else 
            write_flag8_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    write_flag_0_out <= write_flag_0_fu_82;

    write_flag_0_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln91_fu_215_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln91_fu_215_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            write_flag_0_out_ap_vld <= ap_const_logic_1;
        else 
            write_flag_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    wt_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_wt_RVALID, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            wt_blk_n_R <= m_axi_wt_RVALID;
        else 
            wt_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

end behav;
