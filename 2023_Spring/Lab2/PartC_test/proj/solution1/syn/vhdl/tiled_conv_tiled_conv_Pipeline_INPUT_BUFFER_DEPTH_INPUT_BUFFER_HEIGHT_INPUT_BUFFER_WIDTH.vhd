-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tiled_conv_tiled_conv_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEIGHT_INPUT_BUFFER_WIDTH is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_fm_AWVALID : OUT STD_LOGIC;
    m_axi_fm_AWREADY : IN STD_LOGIC;
    m_axi_fm_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_fm_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fm_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fm_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fm_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_WVALID : OUT STD_LOGIC;
    m_axi_fm_WREADY : IN STD_LOGIC;
    m_axi_fm_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_fm_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_WLAST : OUT STD_LOGIC;
    m_axi_fm_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_ARVALID : OUT STD_LOGIC;
    m_axi_fm_ARREADY : IN STD_LOGIC;
    m_axi_fm_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_fm_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fm_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fm_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fm_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_RVALID : IN STD_LOGIC;
    m_axi_fm_RREADY : OUT STD_LOGIC;
    m_axi_fm_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_fm_RLAST : IN STD_LOGIC;
    m_axi_fm_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_RFIFONUM : IN STD_LOGIC_VECTOR (9 downto 0);
    m_axi_fm_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_BVALID : IN STD_LOGIC;
    m_axi_fm_BREADY : OUT STD_LOGIC;
    m_axi_fm_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    add_ln39 : IN STD_LOGIC_VECTOR (10 downto 0);
    input_feature_map : IN STD_LOGIC_VECTOR (63 downto 0);
    p_mid129 : IN STD_LOGIC_VECTOR (0 downto 0);
    conv_in_buf_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_in_buf_V_ce0 : OUT STD_LOGIC;
    conv_in_buf_V_we0 : OUT STD_LOGIC;
    conv_in_buf_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    conv_in_buf_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_in_buf_V_ce1 : OUT STD_LOGIC;
    conv_in_buf_V_we1 : OUT STD_LOGIC;
    conv_in_buf_V_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    conv_in_buf_V_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_in_buf_V_1_ce0 : OUT STD_LOGIC;
    conv_in_buf_V_1_we0 : OUT STD_LOGIC;
    conv_in_buf_V_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    conv_in_buf_V_1_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_in_buf_V_1_ce1 : OUT STD_LOGIC;
    conv_in_buf_V_1_we1 : OUT STD_LOGIC;
    conv_in_buf_V_1_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    conv_in_buf_V_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_in_buf_V_2_ce0 : OUT STD_LOGIC;
    conv_in_buf_V_2_we0 : OUT STD_LOGIC;
    conv_in_buf_V_2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    conv_in_buf_V_2_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_in_buf_V_2_ce1 : OUT STD_LOGIC;
    conv_in_buf_V_2_we1 : OUT STD_LOGIC;
    conv_in_buf_V_2_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    select_ln24_2 : IN STD_LOGIC_VECTOR (10 downto 0) );
end;


architecture behav of tiled_conv_tiled_conv_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEIGHT_INPUT_BUFFER_WIDTH is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv13_1C08 : STD_LOGIC_VECTOR (12 downto 0) := "1110000001000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv12_958 : STD_LOGIC_VECTOR (11 downto 0) := "100101011000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv11_2DF : STD_LOGIC_VECTOR (10 downto 0) := "01011011111";
    constant ap_const_lv6_2E : STD_LOGIC_VECTOR (5 downto 0) := "101110";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv7_7D : STD_LOGIC_VECTOR (6 downto 0) := "1111101";
    constant ap_const_lv23_1CC000 : STD_LOGIC_VECTOR (22 downto 0) := "00111001100000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv12_4FF : STD_LOGIC_VECTOR (11 downto 0) := "010011111111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv12_2E : STD_LOGIC_VECTOR (11 downto 0) := "000000101110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal or_ln46_reg_731 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln46_reg_731_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal or_ln46_reg_731_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln34_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal fm_blk_n_AR : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal fm_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln24_2_cast_fu_226_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln24_2_cast_reg_650 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln34_reg_655 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_659 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_659_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_669 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_1_fu_343_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_1_reg_674 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_1_reg_674_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_1_reg_674_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_1_reg_674_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_1_reg_674_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_1_reg_674_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_1_reg_674_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_1_reg_674_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_1_reg_674_pp0_iter9_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_1_reg_674_pp0_iter10_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_1_reg_674_pp0_iter11_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln34_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_reg_679 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln37_fu_384_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln37_reg_684 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln37_1_fu_392_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln37_1_reg_689 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_mid16_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_mid16_reg_694 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln37_3_fu_415_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln37_3_reg_699 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln46_fu_437_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln46_reg_705 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln34_fu_466_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln34_reg_711 : STD_LOGIC_VECTOR (22 downto 0);
    signal conv_in_buf_V_addr_reg_716 : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_in_buf_V_addr_reg_716_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_in_buf_V_addr_reg_716_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_in_buf_V_addr_reg_716_pp0_iter5_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_in_buf_V_addr_reg_716_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_in_buf_V_addr_reg_716_pp0_iter7_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_in_buf_V_addr_reg_716_pp0_iter8_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_in_buf_V_addr_reg_716_pp0_iter9_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_in_buf_V_addr_reg_716_pp0_iter10_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_in_buf_V_addr_reg_716_pp0_iter11_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_in_buf_V_1_addr_reg_721 : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_in_buf_V_1_addr_reg_721_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_in_buf_V_1_addr_reg_721_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_in_buf_V_1_addr_reg_721_pp0_iter5_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_in_buf_V_1_addr_reg_721_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_in_buf_V_1_addr_reg_721_pp0_iter7_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_in_buf_V_1_addr_reg_721_pp0_iter8_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_in_buf_V_1_addr_reg_721_pp0_iter9_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_in_buf_V_1_addr_reg_721_pp0_iter10_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_in_buf_V_1_addr_reg_721_pp0_iter11_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_in_buf_V_2_addr_reg_726 : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_in_buf_V_2_addr_reg_726_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_in_buf_V_2_addr_reg_726_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_in_buf_V_2_addr_reg_726_pp0_iter5_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_in_buf_V_2_addr_reg_726_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_in_buf_V_2_addr_reg_726_pp0_iter7_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_in_buf_V_2_addr_reg_726_pp0_iter8_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_in_buf_V_2_addr_reg_726_pp0_iter9_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_in_buf_V_2_addr_reg_726_pp0_iter10_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_in_buf_V_2_addr_reg_726_pp0_iter11_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln46_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln46_reg_731_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln46_reg_731_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln46_reg_731_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln46_reg_731_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln46_reg_731_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln46_reg_731_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln46_reg_731_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln49_1_fu_545_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln49_1_reg_735 : STD_LOGIC_VECTOR (22 downto 0);
    signal fm_addr_reg_740 : STD_LOGIC_VECTOR (63 downto 0);
    signal fm_addr_read_reg_746 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal zext_ln47_2_fu_511_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln49_fu_578_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_116 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln42_fu_442_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_120 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten_fu_124 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln37_4_fu_288_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load_1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (11 downto 0);
    signal c_fu_128 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten41_fu_132 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln34_2_fu_264_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_allocacmp_indvar_flatten41_load : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln37_1_fu_282_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln37_fu_309_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln39_1_fu_313_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln34_fu_330_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln42_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln34_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_fu_336_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln37_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln37_fu_373_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln37_1_fu_400_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln39_2_fu_404_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln34_3_fu_350_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln44_fu_423_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln46_1_fu_427_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln46_fu_433_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln34_fu_466_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln34_fu_466_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal select_ln34_2_fu_472_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln49_1_mid2_v_fu_486_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln42_mid2_v_fu_497_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_588_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln46_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln37_2_fu_480_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_528_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln37_fu_493_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln49_fu_535_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln49_fu_539_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln42_mid2_v_cast_fu_504_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln34_1_fu_551_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln49_1_fu_559_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln34_1_fu_554_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln49_2_fu_562_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_568_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_588_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_588_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_588_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_588_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_588_p20 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln34_fu_466_p00 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component tiled_conv_mul_2ns_22ns_23_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component tiled_conv_mac_muladd_6ns_6ns_6ns_12_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component tiled_conv_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_2ns_22ns_23_1_1_U1 : component tiled_conv_mul_2ns_22ns_23_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 22,
        dout_WIDTH => 23)
    port map (
        din0 => mul_ln34_fu_466_p0,
        din1 => mul_ln34_fu_466_p1,
        dout => mul_ln34_fu_466_p2);

    mac_muladd_6ns_6ns_6ns_12_1_1_U2 : component tiled_conv_mac_muladd_6ns_6ns_6ns_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        dout_WIDTH => 12)
    port map (
        din0 => grp_fu_588_p0,
        din1 => grp_fu_588_p1,
        din2 => grp_fu_588_p2,
        dout => grp_fu_588_p3);

    flow_control_loop_pipe_sequential_init_U : component tiled_conv_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter11_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    c_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    c_fu_128 <= ap_const_lv2_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln34_reg_655 = ap_const_lv1_0))) then 
                    c_fu_128 <= select_ln34_1_fu_343_p3;
                end if;
            end if; 
        end if;
    end process;

    i_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_120 <= ap_const_lv6_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln34_reg_655 = ap_const_lv1_0))) then 
                    i_fu_120 <= select_ln37_1_fu_392_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten41_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln34_fu_258_p2 = ap_const_lv1_0))) then 
                    indvar_flatten41_fu_132 <= add_ln34_2_fu_264_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten41_fu_132 <= ap_const_lv13_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln34_fu_258_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_124 <= select_ln37_4_fu_288_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_124 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_116 <= ap_const_lv6_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln34_reg_655 = ap_const_lv1_0))) then 
                    j_fu_116 <= add_ln42_fu_442_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_655 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln46_reg_705 <= add_ln46_fu_437_p2;
                and_ln34_reg_679 <= and_ln34_fu_367_p2;
                p_mid16_reg_694 <= p_mid16_fu_409_p2;
                select_ln34_1_reg_674 <= select_ln34_1_fu_343_p3;
                select_ln37_1_reg_689 <= select_ln37_1_fu_392_p3;
                select_ln37_3_reg_699 <= select_ln37_3_fu_415_p3;
                select_ln37_reg_684 <= select_ln37_fu_384_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln46_fu_522_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    add_ln49_1_reg_735(22 downto 1) <= add_ln49_1_fu_545_p2(22 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                conv_in_buf_V_1_addr_reg_721 <= zext_ln47_2_fu_511_p1(12 - 1 downto 0);
                conv_in_buf_V_1_addr_reg_721_pp0_iter10_reg <= conv_in_buf_V_1_addr_reg_721_pp0_iter9_reg;
                conv_in_buf_V_1_addr_reg_721_pp0_iter11_reg <= conv_in_buf_V_1_addr_reg_721_pp0_iter10_reg;
                conv_in_buf_V_1_addr_reg_721_pp0_iter3_reg <= conv_in_buf_V_1_addr_reg_721;
                conv_in_buf_V_1_addr_reg_721_pp0_iter4_reg <= conv_in_buf_V_1_addr_reg_721_pp0_iter3_reg;
                conv_in_buf_V_1_addr_reg_721_pp0_iter5_reg <= conv_in_buf_V_1_addr_reg_721_pp0_iter4_reg;
                conv_in_buf_V_1_addr_reg_721_pp0_iter6_reg <= conv_in_buf_V_1_addr_reg_721_pp0_iter5_reg;
                conv_in_buf_V_1_addr_reg_721_pp0_iter7_reg <= conv_in_buf_V_1_addr_reg_721_pp0_iter6_reg;
                conv_in_buf_V_1_addr_reg_721_pp0_iter8_reg <= conv_in_buf_V_1_addr_reg_721_pp0_iter7_reg;
                conv_in_buf_V_1_addr_reg_721_pp0_iter9_reg <= conv_in_buf_V_1_addr_reg_721_pp0_iter8_reg;
                conv_in_buf_V_2_addr_reg_726 <= zext_ln47_2_fu_511_p1(12 - 1 downto 0);
                conv_in_buf_V_2_addr_reg_726_pp0_iter10_reg <= conv_in_buf_V_2_addr_reg_726_pp0_iter9_reg;
                conv_in_buf_V_2_addr_reg_726_pp0_iter11_reg <= conv_in_buf_V_2_addr_reg_726_pp0_iter10_reg;
                conv_in_buf_V_2_addr_reg_726_pp0_iter3_reg <= conv_in_buf_V_2_addr_reg_726;
                conv_in_buf_V_2_addr_reg_726_pp0_iter4_reg <= conv_in_buf_V_2_addr_reg_726_pp0_iter3_reg;
                conv_in_buf_V_2_addr_reg_726_pp0_iter5_reg <= conv_in_buf_V_2_addr_reg_726_pp0_iter4_reg;
                conv_in_buf_V_2_addr_reg_726_pp0_iter6_reg <= conv_in_buf_V_2_addr_reg_726_pp0_iter5_reg;
                conv_in_buf_V_2_addr_reg_726_pp0_iter7_reg <= conv_in_buf_V_2_addr_reg_726_pp0_iter6_reg;
                conv_in_buf_V_2_addr_reg_726_pp0_iter8_reg <= conv_in_buf_V_2_addr_reg_726_pp0_iter7_reg;
                conv_in_buf_V_2_addr_reg_726_pp0_iter9_reg <= conv_in_buf_V_2_addr_reg_726_pp0_iter8_reg;
                conv_in_buf_V_addr_reg_716 <= zext_ln47_2_fu_511_p1(12 - 1 downto 0);
                conv_in_buf_V_addr_reg_716_pp0_iter10_reg <= conv_in_buf_V_addr_reg_716_pp0_iter9_reg;
                conv_in_buf_V_addr_reg_716_pp0_iter11_reg <= conv_in_buf_V_addr_reg_716_pp0_iter10_reg;
                conv_in_buf_V_addr_reg_716_pp0_iter3_reg <= conv_in_buf_V_addr_reg_716;
                conv_in_buf_V_addr_reg_716_pp0_iter4_reg <= conv_in_buf_V_addr_reg_716_pp0_iter3_reg;
                conv_in_buf_V_addr_reg_716_pp0_iter5_reg <= conv_in_buf_V_addr_reg_716_pp0_iter4_reg;
                conv_in_buf_V_addr_reg_716_pp0_iter6_reg <= conv_in_buf_V_addr_reg_716_pp0_iter5_reg;
                conv_in_buf_V_addr_reg_716_pp0_iter7_reg <= conv_in_buf_V_addr_reg_716_pp0_iter6_reg;
                conv_in_buf_V_addr_reg_716_pp0_iter8_reg <= conv_in_buf_V_addr_reg_716_pp0_iter7_reg;
                conv_in_buf_V_addr_reg_716_pp0_iter9_reg <= conv_in_buf_V_addr_reg_716_pp0_iter8_reg;
                mul_ln34_reg_711 <= mul_ln34_fu_466_p2;
                or_ln46_reg_731 <= or_ln46_fu_522_p2;
                or_ln46_reg_731_pp0_iter10_reg <= or_ln46_reg_731_pp0_iter9_reg;
                or_ln46_reg_731_pp0_iter11_reg <= or_ln46_reg_731_pp0_iter10_reg;
                or_ln46_reg_731_pp0_iter3_reg <= or_ln46_reg_731;
                or_ln46_reg_731_pp0_iter4_reg <= or_ln46_reg_731_pp0_iter3_reg;
                or_ln46_reg_731_pp0_iter5_reg <= or_ln46_reg_731_pp0_iter4_reg;
                or_ln46_reg_731_pp0_iter6_reg <= or_ln46_reg_731_pp0_iter5_reg;
                or_ln46_reg_731_pp0_iter7_reg <= or_ln46_reg_731_pp0_iter6_reg;
                or_ln46_reg_731_pp0_iter8_reg <= or_ln46_reg_731_pp0_iter7_reg;
                or_ln46_reg_731_pp0_iter9_reg <= or_ln46_reg_731_pp0_iter8_reg;
                select_ln34_1_reg_674_pp0_iter10_reg <= select_ln34_1_reg_674_pp0_iter9_reg;
                select_ln34_1_reg_674_pp0_iter11_reg <= select_ln34_1_reg_674_pp0_iter10_reg;
                select_ln34_1_reg_674_pp0_iter2_reg <= select_ln34_1_reg_674;
                select_ln34_1_reg_674_pp0_iter3_reg <= select_ln34_1_reg_674_pp0_iter2_reg;
                select_ln34_1_reg_674_pp0_iter4_reg <= select_ln34_1_reg_674_pp0_iter3_reg;
                select_ln34_1_reg_674_pp0_iter5_reg <= select_ln34_1_reg_674_pp0_iter4_reg;
                select_ln34_1_reg_674_pp0_iter6_reg <= select_ln34_1_reg_674_pp0_iter5_reg;
                select_ln34_1_reg_674_pp0_iter7_reg <= select_ln34_1_reg_674_pp0_iter6_reg;
                select_ln34_1_reg_674_pp0_iter8_reg <= select_ln34_1_reg_674_pp0_iter7_reg;
                select_ln34_1_reg_674_pp0_iter9_reg <= select_ln34_1_reg_674_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln34_reg_655 <= icmp_ln34_fu_258_p2;
                icmp_ln37_reg_659_pp0_iter1_reg <= icmp_ln37_reg_659;
                    select_ln24_2_cast_reg_650(10 downto 0) <= select_ln24_2_cast_fu_226_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln37_reg_659 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_reg_669 <= empty_fu_318_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln46_reg_731_pp0_iter10_reg = ap_const_lv1_0))) then
                fm_addr_read_reg_746 <= m_axi_fm_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln46_reg_731 = ap_const_lv1_0))) then
                fm_addr_reg_740 <= sext_ln49_fu_578_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln34_fu_258_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln37_reg_659 <= icmp_ln37_fu_273_p2;
            end if;
        end if;
    end process;
    select_ln24_2_cast_reg_650(11) <= '0';
    add_ln49_1_reg_735(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln34_1_fu_554_p2 <= std_logic_vector(unsigned(zext_ln34_1_fu_551_p1) + unsigned(input_feature_map));
    add_ln34_2_fu_264_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten41_load) + unsigned(ap_const_lv13_1));
    add_ln34_fu_330_p2 <= std_logic_vector(unsigned(c_fu_128) + unsigned(ap_const_lv2_1));
    add_ln37_1_fu_282_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv12_1));
    add_ln37_fu_373_p2 <= std_logic_vector(unsigned(select_ln34_fu_336_p3) + unsigned(ap_const_lv6_1));
    add_ln39_1_fu_313_p2 <= std_logic_vector(unsigned(add_ln39) + unsigned(zext_ln37_fu_309_p1));
    add_ln39_2_fu_404_p2 <= std_logic_vector(unsigned(add_ln39) + unsigned(zext_ln37_1_fu_400_p1));
    add_ln42_fu_442_p2 <= std_logic_vector(unsigned(select_ln37_fu_384_p3) + unsigned(ap_const_lv6_1));
    add_ln46_1_fu_427_p2 <= std_logic_vector(unsigned(zext_ln44_fu_423_p1) + unsigned(ap_const_lv7_7D));
    add_ln46_fu_437_p2 <= std_logic_vector(signed(sext_ln46_fu_433_p1) + signed(select_ln24_2_cast_reg_650));
    add_ln49_1_fu_545_p2 <= std_logic_vector(unsigned(add_ln49_fu_539_p2) + unsigned(sext_ln42_mid2_v_cast_fu_504_p1));
    add_ln49_2_fu_562_p2 <= std_logic_vector(signed(sext_ln49_1_fu_559_p1) + signed(add_ln34_1_fu_554_p2));
    add_ln49_fu_539_p2 <= std_logic_vector(signed(sext_ln37_fu_493_p1) + signed(zext_ln49_fu_535_p1));
    and_ln34_fu_367_p2 <= (xor_ln34_fu_356_p2 and icmp_ln42_fu_361_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter11, m_axi_fm_RVALID, ap_block_state5_io, or_ln46_reg_731_pp0_iter10_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (or_ln46_reg_731_pp0_iter10_reg = ap_const_lv1_0) and (m_axi_fm_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter11, m_axi_fm_RVALID, ap_block_state5_io, or_ln46_reg_731_pp0_iter10_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (or_ln46_reg_731_pp0_iter10_reg = ap_const_lv1_0) and (m_axi_fm_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_pp0_stage0_iter11_assign_proc : process(m_axi_fm_RVALID, or_ln46_reg_731_pp0_iter10_reg)
    begin
                ap_block_state12_pp0_stage0_iter11 <= ((or_ln46_reg_731_pp0_iter10_reg = ap_const_lv1_0) and (m_axi_fm_RVALID = ap_const_logic_0));
    end process;

        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(m_axi_fm_ARREADY, or_ln46_reg_731_pp0_iter3_reg)
    begin
                ap_block_state5_io <= ((m_axi_fm_ARREADY = ap_const_logic_0) and (or_ln46_reg_731_pp0_iter3_reg = ap_const_lv1_0));
    end process;

        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln34_fu_258_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln34_fu_258_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln34_reg_655)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln34_reg_655 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter11_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter11_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten41_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten41_fu_132)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten41_load <= ap_const_lv13_0;
        else 
            ap_sig_allocacmp_indvar_flatten41_load <= indvar_flatten41_fu_132;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_124)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv12_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_124;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_124)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load_1 <= ap_const_lv12_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load_1 <= indvar_flatten_fu_124;
        end if; 
    end process;

    conv_in_buf_V_1_address0 <= conv_in_buf_V_1_addr_reg_721_pp0_iter11_reg;
    conv_in_buf_V_1_address1 <= zext_ln47_2_fu_511_p1(12 - 1 downto 0);

    conv_in_buf_V_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_in_buf_V_1_ce0 <= ap_const_logic_1;
        else 
            conv_in_buf_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_in_buf_V_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_in_buf_V_1_ce1 <= ap_const_logic_1;
        else 
            conv_in_buf_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv_in_buf_V_1_d0 <= fm_addr_read_reg_746;
    conv_in_buf_V_1_d1 <= ap_const_lv16_0;

    conv_in_buf_V_1_we0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001, select_ln34_1_reg_674_pp0_iter11_reg, or_ln46_reg_731_pp0_iter11_reg)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (or_ln46_reg_731_pp0_iter11_reg = ap_const_lv1_0) and (select_ln34_1_reg_674_pp0_iter11_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_in_buf_V_1_we0 <= ap_const_logic_1;
        else 
            conv_in_buf_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_in_buf_V_1_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, select_ln34_1_reg_674, or_ln46_fu_522_p2)
    begin
        if (((or_ln46_fu_522_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln34_1_reg_674 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_in_buf_V_1_we1 <= ap_const_logic_1;
        else 
            conv_in_buf_V_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    conv_in_buf_V_2_address0 <= conv_in_buf_V_2_addr_reg_726_pp0_iter11_reg;
    conv_in_buf_V_2_address1 <= zext_ln47_2_fu_511_p1(12 - 1 downto 0);

    conv_in_buf_V_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_in_buf_V_2_ce0 <= ap_const_logic_1;
        else 
            conv_in_buf_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_in_buf_V_2_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_in_buf_V_2_ce1 <= ap_const_logic_1;
        else 
            conv_in_buf_V_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv_in_buf_V_2_d0 <= fm_addr_read_reg_746;
    conv_in_buf_V_2_d1 <= ap_const_lv16_0;

    conv_in_buf_V_2_we0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001, select_ln34_1_reg_674_pp0_iter11_reg, or_ln46_reg_731_pp0_iter11_reg)
    begin
        if ((not((select_ln34_1_reg_674_pp0_iter11_reg = ap_const_lv2_0)) and not((select_ln34_1_reg_674_pp0_iter11_reg = ap_const_lv2_1)) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (or_ln46_reg_731_pp0_iter11_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_in_buf_V_2_we0 <= ap_const_logic_1;
        else 
            conv_in_buf_V_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_in_buf_V_2_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, select_ln34_1_reg_674, or_ln46_fu_522_p2)
    begin
        if ((not((select_ln34_1_reg_674 = ap_const_lv2_0)) and not((select_ln34_1_reg_674 = ap_const_lv2_1)) and (or_ln46_fu_522_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_in_buf_V_2_we1 <= ap_const_logic_1;
        else 
            conv_in_buf_V_2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    conv_in_buf_V_address0 <= conv_in_buf_V_addr_reg_716_pp0_iter11_reg;
    conv_in_buf_V_address1 <= zext_ln47_2_fu_511_p1(12 - 1 downto 0);

    conv_in_buf_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_in_buf_V_ce0 <= ap_const_logic_1;
        else 
            conv_in_buf_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_in_buf_V_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_in_buf_V_ce1 <= ap_const_logic_1;
        else 
            conv_in_buf_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv_in_buf_V_d0 <= fm_addr_read_reg_746;
    conv_in_buf_V_d1 <= ap_const_lv16_0;

    conv_in_buf_V_we0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001, select_ln34_1_reg_674_pp0_iter11_reg, or_ln46_reg_731_pp0_iter11_reg)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (or_ln46_reg_731_pp0_iter11_reg = ap_const_lv1_0) and (select_ln34_1_reg_674_pp0_iter11_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_in_buf_V_we0 <= ap_const_logic_1;
        else 
            conv_in_buf_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_in_buf_V_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, select_ln34_1_reg_674, or_ln46_fu_522_p2)
    begin
        if (((or_ln46_fu_522_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln34_1_reg_674 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_in_buf_V_we1 <= ap_const_logic_1;
        else 
            conv_in_buf_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_318_p2 <= "1" when (unsigned(add_ln39_1_fu_313_p2) > unsigned(ap_const_lv11_2DF)) else "0";

    fm_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter4, m_axi_fm_ARREADY, or_ln46_reg_731_pp0_iter3_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (or_ln46_reg_731_pp0_iter3_reg = ap_const_lv1_0))) then 
            fm_blk_n_AR <= m_axi_fm_ARREADY;
        else 
            fm_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    fm_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter11, m_axi_fm_RVALID, or_ln46_reg_731_pp0_iter10_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (or_ln46_reg_731_pp0_iter10_reg = ap_const_lv1_0))) then 
            fm_blk_n_R <= m_axi_fm_RVALID;
        else 
            fm_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_588_p0 <= grp_fu_588_p00(6 - 1 downto 0);
    grp_fu_588_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln37_1_reg_689),12));
    grp_fu_588_p1 <= ap_const_lv12_2E(6 - 1 downto 0);
    grp_fu_588_p2 <= grp_fu_588_p20(6 - 1 downto 0);
    grp_fu_588_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln37_reg_684),12));
    icmp_ln34_fu_258_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten41_load = ap_const_lv13_1C08) else "0";
    icmp_ln37_fu_273_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load_1 = ap_const_lv12_958) else "0";
    icmp_ln42_fu_361_p2 <= "1" when (j_fu_116 = ap_const_lv6_2E) else "0";
    icmp_ln46_fu_517_p2 <= "1" when (unsigned(add_ln46_reg_705) > unsigned(ap_const_lv12_4FF)) else "0";
    m_axi_fm_ARADDR <= fm_addr_reg_740;
    m_axi_fm_ARBURST <= ap_const_lv2_0;
    m_axi_fm_ARCACHE <= ap_const_lv4_0;
    m_axi_fm_ARID <= ap_const_lv1_0;
    m_axi_fm_ARLEN <= ap_const_lv32_1;
    m_axi_fm_ARLOCK <= ap_const_lv2_0;
    m_axi_fm_ARPROT <= ap_const_lv3_0;
    m_axi_fm_ARQOS <= ap_const_lv4_0;
    m_axi_fm_ARREGION <= ap_const_lv4_0;
    m_axi_fm_ARSIZE <= ap_const_lv3_0;
    m_axi_fm_ARUSER <= ap_const_lv1_0;

    m_axi_fm_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter4, or_ln46_reg_731_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln46_reg_731_pp0_iter3_reg = ap_const_lv1_0))) then 
            m_axi_fm_ARVALID <= ap_const_logic_1;
        else 
            m_axi_fm_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_fm_AWADDR <= ap_const_lv64_0;
    m_axi_fm_AWBURST <= ap_const_lv2_0;
    m_axi_fm_AWCACHE <= ap_const_lv4_0;
    m_axi_fm_AWID <= ap_const_lv1_0;
    m_axi_fm_AWLEN <= ap_const_lv32_0;
    m_axi_fm_AWLOCK <= ap_const_lv2_0;
    m_axi_fm_AWPROT <= ap_const_lv3_0;
    m_axi_fm_AWQOS <= ap_const_lv4_0;
    m_axi_fm_AWREGION <= ap_const_lv4_0;
    m_axi_fm_AWSIZE <= ap_const_lv3_0;
    m_axi_fm_AWUSER <= ap_const_lv1_0;
    m_axi_fm_AWVALID <= ap_const_logic_0;
    m_axi_fm_BREADY <= ap_const_logic_0;

    m_axi_fm_RREADY_assign_proc : process(ap_enable_reg_pp0_iter11, or_ln46_reg_731_pp0_iter10_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln46_reg_731_pp0_iter10_reg = ap_const_lv1_0))) then 
            m_axi_fm_RREADY <= ap_const_logic_1;
        else 
            m_axi_fm_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_fm_WDATA <= ap_const_lv16_0;
    m_axi_fm_WID <= ap_const_lv1_0;
    m_axi_fm_WLAST <= ap_const_logic_0;
    m_axi_fm_WSTRB <= ap_const_lv2_0;
    m_axi_fm_WUSER <= ap_const_lv1_0;
    m_axi_fm_WVALID <= ap_const_logic_0;
    mul_ln34_fu_466_p0 <= mul_ln34_fu_466_p00(2 - 1 downto 0);
    mul_ln34_fu_466_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln34_1_reg_674),23));
    mul_ln34_fu_466_p1 <= ap_const_lv23_1CC000(22 - 1 downto 0);
    or_ln37_fu_379_p2 <= (icmp_ln37_reg_659 or and_ln34_fu_367_p2);
    or_ln46_fu_522_p2 <= (select_ln37_2_fu_480_p3 or icmp_ln46_fu_517_p2);
    p_mid16_fu_409_p2 <= "1" when (unsigned(add_ln39_2_fu_404_p2) > unsigned(ap_const_lv11_2DF)) else "0";
    select_ln24_2_cast_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_2),12));
    select_ln34_1_fu_343_p3 <= 
        add_ln34_fu_330_p2 when (icmp_ln37_reg_659(0) = '1') else 
        c_fu_128;
    select_ln34_2_fu_472_p3 <= 
        p_mid129 when (icmp_ln37_reg_659_pp0_iter1_reg(0) = '1') else 
        empty_reg_669;
    select_ln34_3_fu_350_p3 <= 
        add_ln39 when (icmp_ln37_reg_659(0) = '1') else 
        add_ln39_1_fu_313_p2;
    select_ln34_fu_336_p3 <= 
        ap_const_lv6_0 when (icmp_ln37_reg_659(0) = '1') else 
        i_fu_120;
    select_ln37_1_fu_392_p3 <= 
        add_ln37_fu_373_p2 when (and_ln34_fu_367_p2(0) = '1') else 
        select_ln34_fu_336_p3;
    select_ln37_2_fu_480_p3 <= 
        p_mid16_reg_694 when (and_ln34_reg_679(0) = '1') else 
        select_ln34_2_fu_472_p3;
    select_ln37_3_fu_415_p3 <= 
        add_ln39_2_fu_404_p2 when (and_ln34_fu_367_p2(0) = '1') else 
        select_ln34_3_fu_350_p3;
    select_ln37_4_fu_288_p3 <= 
        ap_const_lv12_1 when (icmp_ln37_fu_273_p2(0) = '1') else 
        add_ln37_1_fu_282_p2;
    select_ln37_fu_384_p3 <= 
        ap_const_lv6_0 when (or_ln37_fu_379_p2(0) = '1') else 
        j_fu_116;
        sext_ln37_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln49_1_mid2_v_fu_486_p3),23));

        sext_ln42_mid2_v_cast_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln42_mid2_v_fu_497_p3),23));

    sext_ln42_mid2_v_fu_497_p3 <= (select_ln37_3_reg_699 & ap_const_lv9_0);
        sext_ln46_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln46_1_fu_427_p2),12));

        sext_ln49_1_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln49_1_reg_735),64));

    sext_ln49_1_mid2_v_fu_486_p3 <= (select_ln37_3_reg_699 & ap_const_lv11_0);
        sext_ln49_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_568_p4),64));

    tmp_s_fu_528_p3 <= (add_ln46_reg_705 & ap_const_lv1_0);
    trunc_ln_fu_568_p4 <= add_ln49_2_fu_562_p2(63 downto 1);
    xor_ln34_fu_356_p2 <= (icmp_ln37_reg_659 xor ap_const_lv1_1);
    zext_ln34_1_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln34_reg_711),64));
    zext_ln37_1_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln37_fu_373_p2),11));
    zext_ln37_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_120),11));
    zext_ln44_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln37_fu_384_p3),7));
    zext_ln47_2_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_588_p3),64));
    zext_ln49_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_528_p3),23));
end behav;
