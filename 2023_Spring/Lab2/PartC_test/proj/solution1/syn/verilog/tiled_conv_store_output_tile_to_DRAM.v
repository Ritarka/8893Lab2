// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2.2 (64-bit)
// Version: 2020.2.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tiled_conv_store_output_tile_to_DRAM (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_fm_AWVALID,
        m_axi_fm_AWREADY,
        m_axi_fm_AWADDR,
        m_axi_fm_AWID,
        m_axi_fm_AWLEN,
        m_axi_fm_AWSIZE,
        m_axi_fm_AWBURST,
        m_axi_fm_AWLOCK,
        m_axi_fm_AWCACHE,
        m_axi_fm_AWPROT,
        m_axi_fm_AWQOS,
        m_axi_fm_AWREGION,
        m_axi_fm_AWUSER,
        m_axi_fm_WVALID,
        m_axi_fm_WREADY,
        m_axi_fm_WDATA,
        m_axi_fm_WSTRB,
        m_axi_fm_WLAST,
        m_axi_fm_WID,
        m_axi_fm_WUSER,
        m_axi_fm_ARVALID,
        m_axi_fm_ARREADY,
        m_axi_fm_ARADDR,
        m_axi_fm_ARID,
        m_axi_fm_ARLEN,
        m_axi_fm_ARSIZE,
        m_axi_fm_ARBURST,
        m_axi_fm_ARLOCK,
        m_axi_fm_ARCACHE,
        m_axi_fm_ARPROT,
        m_axi_fm_ARQOS,
        m_axi_fm_ARREGION,
        m_axi_fm_ARUSER,
        m_axi_fm_RVALID,
        m_axi_fm_RREADY,
        m_axi_fm_RDATA,
        m_axi_fm_RLAST,
        m_axi_fm_RID,
        m_axi_fm_RUSER,
        m_axi_fm_RRESP,
        m_axi_fm_BVALID,
        m_axi_fm_BREADY,
        m_axi_fm_BRESP,
        m_axi_fm_BID,
        m_axi_fm_BUSER,
        out_fm,
        out_fm_buf_V_address0,
        out_fm_buf_V_ce0,
        out_fm_buf_V_q0,
        out_fm_buf_1_V_address0,
        out_fm_buf_1_V_ce0,
        out_fm_buf_1_V_q0,
        out_fm_buf_2_V_address0,
        out_fm_buf_2_V_ce0,
        out_fm_buf_2_V_q0,
        out_fm_buf_3_V_address0,
        out_fm_buf_3_V_ce0,
        out_fm_buf_3_V_q0,
        ti,
        tj,
        kernel_group
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state12 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_fm_AWVALID;
input   m_axi_fm_AWREADY;
output  [63:0] m_axi_fm_AWADDR;
output  [0:0] m_axi_fm_AWID;
output  [31:0] m_axi_fm_AWLEN;
output  [2:0] m_axi_fm_AWSIZE;
output  [1:0] m_axi_fm_AWBURST;
output  [1:0] m_axi_fm_AWLOCK;
output  [3:0] m_axi_fm_AWCACHE;
output  [2:0] m_axi_fm_AWPROT;
output  [3:0] m_axi_fm_AWQOS;
output  [3:0] m_axi_fm_AWREGION;
output  [0:0] m_axi_fm_AWUSER;
output   m_axi_fm_WVALID;
input   m_axi_fm_WREADY;
output  [15:0] m_axi_fm_WDATA;
output  [1:0] m_axi_fm_WSTRB;
output   m_axi_fm_WLAST;
output  [0:0] m_axi_fm_WID;
output  [0:0] m_axi_fm_WUSER;
output   m_axi_fm_ARVALID;
input   m_axi_fm_ARREADY;
output  [63:0] m_axi_fm_ARADDR;
output  [0:0] m_axi_fm_ARID;
output  [31:0] m_axi_fm_ARLEN;
output  [2:0] m_axi_fm_ARSIZE;
output  [1:0] m_axi_fm_ARBURST;
output  [1:0] m_axi_fm_ARLOCK;
output  [3:0] m_axi_fm_ARCACHE;
output  [2:0] m_axi_fm_ARPROT;
output  [3:0] m_axi_fm_ARQOS;
output  [3:0] m_axi_fm_ARREGION;
output  [0:0] m_axi_fm_ARUSER;
input   m_axi_fm_RVALID;
output   m_axi_fm_RREADY;
input  [15:0] m_axi_fm_RDATA;
input   m_axi_fm_RLAST;
input  [0:0] m_axi_fm_RID;
input  [0:0] m_axi_fm_RUSER;
input  [1:0] m_axi_fm_RRESP;
input   m_axi_fm_BVALID;
output   m_axi_fm_BREADY;
input  [1:0] m_axi_fm_BRESP;
input  [0:0] m_axi_fm_BID;
input  [0:0] m_axi_fm_BUSER;
input  [63:0] out_fm;
output  [8:0] out_fm_buf_V_address0;
output   out_fm_buf_V_ce0;
input  [15:0] out_fm_buf_V_q0;
output  [8:0] out_fm_buf_1_V_address0;
output   out_fm_buf_1_V_ce0;
input  [15:0] out_fm_buf_1_V_q0;
output  [8:0] out_fm_buf_2_V_address0;
output   out_fm_buf_2_V_ce0;
input  [15:0] out_fm_buf_2_V_q0;
output  [8:0] out_fm_buf_3_V_address0;
output   out_fm_buf_3_V_ce0;
input  [15:0] out_fm_buf_3_V_q0;
input  [3:0] ti;
input  [4:0] tj;
input  [3:0] kernel_group;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_fm_AWVALID;
reg m_axi_fm_WVALID;
reg m_axi_fm_BREADY;
reg out_fm_buf_V_ce0;
reg out_fm_buf_1_V_ce0;
reg out_fm_buf_2_V_ce0;
reg out_fm_buf_3_V_ce0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    fm_blk_n_AW;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln119_reg_760;
reg   [0:0] icmp_ln119_reg_760_pp0_iter2_reg;
reg    fm_blk_n_W;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] icmp_ln119_reg_760_pp0_iter3_reg;
reg    fm_blk_n_B;
reg    ap_enable_reg_pp0_iter9;
reg   [0:0] icmp_ln119_reg_760_pp0_iter8_reg;
reg   [10:0] indvar_flatten35_reg_238;
reg   [2:0] f_reg_249;
reg   [9:0] indvar_flatten_reg_260;
reg   [4:0] i_reg_271;
reg   [4:0] j_reg_282;
wire   [5:0] depth_offset_fu_297_p3;
reg   [5:0] depth_offset_reg_734;
wire   [8:0] height_offset_fu_311_p4;
reg   [8:0] height_offset_reg_739;
reg   [9:0] width_offset_reg_745;
wire   [18:0] add_ln134_4_fu_381_p2;
reg   [18:0] add_ln134_4_reg_750;
wire   [10:0] add_ln119_2_fu_387_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_state5_io;
wire    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_state6_io;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
reg    ap_block_state11_pp0_stage0_iter9;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln119_fu_393_p2;
reg   [0:0] icmp_ln119_reg_760_pp0_iter1_reg;
reg   [0:0] icmp_ln119_reg_760_pp0_iter4_reg;
reg   [0:0] icmp_ln119_reg_760_pp0_iter5_reg;
reg   [0:0] icmp_ln119_reg_760_pp0_iter6_reg;
reg   [0:0] icmp_ln119_reg_760_pp0_iter7_reg;
wire   [0:0] icmp_ln122_fu_405_p2;
reg   [0:0] icmp_ln122_reg_764;
reg   [0:0] icmp_ln122_reg_764_pp0_iter1_reg;
wire   [2:0] select_ln119_1_fu_411_p3;
reg   [2:0] select_ln119_1_reg_772;
wire   [5:0] add_ln119_1_fu_423_p2;
reg   [5:0] add_ln119_1_reg_777;
wire   [1:0] trunc_ln119_fu_428_p1;
reg   [1:0] trunc_ln119_reg_782;
reg   [1:0] trunc_ln119_reg_782_pp0_iter1_reg;
reg   [1:0] trunc_ln119_reg_782_pp0_iter2_reg;
wire   [9:0] select_ln122_3_fu_438_p3;
wire   [18:0] add_ln134_1_fu_475_p2;
reg   [18:0] add_ln134_1_reg_792;
wire   [24:0] mul_ln119_fu_723_p2;
reg   [24:0] mul_ln119_reg_797;
wire   [0:0] and_ln119_fu_502_p2;
reg   [0:0] and_ln119_reg_802;
wire   [4:0] select_ln122_fu_519_p3;
reg   [4:0] select_ln122_reg_807;
wire   [4:0] select_ln122_1_fu_527_p3;
reg   [4:0] select_ln122_1_reg_813;
reg    ap_enable_reg_pp0_iter1;
wire   [18:0] add_ln134_5_fu_564_p2;
reg   [18:0] add_ln134_5_reg_820;
wire   [4:0] add_ln125_fu_570_p2;
reg   [63:0] fm_addr_reg_850;
wire   [15:0] select_ln131_fu_715_p3;
reg   [15:0] select_ln131_reg_856;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter2;
reg    ap_condition_pp0_exit_iter1_state3;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg   [2:0] ap_phi_mux_f_phi_fu_253_p4;
reg   [4:0] ap_phi_mux_i_phi_fu_275_p4;
wire   [63:0] zext_ln1495_2_fu_624_p1;
wire  signed [63:0] sext_ln130_fu_684_p1;
reg    ap_block_pp0_stage0_01001;
wire   [3:0] mul_ln115_fu_305_p0;
wire   [6:0] mul_ln115_fu_305_p1;
wire   [9:0] mul_ln115_fu_305_p2;
wire   [9:0] shl_ln_fu_321_p3;
wire   [7:0] shl_ln116_1_fu_333_p3;
wire   [10:0] zext_ln116_fu_329_p1;
wire   [10:0] zext_ln116_1_fu_341_p1;
wire   [10:0] add_ln116_fu_345_p2;
wire   [16:0] shl_ln134_2_mid_fu_369_p3;
wire   [18:0] zext_ln125_1_fu_377_p1;
wire   [18:0] shl_ln134_1_mid_fu_361_p3;
wire   [2:0] add_ln119_fu_399_p2;
wire   [5:0] zext_ln119_fu_419_p1;
wire   [9:0] add_ln122_1_fu_432_p2;
wire   [8:0] zext_ln122_fu_446_p1;
wire   [8:0] empty_fu_450_p2;
wire   [16:0] shl_ln134_2_fu_463_p3;
wire   [18:0] zext_ln125_fu_471_p1;
wire   [18:0] shl_ln134_1_fu_455_p3;
wire   [0:0] icmp_ln125_fu_496_p2;
wire   [0:0] xor_ln119_fu_491_p2;
wire   [4:0] select_ln119_fu_481_p3;
wire   [0:0] or_ln122_fu_514_p2;
wire   [4:0] add_ln122_fu_508_p2;
wire   [8:0] zext_ln122_1_fu_535_p1;
wire   [8:0] p_mid1_fu_539_p2;
wire   [16:0] shl_ln134_2_mid1_fu_552_p3;
wire   [18:0] zext_ln125_2_fu_560_p1;
wire   [18:0] shl_ln134_1_mid1_fu_544_p3;
wire   [6:0] tmp_2_fu_588_p3;
wire   [8:0] p_shl_cast_fu_581_p3;
wire   [8:0] zext_ln1495_fu_595_p1;
wire   [18:0] select_ln119_2_fu_576_p3;
wire   [18:0] select_ln122_2_fu_605_p3;
wire   [8:0] add_ln1495_fu_599_p2;
wire   [8:0] zext_ln1495_1_fu_615_p1;
wire   [8:0] add_ln1495_1_fu_618_p2;
wire   [9:0] zext_ln134_fu_632_p1;
wire   [13:0] tmp_1_fu_640_p4;
wire   [9:0] add_ln134_fu_635_p2;
wire   [24:0] tmp4_fu_649_p4;
wire   [63:0] zext_ln134_1_fu_659_p1;
wire   [63:0] add_ln134_2_fu_663_p2;
wire   [63:0] zext_ln122_2_fu_611_p1;
wire   [63:0] add_ln134_3_fu_668_p2;
wire   [62:0] trunc_ln_fu_674_p4;
wire   [15:0] tmp_fu_694_p6;
wire   [0:0] tmp_3_fu_707_p3;
wire   [5:0] mul_ln119_fu_723_p0;
wire   [19:0] mul_ln119_fu_723_p1;
wire    ap_CS_fsm_state12;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [9:0] mul_ln115_fu_305_p00;
wire   [24:0] mul_ln119_fu_723_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
end

tiled_conv_mul_4ns_7ns_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 10 ))
mul_4ns_7ns_10_1_1_U54(
    .din0(mul_ln115_fu_305_p0),
    .din1(mul_ln115_fu_305_p1),
    .dout(mul_ln115_fu_305_p2)
);

tiled_conv_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mux_42_16_1_1_U55(
    .din0(out_fm_buf_V_q0),
    .din1(out_fm_buf_1_V_q0),
    .din2(out_fm_buf_2_V_q0),
    .din3(out_fm_buf_3_V_q0),
    .din4(trunc_ln119_reg_782_pp0_iter2_reg),
    .dout(tmp_fu_694_p6)
);

tiled_conv_mul_mul_6ns_20ns_25_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 20 ),
    .dout_WIDTH( 25 ))
mul_mul_6ns_20ns_25_1_1_U56(
    .din0(mul_ln119_fu_723_p0),
    .din1(mul_ln119_fu_723_p1),
    .dout(mul_ln119_fu_723_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter1_state3)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter9 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln119_reg_760 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        f_reg_249 <= select_ln119_1_reg_772;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_reg_249 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln119_reg_760_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_271 <= select_ln122_1_reg_813;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_271 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln119_fu_393_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten35_reg_238 <= add_ln119_2_fu_387_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten35_reg_238 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln119_fu_393_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_260 <= select_ln122_3_fu_438_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_260 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln119_reg_760 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_reg_282 <= add_ln125_fu_570_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_reg_282 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln119_fu_393_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln119_1_reg_777 <= add_ln119_1_fu_423_p2;
        icmp_ln122_reg_764 <= icmp_ln122_fu_405_p2;
        trunc_ln119_reg_782 <= trunc_ln119_fu_428_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln122_reg_764 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln134_1_reg_792[18 : 8] <= add_ln134_1_fu_475_p2[18 : 8];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        add_ln134_4_reg_750[18 : 8] <= add_ln134_4_fu_381_p2[18 : 8];
        depth_offset_reg_734[5 : 2] <= depth_offset_fu_297_p3[5 : 2];
        height_offset_reg_739 <= {{mul_ln115_fu_305_p2[9:1]}};
        width_offset_reg_745 <= {{add_ln116_fu_345_p2[10:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln119_reg_760 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln134_5_reg_820[18 : 8] <= add_ln134_5_fu_564_p2[18 : 8];
        and_ln119_reg_802 <= and_ln119_fu_502_p2;
        mul_ln119_reg_797 <= mul_ln119_fu_723_p2;
        select_ln122_reg_807 <= select_ln122_fu_519_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln119_reg_760_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fm_addr_reg_850 <= sext_ln130_fu_684_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln119_reg_760 <= icmp_ln119_fu_393_p2;
        icmp_ln119_reg_760_pp0_iter1_reg <= icmp_ln119_reg_760;
        icmp_ln122_reg_764_pp0_iter1_reg <= icmp_ln122_reg_764;
        trunc_ln119_reg_782_pp0_iter1_reg <= trunc_ln119_reg_782;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln119_reg_760_pp0_iter2_reg <= icmp_ln119_reg_760_pp0_iter1_reg;
        icmp_ln119_reg_760_pp0_iter3_reg <= icmp_ln119_reg_760_pp0_iter2_reg;
        icmp_ln119_reg_760_pp0_iter4_reg <= icmp_ln119_reg_760_pp0_iter3_reg;
        icmp_ln119_reg_760_pp0_iter5_reg <= icmp_ln119_reg_760_pp0_iter4_reg;
        icmp_ln119_reg_760_pp0_iter6_reg <= icmp_ln119_reg_760_pp0_iter5_reg;
        icmp_ln119_reg_760_pp0_iter7_reg <= icmp_ln119_reg_760_pp0_iter6_reg;
        icmp_ln119_reg_760_pp0_iter8_reg <= icmp_ln119_reg_760_pp0_iter7_reg;
        trunc_ln119_reg_782_pp0_iter2_reg <= trunc_ln119_reg_782_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln119_fu_393_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln119_1_reg_772 <= select_ln119_1_fu_411_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln119_reg_760 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln122_1_reg_813 <= select_ln122_1_fu_527_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln119_reg_760_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln131_reg_856 <= select_ln131_fu_715_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_condition_pp0_exit_iter1_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln119_fu_393_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln119_reg_760 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_f_phi_fu_253_p4 = select_ln119_1_reg_772;
    end else begin
        ap_phi_mux_f_phi_fu_253_p4 = f_reg_249;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln119_reg_760_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_275_p4 = select_ln122_1_reg_813;
    end else begin
        ap_phi_mux_i_phi_fu_275_p4 = i_reg_271;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln119_reg_760_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        fm_blk_n_AW = m_axi_fm_AWREADY;
    end else begin
        fm_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln119_reg_760_pp0_iter8_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        fm_blk_n_B = m_axi_fm_BVALID;
    end else begin
        fm_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln119_reg_760_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        fm_blk_n_W = m_axi_fm_WREADY;
    end else begin
        fm_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln119_reg_760_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        m_axi_fm_AWVALID = 1'b1;
    end else begin
        m_axi_fm_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln119_reg_760_pp0_iter8_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_fm_BREADY = 1'b1;
    end else begin
        m_axi_fm_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln119_reg_760_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_fm_WVALID = 1'b1;
    end else begin
        m_axi_fm_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_fm_buf_1_V_ce0 = 1'b1;
    end else begin
        out_fm_buf_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_fm_buf_2_V_ce0 = 1'b1;
    end else begin
        out_fm_buf_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_fm_buf_3_V_ce0 = 1'b1;
    end else begin
        out_fm_buf_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_fm_buf_V_ce0 = 1'b1;
    end else begin
        out_fm_buf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln116_fu_345_p2 = (zext_ln116_fu_329_p1 + zext_ln116_1_fu_341_p1);

assign add_ln119_1_fu_423_p2 = (zext_ln119_fu_419_p1 + depth_offset_reg_734);

assign add_ln119_2_fu_387_p2 = (indvar_flatten35_reg_238 + 11'd1);

assign add_ln119_fu_399_p2 = (ap_phi_mux_f_phi_fu_253_p4 + 3'd1);

assign add_ln122_1_fu_432_p2 = (indvar_flatten_reg_260 + 10'd1);

assign add_ln122_fu_508_p2 = (select_ln119_fu_481_p3 + 5'd1);

assign add_ln125_fu_570_p2 = (select_ln122_fu_519_p3 + 5'd1);

assign add_ln134_1_fu_475_p2 = (zext_ln125_fu_471_p1 + shl_ln134_1_fu_455_p3);

assign add_ln134_2_fu_663_p2 = (zext_ln134_1_fu_659_p1 + out_fm);

assign add_ln134_3_fu_668_p2 = (add_ln134_2_fu_663_p2 + zext_ln122_2_fu_611_p1);

assign add_ln134_4_fu_381_p2 = (zext_ln125_1_fu_377_p1 + shl_ln134_1_mid_fu_361_p3);

assign add_ln134_5_fu_564_p2 = (zext_ln125_2_fu_560_p1 + shl_ln134_1_mid1_fu_544_p3);

assign add_ln134_fu_635_p2 = (zext_ln134_fu_632_p1 + width_offset_reg_745);

assign add_ln1495_1_fu_618_p2 = (add_ln1495_fu_599_p2 + zext_ln1495_1_fu_615_p1);

assign add_ln1495_fu_599_p2 = (p_shl_cast_fu_581_p3 + zext_ln1495_fu_595_p1);

assign and_ln119_fu_502_p2 = (xor_ln119_fu_491_p2 & icmp_ln125_fu_496_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((m_axi_fm_BVALID == 1'b0) & (icmp_ln119_reg_760_pp0_iter8_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((m_axi_fm_BVALID == 1'b0) & (icmp_ln119_reg_760_pp0_iter8_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1)) | ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state6_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((m_axi_fm_BVALID == 1'b0) & (icmp_ln119_reg_760_pp0_iter8_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1)) | ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state6_io)));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter9 = ((m_axi_fm_BVALID == 1'b0) & (icmp_ln119_reg_760_pp0_iter8_reg == 1'd0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((m_axi_fm_AWREADY == 1'b0) & (icmp_ln119_reg_760_pp0_iter2_reg == 1'd0));
end

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((m_axi_fm_WREADY == 1'b0) & (icmp_ln119_reg_760_pp0_iter3_reg == 1'd0));
end

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign depth_offset_fu_297_p3 = {{kernel_group}, {2'd0}};

assign empty_fu_450_p2 = (zext_ln122_fu_446_p1 + height_offset_reg_739);

assign height_offset_fu_311_p4 = {{mul_ln115_fu_305_p2[9:1]}};

assign icmp_ln119_fu_393_p2 = ((indvar_flatten35_reg_238 == 11'd1840) ? 1'b1 : 1'b0);

assign icmp_ln122_fu_405_p2 = ((indvar_flatten_reg_260 == 10'd460) ? 1'b1 : 1'b0);

assign icmp_ln125_fu_496_p2 = ((j_reg_282 == 5'd20) ? 1'b1 : 1'b0);

assign m_axi_fm_ARADDR = 64'd0;

assign m_axi_fm_ARBURST = 2'd0;

assign m_axi_fm_ARCACHE = 4'd0;

assign m_axi_fm_ARID = 1'd0;

assign m_axi_fm_ARLEN = 32'd0;

assign m_axi_fm_ARLOCK = 2'd0;

assign m_axi_fm_ARPROT = 3'd0;

assign m_axi_fm_ARQOS = 4'd0;

assign m_axi_fm_ARREGION = 4'd0;

assign m_axi_fm_ARSIZE = 3'd0;

assign m_axi_fm_ARUSER = 1'd0;

assign m_axi_fm_ARVALID = 1'b0;

assign m_axi_fm_AWADDR = fm_addr_reg_850;

assign m_axi_fm_AWBURST = 2'd0;

assign m_axi_fm_AWCACHE = 4'd0;

assign m_axi_fm_AWID = 1'd0;

assign m_axi_fm_AWLEN = 32'd1;

assign m_axi_fm_AWLOCK = 2'd0;

assign m_axi_fm_AWPROT = 3'd0;

assign m_axi_fm_AWQOS = 4'd0;

assign m_axi_fm_AWREGION = 4'd0;

assign m_axi_fm_AWSIZE = 3'd0;

assign m_axi_fm_AWUSER = 1'd0;

assign m_axi_fm_RREADY = 1'b0;

assign m_axi_fm_WDATA = select_ln131_reg_856;

assign m_axi_fm_WID = 1'd0;

assign m_axi_fm_WLAST = 1'b0;

assign m_axi_fm_WSTRB = 2'd3;

assign m_axi_fm_WUSER = 1'd0;

assign mul_ln115_fu_305_p0 = mul_ln115_fu_305_p00;

assign mul_ln115_fu_305_p00 = ti;

assign mul_ln115_fu_305_p1 = 10'd46;

assign mul_ln119_fu_723_p0 = mul_ln119_fu_723_p00;

assign mul_ln119_fu_723_p00 = add_ln119_1_reg_777;

assign mul_ln119_fu_723_p1 = 25'd471040;

assign or_ln122_fu_514_p2 = (icmp_ln122_reg_764 | and_ln119_fu_502_p2);

assign out_fm_buf_1_V_address0 = zext_ln1495_2_fu_624_p1;

assign out_fm_buf_2_V_address0 = zext_ln1495_2_fu_624_p1;

assign out_fm_buf_3_V_address0 = zext_ln1495_2_fu_624_p1;

assign out_fm_buf_V_address0 = zext_ln1495_2_fu_624_p1;

assign p_mid1_fu_539_p2 = (zext_ln122_1_fu_535_p1 + height_offset_reg_739);

assign p_shl_cast_fu_581_p3 = {{select_ln122_1_reg_813}, {4'd0}};

assign select_ln119_1_fu_411_p3 = ((icmp_ln122_fu_405_p2[0:0] == 1'b1) ? add_ln119_fu_399_p2 : ap_phi_mux_f_phi_fu_253_p4);

assign select_ln119_2_fu_576_p3 = ((icmp_ln122_reg_764_pp0_iter1_reg[0:0] == 1'b1) ? add_ln134_4_reg_750 : add_ln134_1_reg_792);

assign select_ln119_fu_481_p3 = ((icmp_ln122_reg_764[0:0] == 1'b1) ? 5'd0 : ap_phi_mux_i_phi_fu_275_p4);

assign select_ln122_1_fu_527_p3 = ((and_ln119_fu_502_p2[0:0] == 1'b1) ? add_ln122_fu_508_p2 : select_ln119_fu_481_p3);

assign select_ln122_2_fu_605_p3 = ((and_ln119_reg_802[0:0] == 1'b1) ? add_ln134_5_reg_820 : select_ln119_2_fu_576_p3);

assign select_ln122_3_fu_438_p3 = ((icmp_ln122_fu_405_p2[0:0] == 1'b1) ? 10'd1 : add_ln122_1_fu_432_p2);

assign select_ln122_fu_519_p3 = ((or_ln122_fu_514_p2[0:0] == 1'b1) ? 5'd0 : j_reg_282);

assign select_ln131_fu_715_p3 = ((tmp_3_fu_707_p3[0:0] == 1'b1) ? 16'd0 : tmp_fu_694_p6);

assign sext_ln130_fu_684_p1 = $signed(trunc_ln_fu_674_p4);

assign shl_ln116_1_fu_333_p3 = {{tj}, {3'd0}};

assign shl_ln134_1_fu_455_p3 = {{empty_fu_450_p2}, {10'd0}};

assign shl_ln134_1_mid1_fu_544_p3 = {{p_mid1_fu_539_p2}, {10'd0}};

assign shl_ln134_1_mid_fu_361_p3 = {{height_offset_fu_311_p4}, {10'd0}};

assign shl_ln134_2_fu_463_p3 = {{empty_fu_450_p2}, {8'd0}};

assign shl_ln134_2_mid1_fu_552_p3 = {{p_mid1_fu_539_p2}, {8'd0}};

assign shl_ln134_2_mid_fu_369_p3 = {{height_offset_fu_311_p4}, {8'd0}};

assign shl_ln_fu_321_p3 = {{tj}, {5'd0}};

assign tmp4_fu_649_p4 = {{{tmp_1_fu_640_p4}, {add_ln134_fu_635_p2}}, {1'd0}};

assign tmp_1_fu_640_p4 = {{mul_ln119_reg_797[24:11]}};

assign tmp_2_fu_588_p3 = {{select_ln122_1_reg_813}, {2'd0}};

assign tmp_3_fu_707_p3 = tmp_fu_694_p6[32'd15];

assign trunc_ln119_fu_428_p1 = select_ln119_1_fu_411_p3[1:0];

assign trunc_ln_fu_674_p4 = {{add_ln134_3_fu_668_p2[63:1]}};

assign xor_ln119_fu_491_p2 = (icmp_ln122_reg_764 ^ 1'd1);

assign zext_ln116_1_fu_341_p1 = shl_ln116_1_fu_333_p3;

assign zext_ln116_fu_329_p1 = shl_ln_fu_321_p3;

assign zext_ln119_fu_419_p1 = select_ln119_1_fu_411_p3;

assign zext_ln122_1_fu_535_p1 = add_ln122_fu_508_p2;

assign zext_ln122_2_fu_611_p1 = select_ln122_2_fu_605_p3;

assign zext_ln122_fu_446_p1 = ap_phi_mux_i_phi_fu_275_p4;

assign zext_ln125_1_fu_377_p1 = shl_ln134_2_mid_fu_369_p3;

assign zext_ln125_2_fu_560_p1 = shl_ln134_2_mid1_fu_552_p3;

assign zext_ln125_fu_471_p1 = shl_ln134_2_fu_463_p3;

assign zext_ln134_1_fu_659_p1 = tmp4_fu_649_p4;

assign zext_ln134_fu_632_p1 = select_ln122_reg_807;

assign zext_ln1495_1_fu_615_p1 = select_ln122_reg_807;

assign zext_ln1495_2_fu_624_p1 = add_ln1495_1_fu_618_p2;

assign zext_ln1495_fu_595_p1 = tmp_2_fu_588_p3;

always @ (posedge ap_clk) begin
    depth_offset_reg_734[1:0] <= 2'b00;
    add_ln134_4_reg_750[7:0] <= 8'b00000000;
    add_ln134_1_reg_792[7:0] <= 8'b00000000;
    add_ln134_5_reg_820[7:0] <= 8'b00000000;
end

endmodule //tiled_conv_store_output_tile_to_DRAM
