-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2.2 (64-bit)
-- Version: 2020.2.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tiled_conv_load_layer_params_from_DRAM is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_wt_AWVALID : OUT STD_LOGIC;
    m_axi_wt_AWREADY : IN STD_LOGIC;
    m_axi_wt_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_wt_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wt_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_wt_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_wt_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wt_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wt_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wt_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_wt_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wt_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wt_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wt_WVALID : OUT STD_LOGIC;
    m_axi_wt_WREADY : IN STD_LOGIC;
    m_axi_wt_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_wt_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wt_WLAST : OUT STD_LOGIC;
    m_axi_wt_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wt_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wt_ARVALID : OUT STD_LOGIC;
    m_axi_wt_ARREADY : IN STD_LOGIC;
    m_axi_wt_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_wt_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wt_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_wt_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_wt_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wt_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wt_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wt_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_wt_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wt_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wt_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wt_RVALID : IN STD_LOGIC;
    m_axi_wt_RREADY : OUT STD_LOGIC;
    m_axi_wt_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_wt_RLAST : IN STD_LOGIC;
    m_axi_wt_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wt_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wt_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wt_BVALID : IN STD_LOGIC;
    m_axi_wt_BREADY : OUT STD_LOGIC;
    m_axi_wt_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wt_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wt_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    weight_buf_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weight_buf_ce0 : OUT STD_LOGIC;
    weight_buf_we0 : OUT STD_LOGIC;
    weight_buf_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    weight_buf1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weight_buf1_ce0 : OUT STD_LOGIC;
    weight_buf1_we0 : OUT STD_LOGIC;
    weight_buf1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    weight_buf2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weight_buf2_ce0 : OUT STD_LOGIC;
    weight_buf2_we0 : OUT STD_LOGIC;
    weight_buf2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    weight_buf3_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weight_buf3_ce0 : OUT STD_LOGIC;
    weight_buf3_we0 : OUT STD_LOGIC;
    weight_buf3_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    weight_buf4_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weight_buf4_ce0 : OUT STD_LOGIC;
    weight_buf4_we0 : OUT STD_LOGIC;
    weight_buf4_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    weight_buf5_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weight_buf5_ce0 : OUT STD_LOGIC;
    weight_buf5_we0 : OUT STD_LOGIC;
    weight_buf5_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    weight_buf6_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weight_buf6_ce0 : OUT STD_LOGIC;
    weight_buf6_we0 : OUT STD_LOGIC;
    weight_buf6_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    p_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (15 downto 0);
    weights : IN STD_LOGIC_VECTOR (63 downto 0);
    bias : IN STD_LOGIC_VECTOR (63 downto 0);
    kernel_group_offset : IN STD_LOGIC_VECTOR (3 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of tiled_conv_load_layer_params_from_DRAM is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_24C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001001100";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv15_126 : STD_LOGIC_VECTOR (14 downto 0) := "000000100100110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_24C : STD_LOGIC_VECTOR (9 downto 0) := "1001001100";
    constant ap_const_lv8_93 : STD_LOGIC_VECTOR (7 downto 0) := "10010011";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal wt_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal wt_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln73_reg_947 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal indvar_flatten33_reg_333 : STD_LOGIC_VECTOR (9 downto 0);
    signal f_reg_344 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten11_reg_355 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_reg_366 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_reg_377 : STD_LOGIC_VECTOR (5 downto 0);
    signal kh_reg_388 : STD_LOGIC_VECTOR (2 downto 0);
    signal kw_reg_400 : STD_LOGIC_VECTOR (2 downto 0);
    signal f_1_reg_412 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_fu_435_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal empty_reg_906 : STD_LOGIC_VECTOR (14 downto 0);
    signal wt_addr_reg_911 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln73_1_fu_470_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state10_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln73_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_reg_947_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_951 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln73_1_fu_502_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln73_1_reg_957 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln73_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln73_reg_964 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_reg_969 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln73_1_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln73_1_reg_974 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln76_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln76_reg_979 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln76_1_fu_540_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln76_1_reg_984 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln79_2_fu_554_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln76_2_fu_568_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln79_1_fu_679_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln79_1_reg_1000 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln84_1_fu_691_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln84_1_reg_1005 : STD_LOGIC_VECTOR (6 downto 0);
    signal wt_addr_read_reg_1010 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln82_fu_697_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln82_reg_1021 : STD_LOGIC_VECTOR (2 downto 0);
    signal wt_addr_1_reg_1078 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal add_ln91_fu_769_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state21_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state22_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln91_fu_775_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln93_fu_781_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln93_reg_1093 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state10 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state21 : STD_LOGIC;
    signal ap_phi_mux_f_phi_fu_348_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_c_phi_fu_370_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_kh_phi_fu_392_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_kw_phi_fu_404_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln84_4_fu_703_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln73_fu_460_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln91_fu_739_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bias_buf9_04_fu_144 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal write_flag_0_fu_148 : STD_LOGIC_VECTOR (0 downto 0);
    signal write_flag9_0_fu_152 : STD_LOGIC_VECTOR (0 downto 0);
    signal bias_buf8_05_fu_156 : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_buf_06_fu_160 : STD_LOGIC_VECTOR (15 downto 0);
    signal write_flag6_0_fu_164 : STD_LOGIC_VECTOR (0 downto 0);
    signal bias_buf7_07_fu_168 : STD_LOGIC_VECTOR (15 downto 0);
    signal write_flag3_0_fu_172 : STD_LOGIC_VECTOR (0 downto 0);
    signal kernel_offset_fu_423_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_fu_435_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_fu_435_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_cast_fu_441_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_36_fu_444_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_450_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln73_fu_482_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln73_fu_494_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln76_fu_528_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln79_1_fu_548_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln76_1_fu_562_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_579_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln84_1_fu_586_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln84_fu_576_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln84_fu_590_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln82_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln76_fu_596_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln84_2_fu_618_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln84_fu_621_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln84_fu_627_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln76_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln73_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln76_1_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln76_fu_611_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln76_fu_649_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln79_fu_661_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln79_1_fu_666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln79_fu_655_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln79_fu_671_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln84_1_fu_633_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln84_3_fu_687_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_713_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_cast2_fu_720_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_39_fu_724_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln2_fu_729_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal select_ln96_fu_849_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln96_1_fu_856_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln96_2_fu_863_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln96_3_fu_870_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal empty_fu_435_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component tiled_conv_mul_6ns_10ns_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    mul_6ns_10ns_15_1_1_U1 : component tiled_conv_mul_6ns_10ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 10,
        dout_WIDTH => 15)
    port map (
        din0 => empty_fu_435_p0,
        din1 => empty_fu_435_p1,
        dout => empty_fu_435_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state10);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state21) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state21) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state21);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_reg_366_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln73_reg_947 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                c_reg_366 <= select_ln76_1_reg_984;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                c_reg_366 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    f_1_reg_412_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln91_fu_775_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                f_1_reg_412 <= add_ln91_fu_769_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                f_1_reg_412 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    f_reg_344_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln73_reg_947 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                f_reg_344 <= select_ln73_1_reg_957;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                f_reg_344 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvar_flatten11_reg_355_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_fu_476_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten11_reg_355 <= select_ln76_2_fu_568_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                indvar_flatten11_reg_355 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    indvar_flatten33_reg_333_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_fu_476_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten33_reg_333 <= add_ln73_1_fu_470_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                indvar_flatten33_reg_333 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_377_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_fu_476_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_377 <= select_ln79_2_fu_554_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                indvar_flatten_reg_377 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    kh_reg_388_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln73_reg_947_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                kh_reg_388 <= select_ln79_1_reg_1000;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                kh_reg_388 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    kw_reg_400_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln73_reg_947_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                kw_reg_400 <= add_ln82_reg_1021;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                kw_reg_400 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    write_flag3_0_fu_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                write_flag3_0_fu_172 <= ap_const_lv1_0;
            elsif (((trunc_ln93_reg_1093 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                write_flag3_0_fu_172 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    write_flag6_0_fu_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                write_flag6_0_fu_164 <= ap_const_lv1_0;
            elsif (((trunc_ln93_reg_1093 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                write_flag6_0_fu_164 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    write_flag9_0_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                write_flag9_0_fu_152 <= ap_const_lv1_0;
            elsif (((trunc_ln93_reg_1093 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                write_flag9_0_fu_152 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    write_flag_0_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                write_flag_0_fu_148 <= ap_const_lv1_0;
            elsif (((trunc_ln93_reg_1093 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                write_flag_0_fu_148 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln73_reg_947 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                add_ln82_reg_1021 <= add_ln82_fu_697_p2;
                select_ln79_1_reg_1000 <= select_ln79_1_fu_679_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln73_reg_947 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln84_1_reg_1005 <= add_ln84_1_fu_691_p2;
                wt_addr_read_reg_1010 <= m_axi_wt_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_fu_476_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln73_1_reg_974 <= and_ln73_1_fu_522_p2;
                icmp_ln76_reg_951 <= icmp_ln76_fu_488_p2;
                icmp_ln79_reg_969 <= icmp_ln79_fu_516_p2;
                or_ln76_reg_979 <= or_ln76_fu_534_p2;
                xor_ln73_reg_964 <= xor_ln73_fu_510_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln93_reg_1093 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                bias_buf7_07_fu_168 <= m_axi_wt_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln93_reg_1093 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                bias_buf8_05_fu_156 <= m_axi_wt_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln93_reg_1093 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                bias_buf9_04_fu_144 <= m_axi_wt_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln93_reg_1093 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                bias_buf_06_fu_160 <= m_axi_wt_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                empty_reg_906 <= empty_fu_435_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln73_reg_947 <= icmp_ln73_fu_476_p2;
                icmp_ln73_reg_947_pp0_iter1_reg <= icmp_ln73_reg_947;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_fu_476_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln73_1_reg_957 <= select_ln73_1_fu_502_p3;
                select_ln76_1_reg_984 <= select_ln76_1_fu_540_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln91_fu_775_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                trunc_ln93_reg_1093 <= trunc_ln93_fu_781_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                wt_addr_1_reg_1078 <= sext_ln91_fu_739_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                wt_addr_reg_911 <= sext_ln73_fu_460_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_wt_ARREADY, ap_CS_fsm_state3, ap_enable_reg_pp0_iter1, ap_CS_fsm_state14, ap_enable_reg_pp0_iter0, icmp_ln73_fu_476_p2, ap_enable_reg_pp1_iter0, icmp_ln91_fu_775_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((m_axi_wt_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln73_fu_476_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((icmp_ln73_fu_476_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((m_axi_wt_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((icmp_ln91_fu_775_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((icmp_ln91_fu_775_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln73_1_fu_470_p2 <= std_logic_vector(unsigned(indvar_flatten33_reg_333) + unsigned(ap_const_lv10_1));
    add_ln73_fu_482_p2 <= std_logic_vector(unsigned(ap_phi_mux_f_phi_fu_348_p4) + unsigned(ap_const_lv3_1));
    add_ln76_1_fu_562_p2 <= std_logic_vector(unsigned(indvar_flatten11_reg_355) + unsigned(ap_const_lv8_1));
    add_ln76_fu_528_p2 <= std_logic_vector(unsigned(select_ln73_fu_494_p3) + unsigned(ap_const_lv2_1));
    add_ln79_1_fu_548_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_377) + unsigned(ap_const_lv6_1));
    add_ln79_fu_655_p2 <= std_logic_vector(unsigned(select_ln76_fu_611_p3) + unsigned(ap_const_lv3_1));
    add_ln82_fu_697_p2 <= std_logic_vector(unsigned(select_ln79_fu_671_p3) + unsigned(ap_const_lv3_1));
    add_ln84_1_fu_691_p2 <= std_logic_vector(unsigned(sub_ln84_1_fu_633_p2) + unsigned(zext_ln84_3_fu_687_p1));
    add_ln84_fu_621_p2 <= std_logic_vector(signed(sext_ln76_fu_596_p1) + signed(zext_ln84_2_fu_618_p1));
    add_ln91_fu_769_p2 <= std_logic_vector(unsigned(f_1_reg_412) + unsigned(ap_const_lv3_1));
    and_ln73_1_fu_522_p2 <= (xor_ln73_fu_510_p2 and icmp_ln79_fu_516_p2);
    and_ln73_fu_606_p2 <= (xor_ln73_reg_964 and icmp_ln82_fu_600_p2);
    and_ln76_fu_649_p2 <= (or_ln76_1_fu_644_p2 and and_ln73_fu_606_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(18);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(17);
    ap_CS_fsm_state23 <= ap_CS_fsm(19);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_wt_RVALID, ap_enable_reg_pp0_iter1, icmp_ln73_reg_947)
    begin
                ap_block_pp0_stage0_11001 <= ((m_axi_wt_RVALID = ap_const_logic_0) and (icmp_ln73_reg_947 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_wt_RVALID, ap_enable_reg_pp0_iter1, icmp_ln73_reg_947)
    begin
                ap_block_pp0_stage0_subdone <= ((m_axi_wt_RVALID = ap_const_logic_0) and (icmp_ln73_reg_947 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(m_axi_wt_RVALID, ap_enable_reg_pp1_iter1)
    begin
                ap_block_pp1_stage0_11001 <= ((m_axi_wt_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(m_axi_wt_RVALID, ap_enable_reg_pp1_iter1)
    begin
                ap_block_pp1_stage0_subdone <= ((m_axi_wt_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage0_iter1_assign_proc : process(m_axi_wt_RVALID, icmp_ln73_reg_947)
    begin
                ap_block_state11_pp0_stage0_iter1 <= ((m_axi_wt_RVALID = ap_const_logic_0) and (icmp_ln73_reg_947 = ap_const_lv1_0));
    end process;

        ap_block_state12_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state22_pp1_stage0_iter1_assign_proc : process(m_axi_wt_RVALID)
    begin
                ap_block_state22_pp1_stage0_iter1 <= (m_axi_wt_RVALID = ap_const_logic_0);
    end process;


    ap_condition_pp0_exit_iter0_state10_assign_proc : process(icmp_ln73_fu_476_p2)
    begin
        if ((icmp_ln73_fu_476_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state21_assign_proc : process(icmp_ln91_fu_775_p2)
    begin
        if ((icmp_ln91_fu_775_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state21 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_phi_fu_370_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln73_reg_947, c_reg_366, select_ln76_1_reg_984)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln73_reg_947 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_c_phi_fu_370_p4 <= select_ln76_1_reg_984;
        else 
            ap_phi_mux_c_phi_fu_370_p4 <= c_reg_366;
        end if; 
    end process;


    ap_phi_mux_f_phi_fu_348_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln73_reg_947, f_reg_344, select_ln73_1_reg_957)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln73_reg_947 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_f_phi_fu_348_p4 <= select_ln73_1_reg_957;
        else 
            ap_phi_mux_f_phi_fu_348_p4 <= f_reg_344;
        end if; 
    end process;


    ap_phi_mux_kh_phi_fu_392_p4_assign_proc : process(ap_block_pp0_stage0, kh_reg_388, icmp_ln73_reg_947_pp0_iter1_reg, select_ln79_1_reg_1000, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln73_reg_947_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_kh_phi_fu_392_p4 <= select_ln79_1_reg_1000;
        else 
            ap_phi_mux_kh_phi_fu_392_p4 <= kh_reg_388;
        end if; 
    end process;


    ap_phi_mux_kw_phi_fu_404_p4_assign_proc : process(ap_block_pp0_stage0, kw_reg_400, icmp_ln73_reg_947_pp0_iter1_reg, add_ln82_reg_1021, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln73_reg_947_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_kw_phi_fu_404_p4 <= add_ln82_reg_1021;
        else 
            ap_phi_mux_kw_phi_fu_404_p4 <= kw_reg_400;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= select_ln96_fu_849_p3;
    ap_return_1 <= select_ln96_1_fu_856_p3;
    ap_return_2 <= select_ln96_2_fu_863_p3;
    ap_return_3 <= select_ln96_3_fu_870_p3;
    empty_36_fu_444_p2 <= std_logic_vector(unsigned(p_cast_fu_441_p1) + unsigned(weights));
    empty_39_fu_724_p2 <= std_logic_vector(unsigned(p_cast2_fu_720_p1) + unsigned(bias));
    empty_fu_435_p0 <= empty_fu_435_p00(6 - 1 downto 0);
    empty_fu_435_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kernel_offset_fu_423_p3),15));
    empty_fu_435_p1 <= ap_const_lv15_126(10 - 1 downto 0);
    icmp_ln73_fu_476_p2 <= "1" when (indvar_flatten33_reg_333 = ap_const_lv10_24C) else "0";
    icmp_ln76_fu_488_p2 <= "1" when (indvar_flatten11_reg_355 = ap_const_lv8_93) else "0";
    icmp_ln79_fu_516_p2 <= "1" when (indvar_flatten_reg_377 = ap_const_lv6_31) else "0";
    icmp_ln82_fu_600_p2 <= "1" when (ap_phi_mux_kw_phi_fu_404_p4 = ap_const_lv3_7) else "0";
    icmp_ln91_fu_775_p2 <= "1" when (f_1_reg_412 = ap_const_lv3_4) else "0";
    kernel_offset_fu_423_p3 <= (kernel_group_offset & ap_const_lv2_0);

    m_axi_wt_ARADDR_assign_proc : process(m_axi_wt_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state14, wt_addr_reg_911, wt_addr_1_reg_1078)
    begin
        if ((m_axi_wt_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                m_axi_wt_ARADDR <= wt_addr_1_reg_1078;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                m_axi_wt_ARADDR <= wt_addr_reg_911;
            else 
                m_axi_wt_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_wt_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_wt_ARBURST <= ap_const_lv2_0;
    m_axi_wt_ARCACHE <= ap_const_lv4_0;
    m_axi_wt_ARID <= ap_const_lv1_0;

    m_axi_wt_ARLEN_assign_proc : process(m_axi_wt_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state14)
    begin
        if ((m_axi_wt_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                m_axi_wt_ARLEN <= ap_const_lv32_4;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                m_axi_wt_ARLEN <= ap_const_lv32_24C;
            else 
                m_axi_wt_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_wt_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_wt_ARLOCK <= ap_const_lv2_0;
    m_axi_wt_ARPROT <= ap_const_lv3_0;
    m_axi_wt_ARQOS <= ap_const_lv4_0;
    m_axi_wt_ARREGION <= ap_const_lv4_0;
    m_axi_wt_ARSIZE <= ap_const_lv3_0;
    m_axi_wt_ARUSER <= ap_const_lv1_0;

    m_axi_wt_ARVALID_assign_proc : process(m_axi_wt_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state14)
    begin
        if ((((m_axi_wt_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((m_axi_wt_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            m_axi_wt_ARVALID <= ap_const_logic_1;
        else 
            m_axi_wt_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_wt_AWADDR <= ap_const_lv64_0;
    m_axi_wt_AWBURST <= ap_const_lv2_0;
    m_axi_wt_AWCACHE <= ap_const_lv4_0;
    m_axi_wt_AWID <= ap_const_lv1_0;
    m_axi_wt_AWLEN <= ap_const_lv32_0;
    m_axi_wt_AWLOCK <= ap_const_lv2_0;
    m_axi_wt_AWPROT <= ap_const_lv3_0;
    m_axi_wt_AWQOS <= ap_const_lv4_0;
    m_axi_wt_AWREGION <= ap_const_lv4_0;
    m_axi_wt_AWSIZE <= ap_const_lv3_0;
    m_axi_wt_AWUSER <= ap_const_lv1_0;
    m_axi_wt_AWVALID <= ap_const_logic_0;
    m_axi_wt_BREADY <= ap_const_logic_0;

    m_axi_wt_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln73_reg_947, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln73_reg_947 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            m_axi_wt_RREADY <= ap_const_logic_1;
        else 
            m_axi_wt_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_wt_WDATA <= ap_const_lv16_0;
    m_axi_wt_WID <= ap_const_lv1_0;
    m_axi_wt_WLAST <= ap_const_logic_0;
    m_axi_wt_WSTRB <= ap_const_lv2_0;
    m_axi_wt_WUSER <= ap_const_lv1_0;
    m_axi_wt_WVALID <= ap_const_logic_0;
    or_ln76_1_fu_644_p2 <= (xor_ln76_fu_639_p2 or icmp_ln76_reg_951);
    or_ln76_fu_534_p2 <= (icmp_ln76_fu_488_p2 or and_ln73_1_fu_522_p2);
    or_ln79_1_fu_666_p2 <= (or_ln79_fu_661_p2 or icmp_ln76_reg_951);
    or_ln79_fu_661_p2 <= (and_ln76_fu_649_p2 or and_ln73_1_reg_974);
    p_cast2_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_713_p3),64));
    p_cast_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_906),64));
    select_ln73_1_fu_502_p3 <= 
        add_ln73_fu_482_p2 when (icmp_ln76_fu_488_p2(0) = '1') else 
        ap_phi_mux_f_phi_fu_348_p4;
    select_ln73_fu_494_p3 <= 
        ap_const_lv2_0 when (icmp_ln76_fu_488_p2(0) = '1') else 
        ap_phi_mux_c_phi_fu_370_p4;
    select_ln76_1_fu_540_p3 <= 
        add_ln76_fu_528_p2 when (and_ln73_1_fu_522_p2(0) = '1') else 
        select_ln73_fu_494_p3;
    select_ln76_2_fu_568_p3 <= 
        ap_const_lv8_1 when (icmp_ln76_fu_488_p2(0) = '1') else 
        add_ln76_1_fu_562_p2;
    select_ln76_fu_611_p3 <= 
        ap_const_lv3_0 when (or_ln76_reg_979(0) = '1') else 
        ap_phi_mux_kh_phi_fu_392_p4;
    select_ln79_1_fu_679_p3 <= 
        add_ln79_fu_655_p2 when (and_ln76_fu_649_p2(0) = '1') else 
        select_ln76_fu_611_p3;
    select_ln79_2_fu_554_p3 <= 
        ap_const_lv6_1 when (or_ln76_fu_534_p2(0) = '1') else 
        add_ln79_1_fu_548_p2;
    select_ln79_fu_671_p3 <= 
        ap_const_lv3_0 when (or_ln79_1_fu_666_p2(0) = '1') else 
        ap_phi_mux_kw_phi_fu_404_p4;
    select_ln96_1_fu_856_p3 <= 
        bias_buf7_07_fu_168 when (write_flag3_0_fu_172(0) = '1') else 
        p_read1;
    select_ln96_2_fu_863_p3 <= 
        bias_buf8_05_fu_156 when (write_flag6_0_fu_164(0) = '1') else 
        p_read2;
    select_ln96_3_fu_870_p3 <= 
        bias_buf9_04_fu_144 when (write_flag9_0_fu_152(0) = '1') else 
        p_read3;
    select_ln96_fu_849_p3 <= 
        bias_buf_06_fu_160 when (write_flag_0_fu_148(0) = '1') else 
        p_read;
        sext_ln73_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_450_p4),64));

        sext_ln76_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln84_fu_590_p2),7));

        sext_ln91_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_fu_729_p4),64));

    shl_ln84_fu_627_p2 <= std_logic_vector(shift_left(unsigned(add_ln84_fu_621_p2),to_integer(unsigned('0' & ap_const_lv7_3(7-1 downto 0)))));
    sub_ln84_1_fu_633_p2 <= std_logic_vector(unsigned(shl_ln84_fu_627_p2) - unsigned(add_ln84_fu_621_p2));
    sub_ln84_fu_590_p2 <= std_logic_vector(unsigned(zext_ln84_1_fu_586_p1) - unsigned(zext_ln84_fu_576_p1));
    tmp_7_fu_579_p3 <= (select_ln73_1_reg_957 & ap_const_lv2_0);
    tmp_fu_713_p3 <= (kernel_group_offset & ap_const_lv3_0);
    trunc_ln2_fu_729_p4 <= empty_39_fu_724_p2(63 downto 1);
    trunc_ln93_fu_781_p1 <= f_1_reg_412(2 - 1 downto 0);
    trunc_ln_fu_450_p4 <= empty_36_fu_444_p2(63 downto 1);
    weight_buf1_address0 <= zext_ln84_4_fu_703_p1(7 - 1 downto 0);

    weight_buf1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weight_buf1_ce0 <= ap_const_logic_1;
        else 
            weight_buf1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf1_d0 <= wt_addr_read_reg_1010;

    weight_buf1_we0_assign_proc : process(ap_block_pp0_stage0_11001, select_ln79_1_reg_1000, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln79_1_reg_1000 = ap_const_lv3_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weight_buf1_we0 <= ap_const_logic_1;
        else 
            weight_buf1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf2_address0 <= zext_ln84_4_fu_703_p1(7 - 1 downto 0);

    weight_buf2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weight_buf2_ce0 <= ap_const_logic_1;
        else 
            weight_buf2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf2_d0 <= wt_addr_read_reg_1010;

    weight_buf2_we0_assign_proc : process(ap_block_pp0_stage0_11001, select_ln79_1_reg_1000, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln79_1_reg_1000 = ap_const_lv3_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weight_buf2_we0 <= ap_const_logic_1;
        else 
            weight_buf2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf3_address0 <= zext_ln84_4_fu_703_p1(7 - 1 downto 0);

    weight_buf3_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weight_buf3_ce0 <= ap_const_logic_1;
        else 
            weight_buf3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf3_d0 <= wt_addr_read_reg_1010;

    weight_buf3_we0_assign_proc : process(ap_block_pp0_stage0_11001, select_ln79_1_reg_1000, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln79_1_reg_1000 = ap_const_lv3_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weight_buf3_we0 <= ap_const_logic_1;
        else 
            weight_buf3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf4_address0 <= zext_ln84_4_fu_703_p1(7 - 1 downto 0);

    weight_buf4_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weight_buf4_ce0 <= ap_const_logic_1;
        else 
            weight_buf4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf4_d0 <= wt_addr_read_reg_1010;

    weight_buf4_we0_assign_proc : process(ap_block_pp0_stage0_11001, select_ln79_1_reg_1000, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln79_1_reg_1000 = ap_const_lv3_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weight_buf4_we0 <= ap_const_logic_1;
        else 
            weight_buf4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf5_address0 <= zext_ln84_4_fu_703_p1(7 - 1 downto 0);

    weight_buf5_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weight_buf5_ce0 <= ap_const_logic_1;
        else 
            weight_buf5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf5_d0 <= wt_addr_read_reg_1010;

    weight_buf5_we0_assign_proc : process(ap_block_pp0_stage0_11001, select_ln79_1_reg_1000, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln79_1_reg_1000 = ap_const_lv3_5) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weight_buf5_we0 <= ap_const_logic_1;
        else 
            weight_buf5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf6_address0 <= zext_ln84_4_fu_703_p1(7 - 1 downto 0);

    weight_buf6_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weight_buf6_ce0 <= ap_const_logic_1;
        else 
            weight_buf6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf6_d0 <= wt_addr_read_reg_1010;

    weight_buf6_we0_assign_proc : process(ap_block_pp0_stage0_11001, select_ln79_1_reg_1000, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and ((select_ln79_1_reg_1000 = ap_const_lv3_6) or (select_ln79_1_reg_1000 = ap_const_lv3_7)))) then 
            weight_buf6_we0 <= ap_const_logic_1;
        else 
            weight_buf6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_address0 <= zext_ln84_4_fu_703_p1(7 - 1 downto 0);

    weight_buf_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weight_buf_ce0 <= ap_const_logic_1;
        else 
            weight_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_buf_d0 <= wt_addr_read_reg_1010;

    weight_buf_we0_assign_proc : process(ap_block_pp0_stage0_11001, select_ln79_1_reg_1000, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln79_1_reg_1000 = ap_const_lv3_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            weight_buf_we0 <= ap_const_logic_1;
        else 
            weight_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    wt_blk_n_AR_assign_proc : process(m_axi_wt_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            wt_blk_n_AR <= m_axi_wt_ARREADY;
        else 
            wt_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    wt_blk_n_R_assign_proc : process(m_axi_wt_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln73_reg_947, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln73_reg_947 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            wt_blk_n_R <= m_axi_wt_RVALID;
        else 
            wt_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    xor_ln73_fu_510_p2 <= (icmp_ln76_fu_488_p2 xor ap_const_lv1_1);
    xor_ln76_fu_639_p2 <= (icmp_ln79_reg_969 xor ap_const_lv1_1);
    zext_ln84_1_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_579_p3),6));
    zext_ln84_2_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln76_1_reg_984),7));
    zext_ln84_3_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln79_fu_671_p3),7));
    zext_ln84_4_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln84_1_reg_1005),64));
    zext_ln84_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln73_1_reg_957),6));
end behav;
