-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tiled_conv_conv_7x7_Pipeline_CHANNEL_COMB is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sub_ln1319 : IN STD_LOGIC_VECTOR (5 downto 0);
    select_ln41_4 : IN STD_LOGIC_VECTOR (5 downto 0);
    X_buf_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_0_ce0 : OUT STD_LOGIC;
    X_buf_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_1_ce0 : OUT STD_LOGIC;
    X_buf_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_2_ce0 : OUT STD_LOGIC;
    X_buf_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_3_ce0 : OUT STD_LOGIC;
    X_buf_3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_4_ce0 : OUT STD_LOGIC;
    X_buf_4_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_5_ce0 : OUT STD_LOGIC;
    X_buf_5_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_6_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_6_ce0 : OUT STD_LOGIC;
    X_buf_6_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_7_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_7_ce0 : OUT STD_LOGIC;
    X_buf_7_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_8_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_8_ce0 : OUT STD_LOGIC;
    X_buf_8_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_9_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_9_ce0 : OUT STD_LOGIC;
    X_buf_9_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_10_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_10_ce0 : OUT STD_LOGIC;
    X_buf_10_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_11_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_11_ce0 : OUT STD_LOGIC;
    X_buf_11_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_12_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_12_ce0 : OUT STD_LOGIC;
    X_buf_12_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_13_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_13_ce0 : OUT STD_LOGIC;
    X_buf_13_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_14_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_14_ce0 : OUT STD_LOGIC;
    X_buf_14_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_15_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_15_ce0 : OUT STD_LOGIC;
    X_buf_15_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_16_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_16_ce0 : OUT STD_LOGIC;
    X_buf_16_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_17_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_17_ce0 : OUT STD_LOGIC;
    X_buf_17_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_18_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_18_ce0 : OUT STD_LOGIC;
    X_buf_18_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_19_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_19_ce0 : OUT STD_LOGIC;
    X_buf_19_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_20_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_20_ce0 : OUT STD_LOGIC;
    X_buf_20_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_21_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_21_ce0 : OUT STD_LOGIC;
    X_buf_21_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_22_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_22_ce0 : OUT STD_LOGIC;
    X_buf_22_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_23_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_23_ce0 : OUT STD_LOGIC;
    X_buf_23_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_24_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_24_ce0 : OUT STD_LOGIC;
    X_buf_24_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_25_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_25_ce0 : OUT STD_LOGIC;
    X_buf_25_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_26_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_26_ce0 : OUT STD_LOGIC;
    X_buf_26_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_27_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_27_ce0 : OUT STD_LOGIC;
    X_buf_27_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_28_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_28_ce0 : OUT STD_LOGIC;
    X_buf_28_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_29_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_29_ce0 : OUT STD_LOGIC;
    X_buf_29_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_30_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_30_ce0 : OUT STD_LOGIC;
    X_buf_30_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_31_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_31_ce0 : OUT STD_LOGIC;
    X_buf_31_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_32_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_32_ce0 : OUT STD_LOGIC;
    X_buf_32_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_33_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_33_ce0 : OUT STD_LOGIC;
    X_buf_33_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_34_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_34_ce0 : OUT STD_LOGIC;
    X_buf_34_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_35_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_35_ce0 : OUT STD_LOGIC;
    X_buf_35_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_36_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_36_ce0 : OUT STD_LOGIC;
    X_buf_36_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_37_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_37_ce0 : OUT STD_LOGIC;
    X_buf_37_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_38_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_38_ce0 : OUT STD_LOGIC;
    X_buf_38_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_39_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_39_ce0 : OUT STD_LOGIC;
    X_buf_39_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_40_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_40_ce0 : OUT STD_LOGIC;
    X_buf_40_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_41_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_41_ce0 : OUT STD_LOGIC;
    X_buf_41_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_42_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_42_ce0 : OUT STD_LOGIC;
    X_buf_42_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_43_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_43_ce0 : OUT STD_LOGIC;
    X_buf_43_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_44_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_44_ce0 : OUT STD_LOGIC;
    X_buf_44_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    select_ln44_3 : IN STD_LOGIC_VECTOR (5 downto 0);
    W_buf_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_0_ce0 : OUT STD_LOGIC;
    W_buf_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_1_ce0 : OUT STD_LOGIC;
    W_buf_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_2_ce0 : OUT STD_LOGIC;
    W_buf_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_3_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_3_ce0 : OUT STD_LOGIC;
    W_buf_3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_4_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_4_ce0 : OUT STD_LOGIC;
    W_buf_4_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_5_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_5_ce0 : OUT STD_LOGIC;
    W_buf_5_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_6_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_6_ce0 : OUT STD_LOGIC;
    W_buf_6_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    lhs_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    lhs_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of tiled_conv_conv_7x7_Pipeline_CHANNEL_COMB is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_93 : STD_LOGIC_VECTOR (7 downto 0) := "10010011";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv13_4A : STD_LOGIC_VECTOR (12 downto 0) := "0000001001010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv8_34 : STD_LOGIC_VECTOR (7 downto 0) := "00110100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln52_fu_934_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sub_ln1319_cast_fu_907_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln1319_cast_reg_1366 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln52_reg_1371 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_1371_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_1371_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln67_fu_949_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln67_reg_1375 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_fu_955_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln52_reg_1380 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln52_1_fu_988_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln52_1_reg_1385 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln1319_fu_999_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1319_reg_1390 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_reg_1396 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_reg_1396_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal j_fu_1045_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_1402 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_1402_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal r_V_fu_1159_p47 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_reg_1668 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_1255_p9 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_reg_1673 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1317_3_fu_1083_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln1319_1_fu_1140_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lhs_fu_190 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal x_fu_194 : STD_LOGIC_VECTOR (5 downto 0);
    signal x_1_fu_963_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_x_load : STD_LOGIC_VECTOR (5 downto 0);
    signal chan_fu_198 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_fu_202 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln52_5_fu_940_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal add_ln52_fu_982_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln1317_fu_995_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_fu_1007_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_fu_1007_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_fu_1007_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln3_fu_1023_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln69_fu_1033_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln69_fu_1039_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln1319_fu_1061_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_fu_1071_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln70_fu_1074_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1309_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln1319_1_fu_1066_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1319_fu_1131_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1319_1_fu_1134_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln69_fu_1151_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_fu_1159_p46 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln4_fu_1291_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1318_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1309_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_1309_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1309_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1318_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_1309_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1309_p20 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_fu_1007_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component tiled_conv_mul_6ns_8ns_13_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component tiled_conv_mux_456_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (15 downto 0);
        din11 : IN STD_LOGIC_VECTOR (15 downto 0);
        din12 : IN STD_LOGIC_VECTOR (15 downto 0);
        din13 : IN STD_LOGIC_VECTOR (15 downto 0);
        din14 : IN STD_LOGIC_VECTOR (15 downto 0);
        din15 : IN STD_LOGIC_VECTOR (15 downto 0);
        din16 : IN STD_LOGIC_VECTOR (15 downto 0);
        din17 : IN STD_LOGIC_VECTOR (15 downto 0);
        din18 : IN STD_LOGIC_VECTOR (15 downto 0);
        din19 : IN STD_LOGIC_VECTOR (15 downto 0);
        din20 : IN STD_LOGIC_VECTOR (15 downto 0);
        din21 : IN STD_LOGIC_VECTOR (15 downto 0);
        din22 : IN STD_LOGIC_VECTOR (15 downto 0);
        din23 : IN STD_LOGIC_VECTOR (15 downto 0);
        din24 : IN STD_LOGIC_VECTOR (15 downto 0);
        din25 : IN STD_LOGIC_VECTOR (15 downto 0);
        din26 : IN STD_LOGIC_VECTOR (15 downto 0);
        din27 : IN STD_LOGIC_VECTOR (15 downto 0);
        din28 : IN STD_LOGIC_VECTOR (15 downto 0);
        din29 : IN STD_LOGIC_VECTOR (15 downto 0);
        din30 : IN STD_LOGIC_VECTOR (15 downto 0);
        din31 : IN STD_LOGIC_VECTOR (15 downto 0);
        din32 : IN STD_LOGIC_VECTOR (15 downto 0);
        din33 : IN STD_LOGIC_VECTOR (15 downto 0);
        din34 : IN STD_LOGIC_VECTOR (15 downto 0);
        din35 : IN STD_LOGIC_VECTOR (15 downto 0);
        din36 : IN STD_LOGIC_VECTOR (15 downto 0);
        din37 : IN STD_LOGIC_VECTOR (15 downto 0);
        din38 : IN STD_LOGIC_VECTOR (15 downto 0);
        din39 : IN STD_LOGIC_VECTOR (15 downto 0);
        din40 : IN STD_LOGIC_VECTOR (15 downto 0);
        din41 : IN STD_LOGIC_VECTOR (15 downto 0);
        din42 : IN STD_LOGIC_VECTOR (15 downto 0);
        din43 : IN STD_LOGIC_VECTOR (15 downto 0);
        din44 : IN STD_LOGIC_VECTOR (15 downto 0);
        din45 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component tiled_conv_mux_74_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component tiled_conv_mac_muladd_2ns_6ns_6ns_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component tiled_conv_mac_muladd_16s_16s_29ns_29_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component tiled_conv_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_6ns_8ns_13_1_1_U146 : component tiled_conv_mul_6ns_8ns_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 8,
        dout_WIDTH => 13)
    port map (
        din0 => mul_fu_1007_p0,
        din1 => mul_fu_1007_p1,
        dout => mul_fu_1007_p2);

    mux_456_16_1_1_U147 : component tiled_conv_mux_456_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 16,
        din17_WIDTH => 16,
        din18_WIDTH => 16,
        din19_WIDTH => 16,
        din20_WIDTH => 16,
        din21_WIDTH => 16,
        din22_WIDTH => 16,
        din23_WIDTH => 16,
        din24_WIDTH => 16,
        din25_WIDTH => 16,
        din26_WIDTH => 16,
        din27_WIDTH => 16,
        din28_WIDTH => 16,
        din29_WIDTH => 16,
        din30_WIDTH => 16,
        din31_WIDTH => 16,
        din32_WIDTH => 16,
        din33_WIDTH => 16,
        din34_WIDTH => 16,
        din35_WIDTH => 16,
        din36_WIDTH => 16,
        din37_WIDTH => 16,
        din38_WIDTH => 16,
        din39_WIDTH => 16,
        din40_WIDTH => 16,
        din41_WIDTH => 16,
        din42_WIDTH => 16,
        din43_WIDTH => 16,
        din44_WIDTH => 16,
        din45_WIDTH => 6,
        dout_WIDTH => 16)
    port map (
        din0 => X_buf_0_q0,
        din1 => X_buf_1_q0,
        din2 => X_buf_2_q0,
        din3 => X_buf_3_q0,
        din4 => X_buf_4_q0,
        din5 => X_buf_5_q0,
        din6 => X_buf_6_q0,
        din7 => X_buf_7_q0,
        din8 => X_buf_8_q0,
        din9 => X_buf_9_q0,
        din10 => X_buf_10_q0,
        din11 => X_buf_11_q0,
        din12 => X_buf_12_q0,
        din13 => X_buf_13_q0,
        din14 => X_buf_14_q0,
        din15 => X_buf_15_q0,
        din16 => X_buf_16_q0,
        din17 => X_buf_17_q0,
        din18 => X_buf_18_q0,
        din19 => X_buf_19_q0,
        din20 => X_buf_20_q0,
        din21 => X_buf_21_q0,
        din22 => X_buf_22_q0,
        din23 => X_buf_23_q0,
        din24 => X_buf_24_q0,
        din25 => X_buf_25_q0,
        din26 => X_buf_26_q0,
        din27 => X_buf_27_q0,
        din28 => X_buf_28_q0,
        din29 => X_buf_29_q0,
        din30 => X_buf_30_q0,
        din31 => X_buf_31_q0,
        din32 => X_buf_32_q0,
        din33 => X_buf_33_q0,
        din34 => X_buf_34_q0,
        din35 => X_buf_35_q0,
        din36 => X_buf_36_q0,
        din37 => X_buf_37_q0,
        din38 => X_buf_38_q0,
        din39 => X_buf_39_q0,
        din40 => X_buf_40_q0,
        din41 => X_buf_41_q0,
        din42 => X_buf_42_q0,
        din43 => X_buf_43_q0,
        din44 => X_buf_44_q0,
        din45 => r_V_fu_1159_p46,
        dout => r_V_fu_1159_p47);

    mux_74_16_1_1_U148 : component tiled_conv_mux_74_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => W_buf_0_q0,
        din1 => W_buf_1_q0,
        din2 => W_buf_2_q0,
        din3 => W_buf_3_q0,
        din4 => W_buf_4_q0,
        din5 => W_buf_5_q0,
        din6 => W_buf_6_q0,
        din7 => tmp_reg_1396_pp0_iter2_reg,
        dout => tmp_2_fu_1255_p9);

    mac_muladd_2ns_6ns_6ns_8_1_1_U149 : component tiled_conv_mac_muladd_2ns_6ns_6ns_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_1309_p0,
        din1 => grp_fu_1309_p1,
        din2 => grp_fu_1309_p2,
        dout => grp_fu_1309_p3);

    mac_muladd_16s_16s_29ns_29_1_1_U150 : component tiled_conv_mac_muladd_16s_16s_29ns_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => tmp_2_reg_1673,
        din1 => r_V_reg_1668,
        din2 => grp_fu_1318_p2,
        dout => grp_fu_1318_p3);

    flow_control_loop_pipe_sequential_init_U : component tiled_conv_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    chan_fu_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    chan_fu_198 <= ap_const_lv2_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    chan_fu_198 <= select_ln52_1_fu_988_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln52_fu_934_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_202 <= add_ln52_5_fu_940_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_202 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    lhs_fu_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    lhs_fu_190 <= ap_const_lv16_0;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    lhs_fu_190 <= trunc_ln4_fu_1291_p1(28 downto 13);
                end if;
            end if; 
        end if;
    end process;

    x_fu_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln52_fu_934_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    x_fu_194 <= x_1_fu_963_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    x_fu_194 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln1319_reg_1390 <= add_ln1319_fu_999_p2;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln52_reg_1371 <= icmp_ln52_fu_934_p2;
                icmp_ln52_reg_1371_pp0_iter1_reg <= icmp_ln52_reg_1371;
                j_reg_1402 <= j_fu_1045_p3;
                select_ln52_1_reg_1385 <= select_ln52_1_fu_988_p3;
                sub_ln1319_cast_reg_1366 <= sub_ln1319_cast_fu_907_p1;
                tmp_reg_1396 <= mul_fu_1007_p2(12 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                icmp_ln52_reg_1371_pp0_iter2_reg <= icmp_ln52_reg_1371_pp0_iter1_reg;
                j_reg_1402_pp0_iter2_reg <= j_reg_1402;
                r_V_reg_1668 <= r_V_fu_1159_p47;
                tmp_2_reg_1673 <= tmp_2_fu_1255_p9;
                tmp_reg_1396_pp0_iter2_reg <= tmp_reg_1396;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_934_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln67_reg_1375 <= icmp_ln67_fu_949_p2;
                select_ln52_reg_1380 <= select_ln52_fu_955_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    W_buf_0_address0 <= zext_ln1319_1_fu_1140_p1(7 - 1 downto 0);

    W_buf_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            W_buf_0_ce0 <= ap_const_logic_1;
        else 
            W_buf_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_buf_1_address0 <= zext_ln1319_1_fu_1140_p1(7 - 1 downto 0);

    W_buf_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            W_buf_1_ce0 <= ap_const_logic_1;
        else 
            W_buf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_buf_2_address0 <= zext_ln1319_1_fu_1140_p1(7 - 1 downto 0);

    W_buf_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            W_buf_2_ce0 <= ap_const_logic_1;
        else 
            W_buf_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_buf_3_address0 <= zext_ln1319_1_fu_1140_p1(7 - 1 downto 0);

    W_buf_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            W_buf_3_ce0 <= ap_const_logic_1;
        else 
            W_buf_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_buf_4_address0 <= zext_ln1319_1_fu_1140_p1(7 - 1 downto 0);

    W_buf_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            W_buf_4_ce0 <= ap_const_logic_1;
        else 
            W_buf_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_buf_5_address0 <= zext_ln1319_1_fu_1140_p1(7 - 1 downto 0);

    W_buf_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            W_buf_5_ce0 <= ap_const_logic_1;
        else 
            W_buf_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_buf_6_address0 <= zext_ln1319_1_fu_1140_p1(7 - 1 downto 0);

    W_buf_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            W_buf_6_ce0 <= ap_const_logic_1;
        else 
            W_buf_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_0_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_0_ce0 <= ap_const_logic_1;
        else 
            X_buf_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_10_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_10_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_10_ce0 <= ap_const_logic_1;
        else 
            X_buf_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_11_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_11_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_11_ce0 <= ap_const_logic_1;
        else 
            X_buf_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_12_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_12_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_12_ce0 <= ap_const_logic_1;
        else 
            X_buf_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_13_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_13_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_13_ce0 <= ap_const_logic_1;
        else 
            X_buf_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_14_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_14_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_14_ce0 <= ap_const_logic_1;
        else 
            X_buf_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_15_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_15_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_15_ce0 <= ap_const_logic_1;
        else 
            X_buf_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_16_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_16_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_16_ce0 <= ap_const_logic_1;
        else 
            X_buf_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_17_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_17_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_17_ce0 <= ap_const_logic_1;
        else 
            X_buf_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_18_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_18_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_18_ce0 <= ap_const_logic_1;
        else 
            X_buf_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_19_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_19_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_19_ce0 <= ap_const_logic_1;
        else 
            X_buf_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_1_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_1_ce0 <= ap_const_logic_1;
        else 
            X_buf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_20_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_20_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_20_ce0 <= ap_const_logic_1;
        else 
            X_buf_20_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_21_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_21_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_21_ce0 <= ap_const_logic_1;
        else 
            X_buf_21_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_22_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_22_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_22_ce0 <= ap_const_logic_1;
        else 
            X_buf_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_23_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_23_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_23_ce0 <= ap_const_logic_1;
        else 
            X_buf_23_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_24_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_24_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_24_ce0 <= ap_const_logic_1;
        else 
            X_buf_24_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_25_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_25_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_25_ce0 <= ap_const_logic_1;
        else 
            X_buf_25_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_26_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_26_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_26_ce0 <= ap_const_logic_1;
        else 
            X_buf_26_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_27_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_27_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_27_ce0 <= ap_const_logic_1;
        else 
            X_buf_27_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_28_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_28_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_28_ce0 <= ap_const_logic_1;
        else 
            X_buf_28_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_29_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_29_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_29_ce0 <= ap_const_logic_1;
        else 
            X_buf_29_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_2_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_2_ce0 <= ap_const_logic_1;
        else 
            X_buf_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_30_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_30_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_30_ce0 <= ap_const_logic_1;
        else 
            X_buf_30_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_31_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_31_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_31_ce0 <= ap_const_logic_1;
        else 
            X_buf_31_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_32_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_32_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_32_ce0 <= ap_const_logic_1;
        else 
            X_buf_32_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_33_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_33_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_33_ce0 <= ap_const_logic_1;
        else 
            X_buf_33_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_34_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_34_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_34_ce0 <= ap_const_logic_1;
        else 
            X_buf_34_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_35_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_35_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_35_ce0 <= ap_const_logic_1;
        else 
            X_buf_35_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_36_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_36_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_36_ce0 <= ap_const_logic_1;
        else 
            X_buf_36_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_37_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_37_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_37_ce0 <= ap_const_logic_1;
        else 
            X_buf_37_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_38_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_38_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_38_ce0 <= ap_const_logic_1;
        else 
            X_buf_38_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_39_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_39_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_39_ce0 <= ap_const_logic_1;
        else 
            X_buf_39_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_3_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_3_ce0 <= ap_const_logic_1;
        else 
            X_buf_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_40_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_40_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_40_ce0 <= ap_const_logic_1;
        else 
            X_buf_40_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_41_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_41_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_41_ce0 <= ap_const_logic_1;
        else 
            X_buf_41_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_42_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_42_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_42_ce0 <= ap_const_logic_1;
        else 
            X_buf_42_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_43_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_43_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_43_ce0 <= ap_const_logic_1;
        else 
            X_buf_43_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_44_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_44_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_44_ce0 <= ap_const_logic_1;
        else 
            X_buf_44_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_4_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_4_ce0 <= ap_const_logic_1;
        else 
            X_buf_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_5_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_5_ce0 <= ap_const_logic_1;
        else 
            X_buf_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_6_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_6_ce0 <= ap_const_logic_1;
        else 
            X_buf_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_7_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_7_ce0 <= ap_const_logic_1;
        else 
            X_buf_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_8_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_8_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_8_ce0 <= ap_const_logic_1;
        else 
            X_buf_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_9_address0 <= zext_ln1317_3_fu_1083_p1(8 - 1 downto 0);

    X_buf_9_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            X_buf_9_ce0 <= ap_const_logic_1;
        else 
            X_buf_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1319_1_fu_1134_p2 <= std_logic_vector(unsigned(sub_ln1319_1_fu_1066_p2) + unsigned(zext_ln1319_fu_1131_p1));
    add_ln1319_fu_999_p2 <= std_logic_vector(signed(sub_ln1319_cast_reg_1366) + signed(zext_ln1317_fu_995_p1));
    add_ln52_5_fu_940_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv8_1));
    add_ln52_fu_982_p2 <= std_logic_vector(unsigned(chan_fu_198) + unsigned(ap_const_lv2_1));
    add_ln69_fu_1039_p2 <= std_logic_vector(unsigned(trunc_ln3_fu_1023_p4) + unsigned(ap_const_lv3_1));
    add_ln70_fu_1074_p2 <= std_logic_vector(unsigned(i_fu_1071_p1) + unsigned(select_ln41_4));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln52_fu_934_p2)
    begin
        if (((icmp_ln52_fu_934_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_202)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_202;
        end if; 
    end process;


    ap_sig_allocacmp_x_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, x_fu_194)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_x_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_x_load <= x_fu_194;
        end if; 
    end process;

    grp_fu_1309_p0 <= grp_fu_1309_p00(2 - 1 downto 0);
    grp_fu_1309_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln52_1_reg_1385),8));
    grp_fu_1309_p1 <= ap_const_lv8_34(6 - 1 downto 0);
    grp_fu_1309_p2 <= grp_fu_1309_p20(6 - 1 downto 0);
    grp_fu_1309_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln70_fu_1074_p2),8));
    grp_fu_1318_p2 <= (lhs_fu_190 & ap_const_lv13_0);
    i_fu_1071_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_1396),6));
    icmp_ln52_fu_934_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv8_93) else "0";
    icmp_ln67_fu_949_p2 <= "1" when (ap_sig_allocacmp_x_load = ap_const_lv6_31) else "0";
    icmp_ln69_fu_1033_p2 <= "0" when (trunc_ln3_fu_1023_p4 = ap_const_lv3_7) else "1";
    j_fu_1045_p3 <= 
        trunc_ln3_fu_1023_p4 when (icmp_ln69_fu_1033_p2(0) = '1') else 
        add_ln69_fu_1039_p2;
    lhs_out <= lhs_fu_190;

    lhs_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln52_reg_1371_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln52_reg_1371_pp0_iter2_reg = ap_const_lv1_1))) then 
            lhs_out_ap_vld <= ap_const_logic_1;
        else 
            lhs_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mul_fu_1007_p0 <= mul_fu_1007_p00(6 - 1 downto 0);
    mul_fu_1007_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln52_reg_1380),13));
    mul_fu_1007_p1 <= ap_const_lv13_4A(8 - 1 downto 0);
    r_V_fu_1159_p46 <= std_logic_vector(unsigned(zext_ln69_fu_1151_p1) + unsigned(select_ln44_3));
    select_ln52_1_fu_988_p3 <= 
        add_ln52_fu_982_p2 when (icmp_ln67_reg_1375(0) = '1') else 
        chan_fu_198;
    select_ln52_fu_955_p3 <= 
        ap_const_lv6_0 when (icmp_ln67_fu_949_p2(0) = '1') else 
        ap_sig_allocacmp_x_load;
    shl_ln1319_fu_1061_p2 <= std_logic_vector(shift_left(unsigned(add_ln1319_reg_1390),to_integer(unsigned('0' & ap_const_lv7_3(7-1 downto 0)))));
    sub_ln1319_1_fu_1066_p2 <= std_logic_vector(unsigned(shl_ln1319_fu_1061_p2) - unsigned(add_ln1319_reg_1390));
        sub_ln1319_cast_fu_907_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1319),7));

    trunc_ln3_fu_1023_p4 <= mul_fu_1007_p2(11 downto 9);
    trunc_ln4_fu_1291_p1 <= grp_fu_1318_p3;
    x_1_fu_963_p2 <= std_logic_vector(unsigned(select_ln52_fu_955_p3) + unsigned(ap_const_lv6_1));
    zext_ln1317_3_fu_1083_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1309_p3),64));
    zext_ln1317_fu_995_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln52_1_fu_988_p3),7));
    zext_ln1319_1_fu_1140_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1319_1_fu_1134_p2),64));
    zext_ln1319_fu_1131_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_1402),7));
    zext_ln69_fu_1151_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_1402_pp0_iter2_reg),6));
end behav;
