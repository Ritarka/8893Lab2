-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tiled_conv_tiled_conv_Pipeline_CHANNEL_KERN_I_KERN_J is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    zext_ln51 : IN STD_LOGIC_VECTOR (14 downto 0);
    select_ln45_4 : IN STD_LOGIC_VECTOR (5 downto 0);
    sub_ln1319 : IN STD_LOGIC_VECTOR (5 downto 0);
    conv_wt_buf_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv_wt_buf_V_ce0 : OUT STD_LOGIC;
    conv_wt_buf_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    select_ln45 : IN STD_LOGIC_VECTOR (5 downto 0);
    conv_in_buf_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    conv_in_buf_V_ce0 : OUT STD_LOGIC;
    conv_in_buf_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    lhs_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    lhs_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of tiled_conv_tiled_conv_Pipeline_CHANNEL_KERN_I_KERN_J is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_93 : STD_LOGIC_VECTOR (7 downto 0) := "10010011";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_34 : STD_LOGIC_VECTOR (7 downto 0) := "00110100";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv13_2E : STD_LOGIC_VECTOR (12 downto 0) := "0000000101110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln51_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sub_ln1319_cast_fu_169_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln1319_cast_reg_591 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_3_reg_596 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln51_reg_601 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_601_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_601_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_601_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_601_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_601_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_601_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_605 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln51_1_fu_250_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln51_1_reg_610 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln51_1_reg_610_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln51_1_reg_610_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln51_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln51_reg_616 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln54_fu_276_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln54_reg_621 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln54_fu_288_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln54_reg_626 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln54_reg_626_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln54_reg_626_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln54_reg_626_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln54_1_fu_296_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln54_1_reg_632 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln54_1_reg_632_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln54_1_reg_632_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln58_fu_394_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln58_reg_637 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln58_reg_637_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln1319_fu_438_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln1319_reg_642 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln1319_1_fu_442_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln1319_1_reg_647 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal zext_ln1319_2_fu_470_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln58_4_fu_475_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lhs_fu_84 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln51_cast_fu_165_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_lhs_load_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_88 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln57_fu_304_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (2 downto 0);
    signal i_fu_92 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_i_3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten118_fu_96 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln54_3_fu_316_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_indvar_flatten118_load : STD_LOGIC_VECTOR (5 downto 0);
    signal chan_fu_100 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_allocacmp_chan_load : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten140_fu_104 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln51_2_fu_215_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_indvar_flatten140_load : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal add_ln51_fu_230_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln57_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln51_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln51_fu_242_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln54_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln54_1_fu_310_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln54_fu_349_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln58_fu_360_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln58_fu_360_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_fu_352_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln54_1_fu_372_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_mid1116_fu_375_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln51_2_fu_366_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln54_2_fu_380_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_3_cast_fu_391_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln58_fu_399_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1319_fu_402_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_411_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1319_fu_423_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal sext_ln1319_fu_407_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal sext_ln1319_1_fu_419_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal newFirst29_fu_426_p2 : STD_LOGIC_VECTOR (60 downto 0);
    signal newSecond30_fu_432_p2 : STD_LOGIC_VECTOR (60 downto 0);
    signal zext_ln1319_1_fu_456_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_fu_449_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal newFirst_fu_459_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal newSecond_fu_464_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_516_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln5_fu_498_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_527_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln58_fu_360_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_516_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_516_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_516_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_527_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_516_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_516_p30 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln58_fu_360_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component tiled_conv_mul_2ns_7ns_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component tiled_conv_ama_addmuladd_8ns_6ns_6ns_6ns_13_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        din3 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component tiled_conv_mac_muladd_16s_16s_29ns_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component tiled_conv_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_2ns_7ns_8_1_1_U29 : component tiled_conv_mul_2ns_7ns_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 7,
        dout_WIDTH => 8)
    port map (
        din0 => mul_ln58_fu_360_p0,
        din1 => mul_ln58_fu_360_p1,
        dout => mul_ln58_fu_360_p2);

    ama_addmuladd_8ns_6ns_6ns_6ns_13_4_1_U30 : component tiled_conv_ama_addmuladd_8ns_6ns_6ns_6ns_13_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_ln58_fu_360_p2,
        din1 => grp_fu_516_p1,
        din2 => grp_fu_516_p2,
        din3 => grp_fu_516_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_516_p4);

    mac_muladd_16s_16s_29ns_29_4_1_U31 : component tiled_conv_mac_muladd_16s_16s_29ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_wt_buf_V_q0,
        din1 => conv_in_buf_V_q0,
        din2 => grp_fu_527_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_527_p3);

    flow_control_loop_pipe_sequential_init_U : component tiled_conv_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    chan_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln51_fu_209_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    chan_fu_100 <= select_ln51_1_fu_250_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    chan_fu_100 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;

    i_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln51_fu_209_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_92 <= select_ln54_1_fu_296_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_92 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten118_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln51_fu_209_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten118_fu_96 <= select_ln54_3_fu_316_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten118_fu_96 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten140_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln51_fu_209_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten140_fu_104 <= add_ln51_2_fu_215_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten140_fu_104 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln51_fu_209_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_88 <= add_ln57_fu_304_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_88 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    lhs_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    lhs_fu_84 <= zext_ln51_cast_fu_165_p1;
                elsif ((ap_enable_reg_pp0_iter8 = ap_const_logic_1)) then 
                    lhs_fu_84 <= trunc_ln5_fu_498_p1(28 downto 13);
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_209_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln54_reg_621 <= add_ln54_fu_276_p2;
                and_ln51_reg_616 <= and_ln51_fu_270_p2;
                icmp_ln54_reg_605 <= icmp_ln54_fu_236_p2;
                select_ln51_1_reg_610 <= select_ln51_1_fu_250_p3;
                select_ln54_1_reg_632 <= select_ln54_1_fu_296_p3;
                select_ln54_reg_626 <= select_ln54_fu_288_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln51_reg_601 = ap_const_lv1_0))) then
                add_ln58_reg_637 <= add_ln58_fu_394_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln58_reg_637_pp0_iter2_reg <= add_ln58_reg_637;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                icmp_ln51_reg_601_pp0_iter2_reg <= icmp_ln51_reg_601_pp0_iter1_reg;
                icmp_ln51_reg_601_pp0_iter3_reg <= icmp_ln51_reg_601_pp0_iter2_reg;
                icmp_ln51_reg_601_pp0_iter4_reg <= icmp_ln51_reg_601_pp0_iter3_reg;
                icmp_ln51_reg_601_pp0_iter5_reg <= icmp_ln51_reg_601_pp0_iter4_reg;
                icmp_ln51_reg_601_pp0_iter6_reg <= icmp_ln51_reg_601_pp0_iter5_reg;
                select_ln51_1_reg_610_pp0_iter2_reg <= select_ln51_1_reg_610_pp0_iter1_reg;
                select_ln54_1_reg_632_pp0_iter2_reg <= select_ln54_1_reg_632_pp0_iter1_reg;
                select_ln54_reg_626_pp0_iter2_reg <= select_ln54_reg_626_pp0_iter1_reg;
                select_ln54_reg_626_pp0_iter3_reg <= select_ln54_reg_626_pp0_iter2_reg;
                trunc_ln1319_1_reg_647 <= trunc_ln1319_1_fu_442_p1;
                trunc_ln1319_reg_642 <= trunc_ln1319_fu_438_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                i_3_reg_596 <= ap_sig_allocacmp_i_3;
                icmp_ln51_reg_601 <= icmp_ln51_fu_209_p2;
                icmp_ln51_reg_601_pp0_iter1_reg <= icmp_ln51_reg_601;
                select_ln51_1_reg_610_pp0_iter1_reg <= select_ln51_1_reg_610;
                select_ln54_1_reg_632_pp0_iter1_reg <= select_ln54_1_reg_632;
                select_ln54_reg_626_pp0_iter1_reg <= select_ln54_reg_626;
                sub_ln1319_cast_reg_591 <= sub_ln1319_cast_fu_169_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1319_fu_402_p2 <= std_logic_vector(signed(sub_ln1319_cast_reg_591) + signed(zext_ln58_fu_399_p1));
    add_ln51_2_fu_215_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten140_load) + unsigned(ap_const_lv8_1));
    add_ln51_fu_230_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_chan_load) + unsigned(ap_const_lv2_1));
    add_ln54_1_fu_310_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten118_load) + unsigned(ap_const_lv6_1));
    add_ln54_fu_276_p2 <= std_logic_vector(unsigned(select_ln51_fu_242_p3) + unsigned(ap_const_lv3_1));
    add_ln57_fu_304_p2 <= std_logic_vector(unsigned(select_ln54_fu_288_p3) + unsigned(ap_const_lv3_1));
    add_ln58_fu_394_p2 <= std_logic_vector(unsigned(j_3_cast_fu_391_p1) + unsigned(select_ln45));
    and_ln51_fu_270_p2 <= (xor_ln51_fu_258_p2 and icmp_ln57_fu_264_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln51_fu_209_p2)
    begin
        if (((icmp_ln51_fu_209_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln51_reg_601)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln51_reg_601 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_chan_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, chan_fu_100)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_chan_load <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_chan_load <= chan_fu_100;
        end if; 
    end process;


    ap_sig_allocacmp_i_3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_92)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_3 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i_3 <= i_fu_92;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten118_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten118_fu_96)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten118_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_indvar_flatten118_load <= indvar_flatten118_fu_96;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten140_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten140_fu_104)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten140_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_indvar_flatten140_load <= indvar_flatten140_fu_104;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_88)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_88;
        end if; 
    end process;


    ap_sig_allocacmp_lhs_load_1_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0, lhs_fu_84, trunc_ln5_fu_498_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            ap_sig_allocacmp_lhs_load_1 <= trunc_ln5_fu_498_p1(28 downto 13);
        else 
            ap_sig_allocacmp_lhs_load_1 <= lhs_fu_84;
        end if; 
    end process;

    conv_in_buf_V_address0 <= zext_ln58_4_fu_475_p1(13 - 1 downto 0);

    conv_in_buf_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            conv_in_buf_V_ce0 <= ap_const_logic_1;
        else 
            conv_in_buf_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_wt_buf_V_address0 <= zext_ln1319_2_fu_470_p1(10 - 1 downto 0);

    conv_wt_buf_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            conv_wt_buf_V_ce0 <= ap_const_logic_1;
        else 
            conv_wt_buf_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_352_p2 <= std_logic_vector(unsigned(zext_ln54_fu_349_p1) + unsigned(select_ln45_4));
    grp_fu_516_p1 <= grp_fu_516_p10(6 - 1 downto 0);
    grp_fu_516_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln54_2_fu_380_p3),8));
    grp_fu_516_p2 <= ap_const_lv13_2E(6 - 1 downto 0);
    grp_fu_516_p3 <= grp_fu_516_p30(6 - 1 downto 0);
    grp_fu_516_p30 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln58_reg_637_pp0_iter2_reg),13));
    grp_fu_527_p2 <= (ap_sig_allocacmp_lhs_load_1 & ap_const_lv13_0);
    icmp_ln51_fu_209_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten140_load = ap_const_lv8_93) else "0";
    icmp_ln54_fu_236_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten118_load = ap_const_lv6_31) else "0";
    icmp_ln57_fu_264_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv3_7) else "0";
    j_3_cast_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln54_reg_626),6));
    lhs_out <= lhs_fu_84;

    lhs_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln51_reg_601_pp0_iter6_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln51_reg_601_pp0_iter6_reg = ap_const_lv1_1))) then 
            lhs_out_ap_vld <= ap_const_logic_1;
        else 
            lhs_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln58_fu_360_p0 <= mul_ln58_fu_360_p00(2 - 1 downto 0);
    mul_ln58_fu_360_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_1_reg_610),8));
    mul_ln58_fu_360_p1 <= ap_const_lv8_34(7 - 1 downto 0);
    newFirst29_fu_426_p2 <= std_logic_vector(unsigned(zext_ln1319_fu_423_p1) - unsigned(sext_ln1319_fu_407_p1));
    newFirst_fu_459_p2 <= std_logic_vector(unsigned(zext_ln1319_1_fu_456_p1) - unsigned(trunc_ln1319_reg_642));
    newSecond30_fu_432_p2 <= std_logic_vector(signed(sext_ln1319_1_fu_419_p1) + signed(newFirst29_fu_426_p2));
    newSecond_fu_464_p2 <= std_logic_vector(unsigned(p_shl_fu_449_p3) + unsigned(newFirst_fu_459_p2));
    or_ln54_fu_282_p2 <= (icmp_ln54_fu_236_p2 or and_ln51_fu_270_p2);
    p_mid1116_fu_375_p2 <= std_logic_vector(unsigned(zext_ln54_1_fu_372_p1) + unsigned(select_ln45_4));
    p_shl_fu_449_p3 <= (trunc_ln1319_1_reg_647 & ap_const_lv3_0);
    select_ln51_1_fu_250_p3 <= 
        add_ln51_fu_230_p2 when (icmp_ln54_fu_236_p2(0) = '1') else 
        ap_sig_allocacmp_chan_load;
    select_ln51_2_fu_366_p3 <= 
        select_ln45_4 when (icmp_ln54_reg_605(0) = '1') else 
        empty_fu_352_p2;
    select_ln51_fu_242_p3 <= 
        ap_const_lv3_0 when (icmp_ln54_fu_236_p2(0) = '1') else 
        ap_sig_allocacmp_i_3;
    select_ln54_1_fu_296_p3 <= 
        add_ln54_fu_276_p2 when (and_ln51_fu_270_p2(0) = '1') else 
        select_ln51_fu_242_p3;
    select_ln54_2_fu_380_p3 <= 
        p_mid1116_fu_375_p2 when (and_ln51_reg_616(0) = '1') else 
        select_ln51_2_fu_366_p3;
    select_ln54_3_fu_316_p3 <= 
        ap_const_lv6_1 when (icmp_ln54_fu_236_p2(0) = '1') else 
        add_ln54_1_fu_310_p2;
    select_ln54_fu_288_p3 <= 
        ap_const_lv3_0 when (or_ln54_fu_282_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
        sext_ln1319_1_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_411_p3),61));

        sext_ln1319_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1319_fu_402_p2),61));

        sub_ln1319_cast_fu_169_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1319),7));

    tmp_fu_411_p3 <= (add_ln1319_fu_402_p2 & ap_const_lv3_0);
    trunc_ln1319_1_fu_442_p1 <= newSecond30_fu_432_p2(7 - 1 downto 0);
    trunc_ln1319_fu_438_p1 <= newSecond30_fu_432_p2(10 - 1 downto 0);
    trunc_ln5_fu_498_p1 <= grp_fu_527_p3;
    xor_ln51_fu_258_p2 <= (icmp_ln54_fu_236_p2 xor ap_const_lv1_1);
    zext_ln1319_1_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln54_reg_626_pp0_iter3_reg),10));
    zext_ln1319_2_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newSecond_fu_464_p2),64));
    zext_ln1319_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln54_1_reg_632_pp0_iter2_reg),61));
    zext_ln51_cast_fu_165_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln51),16));
    zext_ln54_1_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_reg_621),6));
    zext_ln54_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_596),6));
    zext_ln58_4_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_516_p4),64));
    zext_ln58_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_1_reg_610_pp0_iter2_reg),7));
end behav;
