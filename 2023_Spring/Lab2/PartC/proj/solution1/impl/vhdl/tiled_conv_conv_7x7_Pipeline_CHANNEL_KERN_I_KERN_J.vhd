-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tiled_conv_conv_7x7_Pipeline_CHANNEL_KERN_I_KERN_J is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    select_ln41_3 : IN STD_LOGIC_VECTOR (5 downto 0);
    sub_ln1319 : IN STD_LOGIC_VECTOR (5 downto 0);
    W_buf_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_0_ce0 : OUT STD_LOGIC;
    W_buf_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_1_ce0 : OUT STD_LOGIC;
    W_buf_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_2_ce0 : OUT STD_LOGIC;
    W_buf_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_3_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_3_ce0 : OUT STD_LOGIC;
    W_buf_3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_4_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_4_ce0 : OUT STD_LOGIC;
    W_buf_4_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_5_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_5_ce0 : OUT STD_LOGIC;
    W_buf_5_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_6_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_6_ce0 : OUT STD_LOGIC;
    W_buf_6_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    select_ln44_2 : IN STD_LOGIC_VECTOR (5 downto 0);
    X_buf_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    X_buf_ce0 : OUT STD_LOGIC;
    X_buf_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    lhs_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    lhs_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of tiled_conv_conv_7x7_Pipeline_CHANNEL_KERN_I_KERN_J is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_93 : STD_LOGIC_VECTOR (7 downto 0) := "10010011";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv8_34 : STD_LOGIC_VECTOR (7 downto 0) := "00110100";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv13_2E : STD_LOGIC_VECTOR (12 downto 0) := "0000000101110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln52_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln52_reg_651 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_651_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln1317_fu_356_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1317_reg_655 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1319_fu_362_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1319_reg_660 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln55_fu_406_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln55_reg_666 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln55_1_fu_424_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln55_1_reg_671 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln55_2_fu_432_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln55_2_reg_676 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln55_2_reg_676_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln61_fu_444_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln61_reg_681 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_reg_726 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_535_p9 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_reg_731 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1319_1_fu_517_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln1317_4_fu_531_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lhs_fu_96 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_100 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln59_fu_450_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (2 downto 0);
    signal i_fu_104 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_fu_108 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln55_3_fu_462_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (5 downto 0);
    signal chan_fu_112 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln52_1_fu_340_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_allocacmp_chan_load : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten20_fu_116 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln52_7_fu_305_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_indvar_flatten20_load : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln55_fu_289_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln55_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln52_fu_320_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln1317_fu_356_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln1317_fu_356_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln1319_cast_fu_249_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1317_fu_348_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_fu_293_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln59_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln52_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln52_fu_332_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln52_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln55_fu_394_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln55_1_fu_414_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_mid1_fu_418_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln52_2_fu_368_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_cast_fu_440_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln55_1_fu_456_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln1319_fu_495_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln1319_1_fu_500_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1319_fu_508_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1319_1_fu_511_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_589_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln4_fu_571_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_599_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_589_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_589_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_589_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_599_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_589_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_589_p30 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln1317_fu_356_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component tiled_conv_mul_2ns_7ns_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component tiled_conv_mux_73_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component tiled_conv_ama_addmuladd_8ns_6ns_6ns_6ns_13_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        din3 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component tiled_conv_mac_muladd_16s_16s_29ns_29_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component tiled_conv_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_2ns_7ns_8_1_1_U58 : component tiled_conv_mul_2ns_7ns_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 7,
        dout_WIDTH => 8)
    port map (
        din0 => mul_ln1317_fu_356_p0,
        din1 => mul_ln1317_fu_356_p1,
        dout => mul_ln1317_fu_356_p2);

    mux_73_16_1_1_U59 : component tiled_conv_mux_73_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 3,
        dout_WIDTH => 16)
    port map (
        din0 => W_buf_0_q0,
        din1 => W_buf_1_q0,
        din2 => W_buf_2_q0,
        din3 => W_buf_3_q0,
        din4 => W_buf_4_q0,
        din5 => W_buf_5_q0,
        din6 => W_buf_6_q0,
        din7 => select_ln55_2_reg_676_pp0_iter1_reg,
        dout => tmp_5_fu_535_p9);

    ama_addmuladd_8ns_6ns_6ns_6ns_13_1_1_U60 : component tiled_conv_ama_addmuladd_8ns_6ns_6ns_6ns_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        dout_WIDTH => 13)
    port map (
        din0 => mul_ln1317_reg_655,
        din1 => grp_fu_589_p1,
        din2 => grp_fu_589_p2,
        din3 => grp_fu_589_p3,
        dout => grp_fu_589_p4);

    mac_muladd_16s_16s_29ns_29_1_1_U61 : component tiled_conv_mac_muladd_16s_16s_29ns_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => tmp_5_reg_731,
        din1 => r_V_reg_726,
        din2 => grp_fu_599_p2,
        dout => grp_fu_599_p3);

    flow_control_loop_pipe_sequential_init_U : component tiled_conv_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    chan_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln52_fu_299_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    chan_fu_112 <= select_ln52_1_fu_340_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    chan_fu_112 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;

    i_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln52_fu_299_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_104 <= select_ln55_2_fu_432_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_104 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten20_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln52_fu_299_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten20_fu_116 <= add_ln52_7_fu_305_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten20_fu_116 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln52_fu_299_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_108 <= select_ln55_3_fu_462_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_108 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln52_fu_299_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_100 <= add_ln59_fu_450_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_100 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    lhs_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    lhs_fu_96 <= ap_const_lv16_0;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    lhs_fu_96 <= trunc_ln4_fu_571_p1(28 downto 13);
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_299_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln1319_reg_660 <= add_ln1319_fu_362_p2;
                add_ln61_reg_681 <= add_ln61_fu_444_p2;
                mul_ln1317_reg_655 <= mul_ln1317_fu_356_p2;
                select_ln55_1_reg_671 <= select_ln55_1_fu_424_p3;
                select_ln55_2_reg_676 <= select_ln55_2_fu_432_p3;
                select_ln55_reg_666 <= select_ln55_fu_406_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln52_reg_651 <= icmp_ln52_fu_299_p2;
                icmp_ln52_reg_651_pp0_iter1_reg <= icmp_ln52_reg_651;
                select_ln55_2_reg_676_pp0_iter1_reg <= select_ln55_2_reg_676;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                r_V_reg_726 <= X_buf_q0;
                tmp_5_reg_731 <= tmp_5_fu_535_p9;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    W_buf_0_address0 <= zext_ln1319_1_fu_517_p1(7 - 1 downto 0);

    W_buf_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_0_ce0 <= ap_const_logic_1;
        else 
            W_buf_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_buf_1_address0 <= zext_ln1319_1_fu_517_p1(7 - 1 downto 0);

    W_buf_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_1_ce0 <= ap_const_logic_1;
        else 
            W_buf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_buf_2_address0 <= zext_ln1319_1_fu_517_p1(7 - 1 downto 0);

    W_buf_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_2_ce0 <= ap_const_logic_1;
        else 
            W_buf_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_buf_3_address0 <= zext_ln1319_1_fu_517_p1(7 - 1 downto 0);

    W_buf_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_3_ce0 <= ap_const_logic_1;
        else 
            W_buf_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_buf_4_address0 <= zext_ln1319_1_fu_517_p1(7 - 1 downto 0);

    W_buf_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_4_ce0 <= ap_const_logic_1;
        else 
            W_buf_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_buf_5_address0 <= zext_ln1319_1_fu_517_p1(7 - 1 downto 0);

    W_buf_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_5_ce0 <= ap_const_logic_1;
        else 
            W_buf_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_buf_6_address0 <= zext_ln1319_1_fu_517_p1(7 - 1 downto 0);

    W_buf_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_6_ce0 <= ap_const_logic_1;
        else 
            W_buf_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_address0 <= zext_ln1317_4_fu_531_p1(13 - 1 downto 0);

    X_buf_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_ce0 <= ap_const_logic_1;
        else 
            X_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1319_1_fu_511_p2 <= std_logic_vector(unsigned(sub_ln1319_1_fu_500_p2) + unsigned(zext_ln1319_fu_508_p1));
    add_ln1319_fu_362_p2 <= std_logic_vector(signed(sub_ln1319_cast_fu_249_p1) + signed(zext_ln1317_fu_348_p1));
    add_ln52_7_fu_305_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten20_load) + unsigned(ap_const_lv8_1));
    add_ln52_fu_320_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_chan_load) + unsigned(ap_const_lv2_1));
    add_ln55_1_fu_456_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv6_1));
    add_ln55_fu_394_p2 <= std_logic_vector(unsigned(select_ln52_fu_332_p3) + unsigned(ap_const_lv3_1));
    add_ln59_fu_450_p2 <= std_logic_vector(unsigned(select_ln55_fu_406_p3) + unsigned(ap_const_lv3_1));
    add_ln61_fu_444_p2 <= std_logic_vector(unsigned(j_cast_fu_440_p1) + unsigned(select_ln44_2));
    and_ln52_fu_388_p2 <= (xor_ln52_fu_376_p2 and icmp_ln59_fu_382_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln52_fu_299_p2)
    begin
        if (((icmp_ln52_fu_299_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_chan_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, chan_fu_112)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_chan_load <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_chan_load <= chan_fu_112;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_104)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_104;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten20_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten20_fu_116)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten20_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_indvar_flatten20_load <= indvar_flatten20_fu_116;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_108)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_108;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_100)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_100;
        end if; 
    end process;

    empty_fu_293_p2 <= std_logic_vector(unsigned(zext_ln55_fu_289_p1) + unsigned(select_ln41_3));
    grp_fu_589_p1 <= grp_fu_589_p10(6 - 1 downto 0);
    grp_fu_589_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln55_1_reg_671),8));
    grp_fu_589_p2 <= ap_const_lv13_2E(6 - 1 downto 0);
    grp_fu_589_p3 <= grp_fu_589_p30(6 - 1 downto 0);
    grp_fu_589_p30 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln61_reg_681),13));
    grp_fu_599_p2 <= (lhs_fu_96 & ap_const_lv13_0);
    icmp_ln52_fu_299_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten20_load = ap_const_lv8_93) else "0";
    icmp_ln55_fu_326_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv6_31) else "0";
    icmp_ln59_fu_382_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv3_7) else "0";
    j_cast_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln55_fu_406_p3),6));
    lhs_out <= lhs_fu_96;

    lhs_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln52_reg_651_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln52_reg_651_pp0_iter1_reg = ap_const_lv1_1))) then 
            lhs_out_ap_vld <= ap_const_logic_1;
        else 
            lhs_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1317_fu_356_p0 <= mul_ln1317_fu_356_p00(2 - 1 downto 0);
    mul_ln1317_fu_356_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln52_1_fu_340_p3),8));
    mul_ln1317_fu_356_p1 <= ap_const_lv8_34(7 - 1 downto 0);
    or_ln55_fu_400_p2 <= (icmp_ln55_fu_326_p2 or and_ln52_fu_388_p2);
    p_mid1_fu_418_p2 <= std_logic_vector(unsigned(zext_ln55_1_fu_414_p1) + unsigned(select_ln41_3));
    select_ln52_1_fu_340_p3 <= 
        add_ln52_fu_320_p2 when (icmp_ln55_fu_326_p2(0) = '1') else 
        ap_sig_allocacmp_chan_load;
    select_ln52_2_fu_368_p3 <= 
        select_ln41_3 when (icmp_ln55_fu_326_p2(0) = '1') else 
        empty_fu_293_p2;
    select_ln52_fu_332_p3 <= 
        ap_const_lv3_0 when (icmp_ln55_fu_326_p2(0) = '1') else 
        ap_sig_allocacmp_i_2;
    select_ln55_1_fu_424_p3 <= 
        p_mid1_fu_418_p2 when (and_ln52_fu_388_p2(0) = '1') else 
        select_ln52_2_fu_368_p3;
    select_ln55_2_fu_432_p3 <= 
        add_ln55_fu_394_p2 when (and_ln52_fu_388_p2(0) = '1') else 
        select_ln52_fu_332_p3;
    select_ln55_3_fu_462_p3 <= 
        ap_const_lv6_1 when (icmp_ln55_fu_326_p2(0) = '1') else 
        add_ln55_1_fu_456_p2;
    select_ln55_fu_406_p3 <= 
        ap_const_lv3_0 when (or_ln55_fu_400_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    shl_ln1319_fu_495_p2 <= std_logic_vector(shift_left(unsigned(add_ln1319_reg_660),to_integer(unsigned('0' & ap_const_lv7_3(7-1 downto 0)))));
    sub_ln1319_1_fu_500_p2 <= std_logic_vector(unsigned(shl_ln1319_fu_495_p2) - unsigned(add_ln1319_reg_660));
        sub_ln1319_cast_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1319),7));

    trunc_ln4_fu_571_p1 <= grp_fu_599_p3;
    xor_ln52_fu_376_p2 <= (icmp_ln55_fu_326_p2 xor ap_const_lv1_1);
    zext_ln1317_4_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_589_p4),64));
    zext_ln1317_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln52_1_fu_340_p3),7));
    zext_ln1319_1_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1319_1_fu_511_p2),64));
    zext_ln1319_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln55_reg_666),7));
    zext_ln55_1_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln55_fu_394_p2),6));
    zext_ln55_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_2),6));
end behav;
