-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tiled_conv_load_input_tile_block_from_DRAM_0_0 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_fm_buf_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    in_fm_buf_ce0 : OUT STD_LOGIC;
    in_fm_buf_we0 : OUT STD_LOGIC;
    in_fm_buf_d0 : OUT STD_LOGIC_VECTOR (735 downto 0);
    in_fm_buf_q0 : IN STD_LOGIC_VECTOR (735 downto 0);
    m_axi_fm_AWVALID : OUT STD_LOGIC;
    m_axi_fm_AWREADY : IN STD_LOGIC;
    m_axi_fm_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_fm_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fm_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fm_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fm_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_WVALID : OUT STD_LOGIC;
    m_axi_fm_WREADY : IN STD_LOGIC;
    m_axi_fm_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_fm_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_WLAST : OUT STD_LOGIC;
    m_axi_fm_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_ARVALID : OUT STD_LOGIC;
    m_axi_fm_ARREADY : IN STD_LOGIC;
    m_axi_fm_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_fm_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fm_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fm_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fm_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_RVALID : IN STD_LOGIC;
    m_axi_fm_RREADY : OUT STD_LOGIC;
    m_axi_fm_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_fm_RLAST : IN STD_LOGIC;
    m_axi_fm_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_RFIFONUM : IN STD_LOGIC_VECTOR (9 downto 0);
    m_axi_fm_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_BVALID : IN STD_LOGIC;
    m_axi_fm_BREADY : OUT STD_LOGIC;
    m_axi_fm_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_fm : IN STD_LOGIC_VECTOR (63 downto 0);
    ti : IN STD_LOGIC_VECTOR (3 downto 0);
    tj : IN STD_LOGIC_VECTOR (4 downto 0) );
end;


architecture behav of tiled_conv_load_input_tile_block_from_DRAM_0_0 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv10_2E : STD_LOGIC_VECTOR (9 downto 0) := "0000101110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv11_7FD : STD_LOGIC_VECTOR (10 downto 0) := "11111111101";
    constant ap_const_lv12_FFD : STD_LOGIC_VECTOR (11 downto 0) := "111111111101";
    constant ap_const_lv11_2DF : STD_LOGIC_VECTOR (10 downto 0) := "01011011111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal height_offset_fu_89_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal height_offset_reg_154 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal width_offset_fu_122_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal width_offset_reg_165 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln42_fu_133_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln42_reg_170 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln52_fu_140_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln52_reg_175 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_mid132_fu_147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_mid132_reg_180 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_ap_start : STD_LOGIC;
    signal grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_ap_done : STD_LOGIC;
    signal grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_ap_idle : STD_LOGIC;
    signal grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_ap_ready : STD_LOGIC;
    signal grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_AWVALID : STD_LOGIC;
    signal grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_WVALID : STD_LOGIC;
    signal grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_WLAST : STD_LOGIC;
    signal grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_ARVALID : STD_LOGIC;
    signal grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_RREADY : STD_LOGIC;
    signal grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_BREADY : STD_LOGIC;
    signal grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_in_fm_buf_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_in_fm_buf_ce0 : STD_LOGIC;
    signal grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_in_fm_buf_we0 : STD_LOGIC;
    signal grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_in_fm_buf_d0 : STD_LOGIC_VECTOR (735 downto 0);
    signal grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal height_offset_fu_89_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal height_offset_fu_89_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln_fu_98_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln31_1_fu_110_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln31_fu_106_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln31_1_fu_118_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln30_fu_95_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln31_2_fu_129_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal height_offset_fu_89_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component tiled_conv_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_fm_AWVALID : OUT STD_LOGIC;
        m_axi_fm_AWREADY : IN STD_LOGIC;
        m_axi_fm_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_fm_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fm_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_fm_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_fm_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fm_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fm_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_fm_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_fm_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_fm_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_fm_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fm_WVALID : OUT STD_LOGIC;
        m_axi_fm_WREADY : IN STD_LOGIC;
        m_axi_fm_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_fm_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fm_WLAST : OUT STD_LOGIC;
        m_axi_fm_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fm_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fm_ARVALID : OUT STD_LOGIC;
        m_axi_fm_ARREADY : IN STD_LOGIC;
        m_axi_fm_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_fm_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fm_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_fm_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_fm_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fm_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fm_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_fm_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_fm_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_fm_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_fm_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fm_RVALID : IN STD_LOGIC;
        m_axi_fm_RREADY : OUT STD_LOGIC;
        m_axi_fm_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_fm_RLAST : IN STD_LOGIC;
        m_axi_fm_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fm_RFIFONUM : IN STD_LOGIC_VECTOR (9 downto 0);
        m_axi_fm_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fm_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fm_BVALID : IN STD_LOGIC;
        m_axi_fm_BREADY : OUT STD_LOGIC;
        m_axi_fm_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fm_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fm_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        add_ln42 : IN STD_LOGIC_VECTOR (10 downto 0);
        zext_ln30 : IN STD_LOGIC_VECTOR (9 downto 0);
        in_fm : IN STD_LOGIC_VECTOR (63 downto 0);
        p_mid132 : IN STD_LOGIC_VECTOR (0 downto 0);
        in_fm_buf_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        in_fm_buf_ce0 : OUT STD_LOGIC;
        in_fm_buf_we0 : OUT STD_LOGIC;
        in_fm_buf_d0 : OUT STD_LOGIC_VECTOR (735 downto 0);
        in_fm_buf_q0 : IN STD_LOGIC_VECTOR (735 downto 0);
        zext_ln31_2 : IN STD_LOGIC_VECTOR (10 downto 0);
        add_ln52 : IN STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component tiled_conv_mul_4ns_7ns_10_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;



begin
    grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70 : component tiled_conv_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_ap_start,
        ap_done => grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_ap_done,
        ap_idle => grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_ap_idle,
        ap_ready => grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_ap_ready,
        m_axi_fm_AWVALID => grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_AWVALID,
        m_axi_fm_AWREADY => ap_const_logic_0,
        m_axi_fm_AWADDR => grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_AWADDR,
        m_axi_fm_AWID => grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_AWID,
        m_axi_fm_AWLEN => grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_AWLEN,
        m_axi_fm_AWSIZE => grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_AWSIZE,
        m_axi_fm_AWBURST => grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_AWBURST,
        m_axi_fm_AWLOCK => grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_AWLOCK,
        m_axi_fm_AWCACHE => grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_AWCACHE,
        m_axi_fm_AWPROT => grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_AWPROT,
        m_axi_fm_AWQOS => grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_AWQOS,
        m_axi_fm_AWREGION => grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_AWREGION,
        m_axi_fm_AWUSER => grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_AWUSER,
        m_axi_fm_WVALID => grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_WVALID,
        m_axi_fm_WREADY => ap_const_logic_0,
        m_axi_fm_WDATA => grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_WDATA,
        m_axi_fm_WSTRB => grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_WSTRB,
        m_axi_fm_WLAST => grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_WLAST,
        m_axi_fm_WID => grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_WID,
        m_axi_fm_WUSER => grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_WUSER,
        m_axi_fm_ARVALID => grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_ARVALID,
        m_axi_fm_ARREADY => m_axi_fm_ARREADY,
        m_axi_fm_ARADDR => grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_ARADDR,
        m_axi_fm_ARID => grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_ARID,
        m_axi_fm_ARLEN => grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_ARLEN,
        m_axi_fm_ARSIZE => grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_ARSIZE,
        m_axi_fm_ARBURST => grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_ARBURST,
        m_axi_fm_ARLOCK => grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_ARLOCK,
        m_axi_fm_ARCACHE => grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_ARCACHE,
        m_axi_fm_ARPROT => grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_ARPROT,
        m_axi_fm_ARQOS => grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_ARQOS,
        m_axi_fm_ARREGION => grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_ARREGION,
        m_axi_fm_ARUSER => grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_ARUSER,
        m_axi_fm_RVALID => m_axi_fm_RVALID,
        m_axi_fm_RREADY => grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_RREADY,
        m_axi_fm_RDATA => m_axi_fm_RDATA,
        m_axi_fm_RLAST => m_axi_fm_RLAST,
        m_axi_fm_RID => m_axi_fm_RID,
        m_axi_fm_RFIFONUM => m_axi_fm_RFIFONUM,
        m_axi_fm_RUSER => m_axi_fm_RUSER,
        m_axi_fm_RRESP => m_axi_fm_RRESP,
        m_axi_fm_BVALID => ap_const_logic_0,
        m_axi_fm_BREADY => grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_BREADY,
        m_axi_fm_BRESP => ap_const_lv2_0,
        m_axi_fm_BID => ap_const_lv1_0,
        m_axi_fm_BUSER => ap_const_lv1_0,
        add_ln42 => add_ln42_reg_170,
        zext_ln30 => height_offset_reg_154,
        in_fm => in_fm,
        p_mid132 => p_mid132_reg_180,
        in_fm_buf_address0 => grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_in_fm_buf_address0,
        in_fm_buf_ce0 => grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_in_fm_buf_ce0,
        in_fm_buf_we0 => grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_in_fm_buf_we0,
        in_fm_buf_d0 => grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_in_fm_buf_d0,
        in_fm_buf_q0 => in_fm_buf_q0,
        zext_ln31_2 => width_offset_reg_165,
        add_ln52 => add_ln52_reg_175);

    mul_4ns_7ns_10_1_1_U13 : component tiled_conv_mul_4ns_7ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 7,
        dout_WIDTH => 10)
    port map (
        din0 => height_offset_fu_89_p0,
        din1 => height_offset_fu_89_p1,
        dout => height_offset_fu_89_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_ap_ready = ap_const_logic_1)) then 
                    grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln42_reg_170 <= add_ln42_fu_133_p2;
                    add_ln52_reg_175(11 downto 3) <= add_ln52_fu_140_p2(11 downto 3);
                p_mid132_reg_180 <= p_mid132_fu_147_p2;
                    width_offset_reg_165(10 downto 3) <= width_offset_fu_122_p2(10 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                height_offset_reg_154 <= height_offset_fu_89_p2;
            end if;
        end if;
    end process;
    width_offset_reg_165(2 downto 0) <= "000";
    add_ln52_reg_175(2 downto 0) <= "101";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln42_fu_133_p2 <= std_logic_vector(unsigned(zext_ln30_fu_95_p1) + unsigned(ap_const_lv11_7FD));
    add_ln52_fu_140_p2 <= std_logic_vector(unsigned(zext_ln31_2_fu_129_p1) + unsigned(ap_const_lv12_FFD));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_ap_done)
    begin
        if ((grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_ap_done, ap_CS_fsm_state3)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_ap_done = ap_const_logic_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_ap_done, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_ap_start <= grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_ap_start_reg;
    height_offset_fu_89_p0 <= height_offset_fu_89_p00(4 - 1 downto 0);
    height_offset_fu_89_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ti),10));
    height_offset_fu_89_p1 <= ap_const_lv10_2E(7 - 1 downto 0);
    in_fm_buf_address0 <= grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_in_fm_buf_address0;
    in_fm_buf_ce0 <= grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_in_fm_buf_ce0;
    in_fm_buf_d0 <= grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_in_fm_buf_d0;
    in_fm_buf_we0 <= grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_in_fm_buf_we0;
    m_axi_fm_ARADDR <= grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_ARADDR;
    m_axi_fm_ARBURST <= grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_ARBURST;
    m_axi_fm_ARCACHE <= grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_ARCACHE;
    m_axi_fm_ARID <= grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_ARID;
    m_axi_fm_ARLEN <= grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_ARLEN;
    m_axi_fm_ARLOCK <= grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_ARLOCK;
    m_axi_fm_ARPROT <= grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_ARPROT;
    m_axi_fm_ARQOS <= grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_ARQOS;
    m_axi_fm_ARREGION <= grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_ARREGION;
    m_axi_fm_ARSIZE <= grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_ARSIZE;
    m_axi_fm_ARUSER <= grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_ARUSER;

    m_axi_fm_ARVALID_assign_proc : process(ap_CS_fsm_state2, grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_ARVALID, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_fm_ARVALID <= grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_ARVALID;
        else 
            m_axi_fm_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_fm_AWADDR <= ap_const_lv64_0;
    m_axi_fm_AWBURST <= ap_const_lv2_0;
    m_axi_fm_AWCACHE <= ap_const_lv4_0;
    m_axi_fm_AWID <= ap_const_lv1_0;
    m_axi_fm_AWLEN <= ap_const_lv32_0;
    m_axi_fm_AWLOCK <= ap_const_lv2_0;
    m_axi_fm_AWPROT <= ap_const_lv3_0;
    m_axi_fm_AWQOS <= ap_const_lv4_0;
    m_axi_fm_AWREGION <= ap_const_lv4_0;
    m_axi_fm_AWSIZE <= ap_const_lv3_0;
    m_axi_fm_AWUSER <= ap_const_lv1_0;
    m_axi_fm_AWVALID <= ap_const_logic_0;
    m_axi_fm_BREADY <= ap_const_logic_0;

    m_axi_fm_RREADY_assign_proc : process(ap_CS_fsm_state2, grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_RREADY, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_fm_RREADY <= grp_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI_fu_70_m_axi_fm_RREADY;
        else 
            m_axi_fm_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_fm_WDATA <= ap_const_lv16_0;
    m_axi_fm_WID <= ap_const_lv1_0;
    m_axi_fm_WLAST <= ap_const_logic_0;
    m_axi_fm_WSTRB <= ap_const_lv2_0;
    m_axi_fm_WUSER <= ap_const_lv1_0;
    m_axi_fm_WVALID <= ap_const_logic_0;
    p_mid132_fu_147_p2 <= "1" when (unsigned(add_ln42_fu_133_p2) > unsigned(ap_const_lv11_2DF)) else "0";
    shl_ln31_1_fu_110_p3 <= (tj & ap_const_lv3_0);
    shl_ln_fu_98_p3 <= (tj & ap_const_lv5_0);
    width_offset_fu_122_p2 <= std_logic_vector(unsigned(zext_ln31_fu_106_p1) + unsigned(zext_ln31_1_fu_118_p1));
    zext_ln30_fu_95_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(height_offset_reg_154),11));
    zext_ln31_1_fu_118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln31_1_fu_110_p3),11));
    zext_ln31_2_fu_129_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width_offset_fu_122_p2),12));
    zext_ln31_fu_106_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_98_p3),11));
end behav;
