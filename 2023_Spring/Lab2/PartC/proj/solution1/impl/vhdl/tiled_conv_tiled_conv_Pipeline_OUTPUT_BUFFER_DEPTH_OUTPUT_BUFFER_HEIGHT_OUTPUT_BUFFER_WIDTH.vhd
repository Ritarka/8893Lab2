-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tiled_conv_tiled_conv_Pipeline_OUTPUT_BUFFER_DEPTH_OUTPUT_BUFFER_HEIGHT_OUTPUT_BUFFER_WIDTH is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_fm_AWVALID : OUT STD_LOGIC;
    m_axi_fm_AWREADY : IN STD_LOGIC;
    m_axi_fm_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_fm_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fm_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fm_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fm_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_WVALID : OUT STD_LOGIC;
    m_axi_fm_WREADY : IN STD_LOGIC;
    m_axi_fm_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_fm_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_WLAST : OUT STD_LOGIC;
    m_axi_fm_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_ARVALID : OUT STD_LOGIC;
    m_axi_fm_ARREADY : IN STD_LOGIC;
    m_axi_fm_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_fm_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fm_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fm_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fm_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_RVALID : IN STD_LOGIC;
    m_axi_fm_RREADY : OUT STD_LOGIC;
    m_axi_fm_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_fm_RLAST : IN STD_LOGIC;
    m_axi_fm_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_RFIFONUM : IN STD_LOGIC_VECTOR (9 downto 0);
    m_axi_fm_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_BVALID : IN STD_LOGIC;
    m_axi_fm_BREADY : OUT STD_LOGIC;
    m_axi_fm_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    shl_ln70_1 : IN STD_LOGIC_VECTOR (5 downto 0);
    output_feature_map : IN STD_LOGIC_VECTOR (63 downto 0);
    mul_ln39 : IN STD_LOGIC_VECTOR (8 downto 0);
    zext_ln130_2 : IN STD_LOGIC_VECTOR (10 downto 0);
    shl_ln130_mid : IN STD_LOGIC_VECTOR (18 downto 0);
    zext_ln125_1 : IN STD_LOGIC_VECTOR (16 downto 0);
    zext_ln130_3 : IN STD_LOGIC_VECTOR (18 downto 0);
    conv_out_buf_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    conv_out_buf_V_ce0 : OUT STD_LOGIC;
    conv_out_buf_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_out_buf_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    conv_out_buf_1_ce0 : OUT STD_LOGIC;
    conv_out_buf_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_out_buf_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    conv_out_buf_2_ce0 : OUT STD_LOGIC;
    conv_out_buf_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_out_buf_3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    conv_out_buf_3_ce0 : OUT STD_LOGIC;
    conv_out_buf_3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_cast26 : IN STD_LOGIC_VECTOR (6 downto 0);
    zext_ln74 : IN STD_LOGIC_VECTOR (8 downto 0) );
end;


architecture behav of tiled_conv_tiled_conv_Pipeline_OUTPUT_BUFFER_DEPTH_OUTPUT_BUFFER_HEIGHT_OUTPUT_BUFFER_WIDTH is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv11_730 : STD_LOGIC_VECTOR (10 downto 0) := "11100110000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_14 : STD_LOGIC_VECTOR (10 downto 0) := "00000010100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv10_1CC : STD_LOGIC_VECTOR (9 downto 0) := "0111001100";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv25_73000 : STD_LOGIC_VECTOR (24 downto 0) := "0000001110011000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal empty_30_reg_968 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state16_io : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal empty_32_reg_972 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_32_reg_972_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln119_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal fm_blk_n_AW : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal fm_blk_n_W : STD_LOGIC;
    signal fm_blk_n_B : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln130_3_cast_fu_286_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln130_3_cast_reg_830 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln130_2_cast_fu_290_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln130_2_cast_reg_835 : STD_LOGIC_VECTOR (18 downto 0);
    signal icmp_ln119_reg_846 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln119_reg_846_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln119_reg_846_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln119_reg_846_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln119_reg_846_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln119_reg_846_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln119_reg_846_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln119_reg_846_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln119_reg_846_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln119_reg_846_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln119_reg_846_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln119_reg_846_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln119_reg_846_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln119_reg_846_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln119_1_fu_328_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_fu_358_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_reg_855 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln122_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_860 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_860_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_860_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_mid1102_fu_382_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_mid1102_reg_869 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln119_2_fu_387_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln119_2_reg_874 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln119_2_reg_874_pp0_iter12_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln119_2_reg_874_pp0_iter13_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln119_2_reg_874_pp0_iter14_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_879 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln130_fu_764_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln130_reg_884 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln130_1_fu_770_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln130_1_reg_889 : STD_LOGIC_VECTOR (24 downto 0);
    signal and_ln119_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln119_reg_894 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln119_reg_894_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln122_fu_458_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln122_reg_899 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln122_fu_469_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln122_reg_904 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln122_1_fu_477_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln122_1_reg_909 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln130_fu_504_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln130_reg_915 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln130_2_fu_542_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln130_2_reg_921 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln130_4_fu_551_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln130_4_reg_926 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln130_7_fu_613_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln130_7_reg_932 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln1696_1_fu_622_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1696_1_reg_937 : STD_LOGIC_VECTOR (8 downto 0);
    signal fm_addr_reg_962 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_30_fu_715_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_32_fu_721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_32_reg_972_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_32_reg_972_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_32_reg_972_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_32_reg_972_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_32_reg_972_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln128_fu_752_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln128_reg_976 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_condition_exit_pp0_iter14_stage0 : STD_LOGIC;
    signal zext_ln1696_2_fu_702_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln122_fu_698_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal j_fu_144 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln125_fu_485_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_148 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten91_fu_152 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln122_3_fu_404_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal f_fu_156 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten136_fu_160 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_indvar_flatten136_load : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_334_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_340_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_340_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln119_fu_354_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln119_fu_366_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln119_1_fu_378_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln122_1_fu_398_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln125_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln119_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln119_fu_431_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln122_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln122_fu_501_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln122_1_fu_509_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_27_fu_512_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln130_1_fu_525_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln2_fu_517_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln130_1_fu_537_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln125_fu_533_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln122_2_fu_548_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_563_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl1_fu_556_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1696_fu_570_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln122_3_fu_580_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_mid189_fu_583_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln130_1_mid1_fu_596_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln130_mid1_fu_588_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln130_6_fu_608_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln125_2_fu_604_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln1696_fu_574_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1696_1_fu_619_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln130_1_fu_628_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln130_5_fu_645_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln119_1_fu_636_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln130_8_fu_648_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln130_5_fu_641_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln130_3_fu_631_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_664_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_3_fu_674_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_s_fu_654_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal select_ln119_3_fu_684_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal select_ln122_2_fu_691_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_334_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_340_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_727_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_744_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1696_fu_740_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln130_fu_764_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln130_fu_764_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln130_1_fu_770_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln130_1_fu_770_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_334_ce : STD_LOGIC;
    signal grp_fu_340_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal mul_ln130_1_fu_770_p00 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln130_fu_764_p00 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component tiled_conv_urem_11ns_6ns_11_15_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component tiled_conv_mux_43_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component tiled_conv_mul_mul_6ns_19ns_25_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (18 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component tiled_conv_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    urem_11ns_6ns_11_15_1_U376 : component tiled_conv_urem_11ns_6ns_11_15_1
    generic map (
        ID => 1,
        NUM_STAGE => 15,
        din0_WIDTH => 11,
        din1_WIDTH => 6,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_sig_allocacmp_indvar_flatten136_load,
        din1 => grp_fu_334_p1,
        ce => grp_fu_334_ce,
        dout => grp_fu_334_p2);

    urem_11ns_6ns_11_15_1_U377 : component tiled_conv_urem_11ns_6ns_11_15_1
    generic map (
        ID => 1,
        NUM_STAGE => 15,
        din0_WIDTH => 11,
        din1_WIDTH => 6,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_340_p0,
        din1 => grp_fu_340_p1,
        ce => grp_fu_340_ce,
        dout => grp_fu_340_p2);

    mux_43_16_1_1_U378 : component tiled_conv_mux_43_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 3,
        dout_WIDTH => 16)
    port map (
        din0 => conv_out_buf_V_q0,
        din1 => conv_out_buf_1_q0,
        din2 => conv_out_buf_2_q0,
        din3 => conv_out_buf_3_q0,
        din4 => select_ln119_2_reg_874_pp0_iter14_reg,
        dout => tmp_fu_727_p6);

    mul_mul_6ns_19ns_25_1_1_U379 : component tiled_conv_mul_mul_6ns_19ns_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 19,
        dout_WIDTH => 25)
    port map (
        din0 => mul_ln130_fu_764_p0,
        din1 => mul_ln130_fu_764_p1,
        dout => mul_ln130_fu_764_p2);

    mul_mul_6ns_19ns_25_1_1_U380 : component tiled_conv_mul_mul_6ns_19ns_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 19,
        dout_WIDTH => 25)
    port map (
        din0 => mul_ln130_1_fu_770_p0,
        din1 => mul_ln130_1_fu_770_p1,
        dout => mul_ln130_1_fu_770_p2);

    flow_control_loop_pipe_sequential_init_U : component tiled_conv_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter20_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter14_stage0)) then 
                    ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    f_fu_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    f_fu_156 <= ap_const_lv3_0;
                elsif (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (icmp_ln119_reg_846_pp0_iter10_reg = ap_const_lv1_0))) then 
                    f_fu_156 <= select_ln119_2_fu_387_p3;
                end if;
            end if; 
        end if;
    end process;

    i_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    i_fu_148 <= ap_const_lv5_0;
                elsif (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (icmp_ln119_reg_846_pp0_iter11_reg = ap_const_lv1_0))) then 
                    i_fu_148 <= select_ln122_1_fu_477_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten136_fu_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln119_fu_322_p2 = ap_const_lv1_0))) then 
                    indvar_flatten136_fu_160 <= add_ln119_1_fu_328_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten136_fu_160 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten91_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    indvar_flatten91_fu_152 <= ap_const_lv10_0;
                elsif (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (icmp_ln119_reg_846_pp0_iter10_reg = ap_const_lv1_0))) then 
                    indvar_flatten91_fu_152 <= select_ln122_3_fu_404_p3;
                end if;
            end if; 
        end if;
    end process;

    j_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    j_fu_144 <= ap_const_lv5_0;
                elsif (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (icmp_ln119_reg_846_pp0_iter11_reg = ap_const_lv1_0))) then 
                    j_fu_144 <= add_ln125_fu_485_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln119_reg_846_pp0_iter11_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln122_reg_899 <= add_ln122_fu_458_p2;
                and_ln119_reg_894 <= and_ln119_fu_452_p2;
                mul_ln130_1_reg_889 <= mul_ln130_1_fu_770_p2;
                select_ln122_1_reg_909 <= select_ln122_1_fu_477_p3;
                select_ln122_reg_904 <= select_ln122_fu_469_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln122_reg_860_pp0_iter12_reg = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln119_reg_894) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln130_2_reg_921 <= add_ln130_2_fu_542_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln119_reg_846_pp0_iter12_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln130_4_reg_926 <= add_ln130_4_fu_551_p2;
                add_ln1696_1_reg_937 <= add_ln1696_1_fu_622_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln119_reg_846_pp0_iter12_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln119_reg_894))) then
                add_ln130_7_reg_932 <= add_ln130_7_fu_613_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln130_reg_915 <= add_ln130_fu_504_p2;
                and_ln119_reg_894_pp0_iter13_reg <= and_ln119_reg_894;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                empty_32_reg_972_pp0_iter15_reg <= empty_32_reg_972;
                empty_32_reg_972_pp0_iter16_reg <= empty_32_reg_972_pp0_iter15_reg;
                empty_32_reg_972_pp0_iter17_reg <= empty_32_reg_972_pp0_iter16_reg;
                empty_32_reg_972_pp0_iter18_reg <= empty_32_reg_972_pp0_iter17_reg;
                empty_32_reg_972_pp0_iter19_reg <= empty_32_reg_972_pp0_iter18_reg;
                empty_32_reg_972_pp0_iter20_reg <= empty_32_reg_972_pp0_iter19_reg;
                empty_reg_855 <= empty_fu_358_p2;
                i_1_reg_879 <= i_fu_148;
                icmp_ln119_reg_846_pp0_iter10_reg <= icmp_ln119_reg_846_pp0_iter9_reg;
                icmp_ln119_reg_846_pp0_iter11_reg <= icmp_ln119_reg_846_pp0_iter10_reg;
                icmp_ln119_reg_846_pp0_iter12_reg <= icmp_ln119_reg_846_pp0_iter11_reg;
                icmp_ln119_reg_846_pp0_iter13_reg <= icmp_ln119_reg_846_pp0_iter12_reg;
                icmp_ln119_reg_846_pp0_iter2_reg <= icmp_ln119_reg_846_pp0_iter1_reg;
                icmp_ln119_reg_846_pp0_iter3_reg <= icmp_ln119_reg_846_pp0_iter2_reg;
                icmp_ln119_reg_846_pp0_iter4_reg <= icmp_ln119_reg_846_pp0_iter3_reg;
                icmp_ln119_reg_846_pp0_iter5_reg <= icmp_ln119_reg_846_pp0_iter4_reg;
                icmp_ln119_reg_846_pp0_iter6_reg <= icmp_ln119_reg_846_pp0_iter5_reg;
                icmp_ln119_reg_846_pp0_iter7_reg <= icmp_ln119_reg_846_pp0_iter6_reg;
                icmp_ln119_reg_846_pp0_iter8_reg <= icmp_ln119_reg_846_pp0_iter7_reg;
                icmp_ln119_reg_846_pp0_iter9_reg <= icmp_ln119_reg_846_pp0_iter8_reg;
                icmp_ln122_reg_860_pp0_iter12_reg <= icmp_ln122_reg_860;
                icmp_ln122_reg_860_pp0_iter13_reg <= icmp_ln122_reg_860_pp0_iter12_reg;
                mul_ln130_reg_884 <= mul_ln130_fu_764_p2;
                select_ln119_2_reg_874_pp0_iter12_reg <= select_ln119_2_reg_874;
                select_ln119_2_reg_874_pp0_iter13_reg <= select_ln119_2_reg_874_pp0_iter12_reg;
                select_ln119_2_reg_874_pp0_iter14_reg <= select_ln119_2_reg_874_pp0_iter13_reg;
                select_ln128_reg_976 <= select_ln128_fu_752_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln119_reg_846 <= icmp_ln119_fu_322_p2;
                icmp_ln119_reg_846_pp0_iter1_reg <= icmp_ln119_reg_846;
                    zext_ln130_2_cast_reg_835(10 downto 0) <= zext_ln130_2_cast_fu_290_p1(10 downto 0);
                    zext_ln130_3_cast_reg_830(18 downto 0) <= zext_ln130_3_cast_fu_286_p1(18 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln119_reg_846_pp0_iter13_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_30_reg_968 <= empty_30_fu_715_p2;
                empty_32_reg_972 <= empty_32_fu_721_p2;
                fm_addr_reg_962 <= sext_ln122_fu_698_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln119_reg_846_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln122_reg_860 <= icmp_ln122_fu_372_p2;
                p_mid1102_reg_869 <= p_mid1102_fu_382_p2;
                select_ln119_2_reg_874 <= select_ln119_2_fu_387_p3;
            end if;
        end if;
    end process;
    zext_ln130_3_cast_reg_830(63 downto 19) <= "000000000000000000000000000000000000000000000";
    zext_ln130_2_cast_reg_835(18 downto 11) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln119_1_fu_328_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten136_load) + unsigned(ap_const_lv11_1));
    add_ln119_fu_366_p2 <= std_logic_vector(unsigned(f_fu_156) + unsigned(ap_const_lv3_1));
    add_ln122_1_fu_398_p2 <= std_logic_vector(unsigned(indvar_flatten91_fu_152) + unsigned(ap_const_lv10_1));
    add_ln122_fu_458_p2 <= std_logic_vector(unsigned(select_ln119_fu_431_p3) + unsigned(ap_const_lv5_1));
    add_ln125_fu_485_p2 <= std_logic_vector(unsigned(select_ln122_fu_469_p3) + unsigned(ap_const_lv5_1));
    add_ln130_1_fu_537_p2 <= std_logic_vector(unsigned(shl_ln2_fu_517_p3) + unsigned(zext_ln130_2_cast_reg_835));
    add_ln130_2_fu_542_p2 <= std_logic_vector(unsigned(add_ln130_1_fu_537_p2) + unsigned(zext_ln125_fu_533_p1));
    add_ln130_3_fu_631_p2 <= std_logic_vector(unsigned(zext_ln130_1_fu_628_p1) + unsigned(add_ln130_reg_915));
    add_ln130_4_fu_551_p2 <= std_logic_vector(unsigned(zext_ln122_2_fu_548_p1) + unsigned(output_feature_map));
    add_ln130_5_fu_641_p2 <= std_logic_vector(unsigned(zext_ln130_3_cast_reg_830) + unsigned(add_ln130_4_reg_926));
    add_ln130_6_fu_608_p2 <= std_logic_vector(unsigned(shl_ln130_mid1_fu_588_p3) + unsigned(zext_ln130_2_cast_reg_835));
    add_ln130_7_fu_613_p2 <= std_logic_vector(unsigned(add_ln130_6_fu_608_p2) + unsigned(zext_ln125_2_fu_604_p1));
    add_ln130_8_fu_648_p2 <= std_logic_vector(unsigned(zext_ln130_5_fu_645_p1) + unsigned(select_ln119_1_fu_636_p3));
    add_ln130_fu_504_p2 <= std_logic_vector(unsigned(zext_ln122_fu_501_p1) + unsigned(output_feature_map));
    add_ln1696_1_fu_622_p2 <= std_logic_vector(unsigned(add_ln1696_fu_574_p2) + unsigned(zext_ln1696_1_fu_619_p1));
    add_ln1696_fu_574_p2 <= std_logic_vector(unsigned(p_shl1_fu_556_p3) + unsigned(zext_ln1696_fu_570_p1));
    and_ln119_fu_452_p2 <= (xor_ln119_fu_441_p2 and icmp_ln125_fu_446_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter21, m_axi_fm_BVALID, empty_32_reg_972_pp0_iter20_reg)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (empty_32_reg_972_pp0_iter20_reg = ap_const_lv1_1) and (m_axi_fm_BVALID = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter21, m_axi_fm_WREADY, m_axi_fm_BVALID, ap_block_state16_io, empty_32_reg_972_pp0_iter20_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (empty_32_reg_972_pp0_iter20_reg = ap_const_lv1_1) and (m_axi_fm_BVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (m_axi_fm_WREADY = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state16_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter21, m_axi_fm_WREADY, m_axi_fm_BVALID, ap_block_state16_io, empty_32_reg_972_pp0_iter20_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (empty_32_reg_972_pp0_iter20_reg = ap_const_lv1_1) and (m_axi_fm_BVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (m_axi_fm_WREADY = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state16_io)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state16_io_assign_proc : process(m_axi_fm_AWREADY, empty_30_reg_968)
    begin
                ap_block_state16_io <= ((empty_30_reg_968 = ap_const_lv1_1) and (m_axi_fm_AWREADY = ap_const_logic_0));
    end process;

        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state22_pp0_stage0_iter21_assign_proc : process(m_axi_fm_BVALID, empty_32_reg_972_pp0_iter20_reg)
    begin
                ap_block_state22_pp0_stage0_iter21 <= ((empty_32_reg_972_pp0_iter20_reg = ap_const_lv1_1) and (m_axi_fm_BVALID = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln119_fu_322_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln119_fu_322_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter14_stage0_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_subdone, icmp_ln119_reg_846_pp0_iter13_reg)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (icmp_ln119_reg_846_pp0_iter13_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter14_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter14_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter20_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter20_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21)
    begin
        if (((ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten136_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten136_fu_160)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten136_load <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_indvar_flatten136_load <= indvar_flatten136_fu_160;
        end if; 
    end process;

    conv_out_buf_1_address0 <= zext_ln1696_2_fu_702_p1(9 - 1 downto 0);

    conv_out_buf_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_out_buf_1_ce0 <= ap_const_logic_1;
        else 
            conv_out_buf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_buf_2_address0 <= zext_ln1696_2_fu_702_p1(9 - 1 downto 0);

    conv_out_buf_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_out_buf_2_ce0 <= ap_const_logic_1;
        else 
            conv_out_buf_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_buf_3_address0 <= zext_ln1696_2_fu_702_p1(9 - 1 downto 0);

    conv_out_buf_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_out_buf_3_ce0 <= ap_const_logic_1;
        else 
            conv_out_buf_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_buf_V_address0 <= zext_ln1696_2_fu_702_p1(9 - 1 downto 0);

    conv_out_buf_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_out_buf_V_ce0 <= ap_const_logic_1;
        else 
            conv_out_buf_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_27_fu_512_p2 <= std_logic_vector(unsigned(zext_ln122_1_fu_509_p1) + unsigned(mul_ln39));
    empty_30_fu_715_p2 <= "1" when (grp_fu_334_p2 = ap_const_lv11_0) else "0";
    empty_32_fu_721_p2 <= "1" when (grp_fu_340_p2 = ap_const_lv11_0) else "0";
    empty_fu_358_p2 <= std_logic_vector(unsigned(zext_ln119_fu_354_p1) + unsigned(shl_ln70_1));

    fm_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter15, m_axi_fm_AWREADY, empty_30_reg_968, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (empty_30_reg_968 = ap_const_lv1_1))) then 
            fm_blk_n_AW <= m_axi_fm_AWREADY;
        else 
            fm_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    fm_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter21, m_axi_fm_BVALID, empty_32_reg_972_pp0_iter20_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (empty_32_reg_972_pp0_iter20_reg = ap_const_lv1_1))) then 
            fm_blk_n_B <= m_axi_fm_BVALID;
        else 
            fm_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    fm_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter16, m_axi_fm_WREADY, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            fm_blk_n_W <= m_axi_fm_WREADY;
        else 
            fm_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_334_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_334_ce <= ap_const_logic_1;
        else 
            grp_fu_334_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_334_p1 <= ap_const_lv11_14(6 - 1 downto 0);

    grp_fu_340_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_340_ce <= ap_const_logic_1;
        else 
            grp_fu_340_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_340_p0 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten136_load) + unsigned(ap_const_lv11_1));
    grp_fu_340_p1 <= ap_const_lv11_14(6 - 1 downto 0);
    icmp_ln119_fu_322_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten136_load = ap_const_lv11_730) else "0";
    icmp_ln122_fu_372_p2 <= "1" when (indvar_flatten91_fu_152 = ap_const_lv10_1CC) else "0";
    icmp_ln125_fu_446_p2 <= "1" when (j_fu_144 = ap_const_lv5_14) else "0";
    m_axi_fm_ARADDR <= ap_const_lv64_0;
    m_axi_fm_ARBURST <= ap_const_lv2_0;
    m_axi_fm_ARCACHE <= ap_const_lv4_0;
    m_axi_fm_ARID <= ap_const_lv1_0;
    m_axi_fm_ARLEN <= ap_const_lv32_0;
    m_axi_fm_ARLOCK <= ap_const_lv2_0;
    m_axi_fm_ARPROT <= ap_const_lv3_0;
    m_axi_fm_ARQOS <= ap_const_lv4_0;
    m_axi_fm_ARREGION <= ap_const_lv4_0;
    m_axi_fm_ARSIZE <= ap_const_lv3_0;
    m_axi_fm_ARUSER <= ap_const_lv1_0;
    m_axi_fm_ARVALID <= ap_const_logic_0;
    m_axi_fm_AWADDR <= fm_addr_reg_962;
    m_axi_fm_AWBURST <= ap_const_lv2_0;
    m_axi_fm_AWCACHE <= ap_const_lv4_0;
    m_axi_fm_AWID <= ap_const_lv1_0;
    m_axi_fm_AWLEN <= ap_const_lv32_14;
    m_axi_fm_AWLOCK <= ap_const_lv2_0;
    m_axi_fm_AWPROT <= ap_const_lv3_0;
    m_axi_fm_AWQOS <= ap_const_lv4_0;
    m_axi_fm_AWREGION <= ap_const_lv4_0;
    m_axi_fm_AWSIZE <= ap_const_lv3_0;
    m_axi_fm_AWUSER <= ap_const_lv1_0;

    m_axi_fm_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter15, empty_30_reg_968, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_30_reg_968 = ap_const_lv1_1))) then 
            m_axi_fm_AWVALID <= ap_const_logic_1;
        else 
            m_axi_fm_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_fm_BREADY_assign_proc : process(ap_enable_reg_pp0_iter21, empty_32_reg_972_pp0_iter20_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_32_reg_972_pp0_iter20_reg = ap_const_lv1_1))) then 
            m_axi_fm_BREADY <= ap_const_logic_1;
        else 
            m_axi_fm_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_fm_RREADY <= ap_const_logic_0;
    m_axi_fm_WDATA <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln128_reg_976),16));
    m_axi_fm_WID <= ap_const_lv1_0;
    m_axi_fm_WLAST <= ap_const_logic_0;
    m_axi_fm_WSTRB <= ap_const_lv2_3;
    m_axi_fm_WUSER <= ap_const_lv1_0;

    m_axi_fm_WVALID_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_fm_WVALID <= ap_const_logic_1;
        else 
            m_axi_fm_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln130_1_fu_770_p0 <= mul_ln130_1_fu_770_p00(6 - 1 downto 0);
    mul_ln130_1_fu_770_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_mid1102_reg_869),25));
    mul_ln130_1_fu_770_p1 <= ap_const_lv25_73000(19 - 1 downto 0);
    mul_ln130_fu_764_p0 <= mul_ln130_fu_764_p00(6 - 1 downto 0);
    mul_ln130_fu_764_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_855),25));
    mul_ln130_fu_764_p1 <= ap_const_lv25_73000(19 - 1 downto 0);
    or_ln122_fu_464_p2 <= (icmp_ln122_reg_860 or and_ln119_fu_452_p2);
    p_mid1102_fu_382_p2 <= std_logic_vector(unsigned(zext_ln119_1_fu_378_p1) + unsigned(shl_ln70_1));
    p_mid189_fu_583_p2 <= std_logic_vector(unsigned(zext_ln122_3_fu_580_p1) + unsigned(mul_ln39));
    p_shl1_fu_556_p3 <= (select_ln122_1_reg_909 & ap_const_lv4_0);
    select_ln119_1_fu_636_p3 <= 
        add_ln130_4_reg_926 when (icmp_ln122_reg_860_pp0_iter13_reg(0) = '1') else 
        add_ln130_reg_915;
    select_ln119_2_fu_387_p3 <= 
        add_ln119_fu_366_p2 when (icmp_ln122_fu_372_p2(0) = '1') else 
        f_fu_156;
    select_ln119_3_fu_684_p3 <= 
        tmp_2_fu_664_p4 when (icmp_ln122_reg_860_pp0_iter13_reg(0) = '1') else 
        tmp_3_fu_674_p4;
    select_ln119_fu_431_p3 <= 
        ap_const_lv5_0 when (icmp_ln122_reg_860(0) = '1') else 
        i_fu_148;
    select_ln122_1_fu_477_p3 <= 
        add_ln122_fu_458_p2 when (and_ln119_fu_452_p2(0) = '1') else 
        select_ln119_fu_431_p3;
    select_ln122_2_fu_691_p3 <= 
        tmp_s_fu_654_p4 when (and_ln119_reg_894_pp0_iter13_reg(0) = '1') else 
        select_ln119_3_fu_684_p3;
    select_ln122_3_fu_404_p3 <= 
        ap_const_lv10_1 when (icmp_ln122_fu_372_p2(0) = '1') else 
        add_ln122_1_fu_398_p2;
    select_ln122_fu_469_p3 <= 
        ap_const_lv5_0 when (or_ln122_fu_464_p2(0) = '1') else 
        j_fu_144;
    select_ln128_fu_752_p3 <= 
        ap_const_lv15_0 when (tmp_4_fu_744_p3(0) = '1') else 
        trunc_ln1696_fu_740_p1;
        sext_ln122_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln122_2_fu_691_p3),64));

    shl_ln130_1_fu_525_p3 <= (empty_27_fu_512_p2 & ap_const_lv8_0);
    shl_ln130_1_mid1_fu_596_p3 <= (p_mid189_fu_583_p2 & ap_const_lv8_0);
    shl_ln130_mid1_fu_588_p3 <= (p_mid189_fu_583_p2 & ap_const_lv10_0);
    shl_ln2_fu_517_p3 <= (empty_27_fu_512_p2 & ap_const_lv10_0);
    tmp_1_fu_563_p3 <= (select_ln122_1_reg_909 & ap_const_lv2_0);
    tmp_2_fu_664_p4 <= add_ln130_5_fu_641_p2(63 downto 1);
    tmp_3_fu_674_p4 <= add_ln130_3_fu_631_p2(63 downto 1);
    tmp_4_fu_744_p3 <= tmp_fu_727_p6(15 downto 15);
    tmp_s_fu_654_p4 <= add_ln130_8_fu_648_p2(63 downto 1);
    trunc_ln1696_fu_740_p1 <= tmp_fu_727_p6(15 - 1 downto 0);
    xor_ln119_fu_441_p2 <= (icmp_ln122_reg_860 xor ap_const_lv1_1);
    zext_ln119_1_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln119_fu_366_p2),6));
    zext_ln119_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_fu_156),6));
    zext_ln122_1_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_879),9));
    zext_ln122_2_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln130_1_reg_889),64));
    zext_ln122_3_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln122_reg_899),9));
    zext_ln122_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln130_reg_884),64));
    zext_ln125_2_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln130_1_mid1_fu_596_p3),19));
    zext_ln125_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln130_1_fu_525_p3),19));
    zext_ln130_1_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln130_2_reg_921),64));
    zext_ln130_2_cast_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln130_2),19));
    zext_ln130_3_cast_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln130_3),64));
    zext_ln130_5_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln130_7_reg_932),64));
    zext_ln1696_1_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln122_reg_904),9));
    zext_ln1696_2_fu_702_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1696_1_reg_937),64));
    zext_ln1696_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_563_p3),9));
end behav;
