-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tiled_conv_tiled_conv_Pipeline_CHANNEL_KERN_I is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    zext_ln63 : IN STD_LOGIC_VECTOR (14 downto 0);
    sub_ln1319 : IN STD_LOGIC_VECTOR (5 downto 0);
    conv_wt_buf_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv_wt_buf_V_ce0 : OUT STD_LOGIC;
    conv_wt_buf_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    select_ln45_4 : IN STD_LOGIC_VECTOR (5 downto 0);
    conv_in_buf_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    conv_in_buf_V_ce0 : OUT STD_LOGIC;
    conv_in_buf_V_q0 : IN STD_LOGIC_VECTOR (735 downto 0);
    zext_ln1317 : IN STD_LOGIC_VECTOR (9 downto 0);
    zext_ln1317_1 : IN STD_LOGIC_VECTOR (9 downto 0);
    zext_ln1317_2 : IN STD_LOGIC_VECTOR (9 downto 0);
    zext_ln1317_3 : IN STD_LOGIC_VECTOR (9 downto 0);
    zext_ln1317_4 : IN STD_LOGIC_VECTOR (9 downto 0);
    zext_ln1317_5 : IN STD_LOGIC_VECTOR (9 downto 0);
    zext_ln51_1 : IN STD_LOGIC_VECTOR (9 downto 0);
    conv_i_i96_lcssa15_i_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i96_lcssa15_i_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of tiled_conv_tiled_conv_Pipeline_CHANNEL_KERN_I is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv10_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000011";
    constant ap_const_lv10_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv10_5 : STD_LOGIC_VECTOR (9 downto 0) := "0000000101";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv10_6 : STD_LOGIC_VECTOR (9 downto 0) := "0000000110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv8_34 : STD_LOGIC_VECTOR (7 downto 0) := "00110100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage6_iter1 : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal icmp_ln51_reg_920 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage6 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal reg_255 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal reg_259 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal sub_ln1319_cast_fu_267_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln1319_cast_reg_915 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln51_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_load_reg_924 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln56_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_929 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln51_1_fu_324_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln51_1_reg_934 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln51_fu_346_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln51_reg_944 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln1319_1_fu_408_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln1319_1_reg_950 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal conv_in_buf_V_load_reg_986 : STD_LOGIC_VECTOR (735 downto 0);
    signal conv_wt_buf_V_load_6_reg_1082 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln1319_1_fu_414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln1319_2_fu_435_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal p_cast5_fu_440_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1319_3_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln1319_4_fu_459_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal zext_ln1319_5_fu_489_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal zext_ln1319_6_fu_532_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln1319_7_fu_570_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal conv_i_i96_lcssa15_i_fu_98 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln63_cast_fu_263_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_conv_i_i96_lcssa15_i_load_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_102 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln56_fu_514_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (2 downto 0);
    signal chan_fu_106 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_allocacmp_chan_load : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten117_fu_110 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln51_1_fu_300_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_indvar_flatten117_load : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal add_ln51_fu_312_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln51_1_cast1_fu_352_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1319_fu_355_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_364_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1319_fu_376_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal sext_ln1319_fu_360_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal sext_ln1319_1_fu_372_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal newFirst_fu_380_p2 : STD_LOGIC_VECTOR (60 downto 0);
    signal newSecond_fu_386_p2 : STD_LOGIC_VECTOR (60 downto 0);
    signal trunc_ln1319_1_fu_396_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_fu_400_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln1319_fu_392_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_3_cast_fu_418_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_39_fu_421_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln1319_1_fu_430_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_774_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1319_2_fu_444_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1319_3_fu_454_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1317_6_fu_464_p1 : STD_LOGIC_VECTOR (735 downto 0);
    signal lshr_ln1317_fu_467_p2 : STD_LOGIC_VECTOR (735 downto 0);
    signal trunc_ln1317_fu_472_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1319_4_fu_484_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1317_7_fu_494_p1 : STD_LOGIC_VECTOR (735 downto 0);
    signal lshr_ln1317_1_fu_497_p2 : STD_LOGIC_VECTOR (735 downto 0);
    signal trunc_ln1317_1_fu_502_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1319_5_fu_527_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1317_8_fu_545_p1 : STD_LOGIC_VECTOR (735 downto 0);
    signal lshr_ln1317_2_fu_548_p2 : STD_LOGIC_VECTOR (735 downto 0);
    signal trunc_ln1317_2_fu_553_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1319_6_fu_565_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_575_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_783_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_s_fu_575_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1317_9_fu_592_p1 : STD_LOGIC_VECTOR (735 downto 0);
    signal lshr_ln1317_3_fu_595_p2 : STD_LOGIC_VECTOR (735 downto 0);
    signal trunc_ln1317_3_fu_600_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_612_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_792_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_3_fu_612_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1317_10_fu_629_p1 : STD_LOGIC_VECTOR (735 downto 0);
    signal lshr_ln1317_4_fu_632_p2 : STD_LOGIC_VECTOR (735 downto 0);
    signal trunc_ln1317_4_fu_637_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_649_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_801_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_4_fu_649_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1317_11_fu_666_p1 : STD_LOGIC_VECTOR (735 downto 0);
    signal lshr_ln1317_5_fu_669_p2 : STD_LOGIC_VECTOR (735 downto 0);
    signal trunc_ln1317_5_fu_674_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_686_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_810_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_5_fu_686_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1317_12_fu_703_p1 : STD_LOGIC_VECTOR (735 downto 0);
    signal lshr_ln1317_6_fu_706_p2 : STD_LOGIC_VECTOR (735 downto 0);
    signal trunc_ln1317_6_fu_711_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_722_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_819_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_fu_722_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_739_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_828_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_7_fu_739_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln864_6_fu_756_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_837_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_774_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_774_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_774_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_783_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_792_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_801_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_810_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_819_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_828_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_837_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_774_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_774_p20 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component tiled_conv_mac_muladd_2ns_6ns_6ns_8_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component tiled_conv_mac_muladd_16s_16s_29ns_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component tiled_conv_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_muladd_2ns_6ns_6ns_8_4_1_U27 : component tiled_conv_mac_muladd_2ns_6ns_6ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 2,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_774_p0,
        din1 => grp_fu_774_p1,
        din2 => grp_fu_774_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_774_p3);

    mac_muladd_16s_16s_29ns_29_4_1_U28 : component tiled_conv_mac_muladd_16s_16s_29ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_255,
        din1 => trunc_ln1317_fu_472_p1,
        din2 => grp_fu_783_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_783_p3);

    mac_muladd_16s_16s_29ns_29_4_1_U29 : component tiled_conv_mac_muladd_16s_16s_29ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_259,
        din1 => trunc_ln1317_1_fu_502_p1,
        din2 => grp_fu_792_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_792_p3);

    mac_muladd_16s_16s_29ns_29_4_1_U30 : component tiled_conv_mac_muladd_16s_16s_29ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_255,
        din1 => trunc_ln1317_2_fu_553_p1,
        din2 => grp_fu_801_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_801_p3);

    mac_muladd_16s_16s_29ns_29_4_1_U31 : component tiled_conv_mac_muladd_16s_16s_29ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_259,
        din1 => trunc_ln1317_3_fu_600_p1,
        din2 => grp_fu_810_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_810_p3);

    mac_muladd_16s_16s_29ns_29_4_1_U32 : component tiled_conv_mac_muladd_16s_16s_29ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_255,
        din1 => trunc_ln1317_4_fu_637_p1,
        din2 => grp_fu_819_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_819_p3);

    mac_muladd_16s_16s_29ns_29_4_1_U33 : component tiled_conv_mac_muladd_16s_16s_29ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_259,
        din1 => trunc_ln1317_5_fu_674_p1,
        din2 => grp_fu_828_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_828_p3);

    mac_muladd_16s_16s_29ns_29_4_1_U34 : component tiled_conv_mac_muladd_16s_16s_29ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_wt_buf_V_load_6_reg_1082,
        din1 => trunc_ln1317_6_fu_711_p1,
        din2 => grp_fu_837_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_837_p3);

    flow_control_loop_pipe_sequential_init_U : component tiled_conv_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage6,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage6)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage6_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage6_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    chan_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln51_fu_294_p2 = ap_const_lv1_0))) then 
                    chan_fu_106 <= select_ln51_1_fu_324_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    chan_fu_106 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;

    conv_i_i96_lcssa15_i_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    conv_i_i96_lcssa15_i_fu_98 <= zext_ln63_cast_fu_263_p1;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    conv_i_i96_lcssa15_i_fu_98 <= trunc_ln864_6_fu_756_p1(28 downto 13);
                end if;
            end if; 
        end if;
    end process;

    i_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_fu_102 <= ap_const_lv3_0;
            elsif (((icmp_ln51_reg_920 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                i_fu_102 <= add_ln56_fu_514_p2;
            end if; 
        end if;
    end process;

    indvar_flatten117_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln51_fu_294_p2 = ap_const_lv1_0))) then 
                    indvar_flatten117_fu_110 <= add_ln51_1_fu_300_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten117_fu_110 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_reg_920 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                conv_in_buf_V_load_reg_986 <= conv_in_buf_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                conv_wt_buf_V_load_6_reg_1082 <= conv_wt_buf_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln51_fu_294_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_load_reg_924 <= ap_sig_allocacmp_i_load;
                icmp_ln56_reg_929 <= icmp_ln56_fu_318_p2;
                select_ln51_1_reg_934 <= select_ln51_1_fu_324_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln51_reg_920 <= icmp_ln51_fu_294_p2;
                sub_ln1319_cast_reg_915 <= sub_ln1319_cast_fu_267_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln51_reg_920 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((icmp_ln51_reg_920 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then
                reg_255 <= conv_wt_buf_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((icmp_ln51_reg_920 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((icmp_ln51_reg_920 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then
                reg_259 <= conv_wt_buf_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_reg_920 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                select_ln51_reg_944 <= select_ln51_fu_346_p3;
                sub_ln1319_1_reg_950 <= sub_ln1319_1_fu_408_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage6_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter1_stage0, ap_idle_pp0_0to0, ap_idle_pp0_1to2, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln1319_1_fu_430_p2 <= std_logic_vector(unsigned(sub_ln1319_1_reg_950) + unsigned(ap_const_lv10_1));
    add_ln1319_2_fu_444_p2 <= std_logic_vector(unsigned(sub_ln1319_1_reg_950) + unsigned(ap_const_lv10_2));
    add_ln1319_3_fu_454_p2 <= std_logic_vector(unsigned(sub_ln1319_1_reg_950) + unsigned(ap_const_lv10_3));
    add_ln1319_4_fu_484_p2 <= std_logic_vector(unsigned(sub_ln1319_1_reg_950) + unsigned(ap_const_lv10_4));
    add_ln1319_5_fu_527_p2 <= std_logic_vector(unsigned(sub_ln1319_1_reg_950) + unsigned(ap_const_lv10_5));
    add_ln1319_6_fu_565_p2 <= std_logic_vector(unsigned(sub_ln1319_1_reg_950) + unsigned(ap_const_lv10_6));
    add_ln1319_fu_355_p2 <= std_logic_vector(signed(sub_ln1319_cast_reg_915) + signed(select_ln51_1_cast1_fu_352_p1));
    add_ln51_1_fu_300_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten117_load) + unsigned(ap_const_lv5_1));
    add_ln51_fu_312_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_chan_load) + unsigned(ap_const_lv2_1));
    add_ln56_fu_514_p2 <= std_logic_vector(unsigned(select_ln51_reg_944) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage6_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage6_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_subdone, icmp_ln51_reg_920)
    begin
        if (((icmp_ln51_reg_920 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            ap_condition_exit_pp0_iter0_stage6 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln51_reg_920, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln51_reg_920 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage6;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage6_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_chan_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, chan_fu_106)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_chan_load <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_chan_load <= chan_fu_106;
        end if; 
    end process;


    ap_sig_allocacmp_conv_i_i96_lcssa15_i_load_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, conv_i_i96_lcssa15_i_fu_98, trunc_ln864_6_fu_756_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_conv_i_i96_lcssa15_i_load_1 <= trunc_ln864_6_fu_756_p1(28 downto 13);
        else 
            ap_sig_allocacmp_conv_i_i96_lcssa15_i_load_1 <= conv_i_i96_lcssa15_i_fu_98;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_102)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_102;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten117_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten117_fu_110)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten117_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_indvar_flatten117_load <= indvar_flatten117_fu_110;
        end if; 
    end process;

    conv_i_i96_lcssa15_i_out <= conv_i_i96_lcssa15_i_fu_98;

    conv_i_i96_lcssa15_i_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln51_reg_920, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln51_reg_920 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_i_i96_lcssa15_i_out_ap_vld <= ap_const_logic_1;
        else 
            conv_i_i96_lcssa15_i_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    conv_in_buf_V_address0 <= p_cast5_fu_440_p1(8 - 1 downto 0);

    conv_in_buf_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            conv_in_buf_V_ce0 <= ap_const_logic_1;
        else 
            conv_in_buf_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_wt_buf_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, zext_ln1319_1_fu_414_p1, ap_block_pp0_stage2, zext_ln1319_2_fu_435_p1, ap_block_pp0_stage3, zext_ln1319_3_fu_449_p1, ap_block_pp0_stage4, zext_ln1319_4_fu_459_p1, ap_block_pp0_stage5, zext_ln1319_5_fu_489_p1, ap_block_pp0_stage6, zext_ln1319_6_fu_532_p1, ap_block_pp0_stage0, zext_ln1319_7_fu_570_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            conv_wt_buf_V_address0 <= zext_ln1319_7_fu_570_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_wt_buf_V_address0 <= zext_ln1319_6_fu_532_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            conv_wt_buf_V_address0 <= zext_ln1319_5_fu_489_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            conv_wt_buf_V_address0 <= zext_ln1319_4_fu_459_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            conv_wt_buf_V_address0 <= zext_ln1319_3_fu_449_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            conv_wt_buf_V_address0 <= zext_ln1319_2_fu_435_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            conv_wt_buf_V_address0 <= zext_ln1319_1_fu_414_p1(10 - 1 downto 0);
        else 
            conv_wt_buf_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv_wt_buf_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            conv_wt_buf_V_ce0 <= ap_const_logic_1;
        else 
            conv_wt_buf_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_39_fu_421_p2 <= std_logic_vector(unsigned(i_3_cast_fu_418_p1) + unsigned(select_ln45_4));
    grp_fu_774_p0 <= grp_fu_774_p00(2 - 1 downto 0);
    grp_fu_774_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_1_fu_324_p3),8));
    grp_fu_774_p1 <= ap_const_lv8_34(6 - 1 downto 0);
    grp_fu_774_p2 <= grp_fu_774_p20(6 - 1 downto 0);
    grp_fu_774_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_39_fu_421_p2),8));
    grp_fu_783_p2 <= (ap_sig_allocacmp_conv_i_i96_lcssa15_i_load_1 & ap_const_lv13_0);
    grp_fu_792_p2 <= (tmp_s_fu_575_p4 & ap_const_lv13_0);
    grp_fu_801_p2 <= (tmp_3_fu_612_p4 & ap_const_lv13_0);
    grp_fu_810_p2 <= (tmp_4_fu_649_p4 & ap_const_lv13_0);
    grp_fu_819_p2 <= (tmp_5_fu_686_p4 & ap_const_lv13_0);
    grp_fu_828_p2 <= (tmp_6_fu_722_p4 & ap_const_lv13_0);
    grp_fu_837_p2 <= (tmp_7_fu_739_p4 & ap_const_lv13_0);
    i_3_cast_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_reg_944),6));
    icmp_ln51_fu_294_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten117_load = ap_const_lv5_15) else "0";
    icmp_ln56_fu_318_p2 <= "1" when (ap_sig_allocacmp_i_load = ap_const_lv3_7) else "0";
    lshr_ln1317_1_fu_497_p2 <= std_logic_vector(shift_right(unsigned(conv_in_buf_V_load_reg_986),to_integer(unsigned('0' & zext_ln1317_7_fu_494_p1(31-1 downto 0)))));
    lshr_ln1317_2_fu_548_p2 <= std_logic_vector(shift_right(unsigned(conv_in_buf_V_load_reg_986),to_integer(unsigned('0' & zext_ln1317_8_fu_545_p1(31-1 downto 0)))));
    lshr_ln1317_3_fu_595_p2 <= std_logic_vector(shift_right(unsigned(conv_in_buf_V_load_reg_986),to_integer(unsigned('0' & zext_ln1317_9_fu_592_p1(31-1 downto 0)))));
    lshr_ln1317_4_fu_632_p2 <= std_logic_vector(shift_right(unsigned(conv_in_buf_V_load_reg_986),to_integer(unsigned('0' & zext_ln1317_10_fu_629_p1(31-1 downto 0)))));
    lshr_ln1317_5_fu_669_p2 <= std_logic_vector(shift_right(unsigned(conv_in_buf_V_load_reg_986),to_integer(unsigned('0' & zext_ln1317_11_fu_666_p1(31-1 downto 0)))));
    lshr_ln1317_6_fu_706_p2 <= std_logic_vector(shift_right(unsigned(conv_in_buf_V_load_reg_986),to_integer(unsigned('0' & zext_ln1317_12_fu_703_p1(31-1 downto 0)))));
    lshr_ln1317_fu_467_p2 <= std_logic_vector(shift_right(unsigned(conv_in_buf_V_load_reg_986),to_integer(unsigned('0' & zext_ln1317_6_fu_464_p1(31-1 downto 0)))));
    newFirst_fu_380_p2 <= std_logic_vector(unsigned(zext_ln1319_fu_376_p1) - unsigned(sext_ln1319_fu_360_p1));
    newSecond_fu_386_p2 <= std_logic_vector(signed(sext_ln1319_1_fu_372_p1) + signed(newFirst_fu_380_p2));
    p_cast5_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_774_p3),64));
    p_shl_fu_400_p3 <= (trunc_ln1319_1_fu_396_p1 & ap_const_lv3_0);
    select_ln51_1_cast1_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_1_reg_934),7));
    select_ln51_1_fu_324_p3 <= 
        add_ln51_fu_312_p2 when (icmp_ln56_fu_318_p2(0) = '1') else 
        ap_sig_allocacmp_chan_load;
    select_ln51_fu_346_p3 <= 
        ap_const_lv3_0 when (icmp_ln56_reg_929(0) = '1') else 
        i_load_reg_924;
        sext_ln1319_1_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_364_p3),61));

        sext_ln1319_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1319_fu_355_p2),61));

    sub_ln1319_1_fu_408_p2 <= std_logic_vector(unsigned(p_shl_fu_400_p3) - unsigned(trunc_ln1319_fu_392_p1));
        sub_ln1319_cast_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1319),7));

    tmp_3_fu_612_p1 <= grp_fu_792_p3;
    tmp_3_fu_612_p4 <= tmp_3_fu_612_p1(28 downto 13);
    tmp_4_fu_649_p1 <= grp_fu_801_p3;
    tmp_4_fu_649_p4 <= tmp_4_fu_649_p1(28 downto 13);
    tmp_5_fu_686_p1 <= grp_fu_810_p3;
    tmp_5_fu_686_p4 <= tmp_5_fu_686_p1(28 downto 13);
    tmp_6_fu_722_p1 <= grp_fu_819_p3;
    tmp_6_fu_722_p4 <= tmp_6_fu_722_p1(28 downto 13);
    tmp_7_fu_739_p1 <= grp_fu_828_p3;
    tmp_7_fu_739_p4 <= tmp_7_fu_739_p1(28 downto 13);
    tmp_fu_364_p3 <= (add_ln1319_fu_355_p2 & ap_const_lv3_0);
    tmp_s_fu_575_p1 <= grp_fu_783_p3;
    tmp_s_fu_575_p4 <= tmp_s_fu_575_p1(28 downto 13);
    trunc_ln1317_1_fu_502_p1 <= lshr_ln1317_1_fu_497_p2(16 - 1 downto 0);
    trunc_ln1317_2_fu_553_p1 <= lshr_ln1317_2_fu_548_p2(16 - 1 downto 0);
    trunc_ln1317_3_fu_600_p1 <= lshr_ln1317_3_fu_595_p2(16 - 1 downto 0);
    trunc_ln1317_4_fu_637_p1 <= lshr_ln1317_4_fu_632_p2(16 - 1 downto 0);
    trunc_ln1317_5_fu_674_p1 <= lshr_ln1317_5_fu_669_p2(16 - 1 downto 0);
    trunc_ln1317_6_fu_711_p1 <= lshr_ln1317_6_fu_706_p2(16 - 1 downto 0);
    trunc_ln1317_fu_472_p1 <= lshr_ln1317_fu_467_p2(16 - 1 downto 0);
    trunc_ln1319_1_fu_396_p1 <= newSecond_fu_386_p2(7 - 1 downto 0);
    trunc_ln1319_fu_392_p1 <= newSecond_fu_386_p2(10 - 1 downto 0);
    trunc_ln864_6_fu_756_p1 <= grp_fu_837_p3;
    zext_ln1317_10_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln1317_4),736));
    zext_ln1317_11_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln1317_5),736));
    zext_ln1317_12_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln51_1),736));
    zext_ln1317_6_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln1317),736));
    zext_ln1317_7_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln1317_1),736));
    zext_ln1317_8_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln1317_2),736));
    zext_ln1317_9_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln1317_3),736));
    zext_ln1319_1_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1319_1_reg_950),64));
    zext_ln1319_2_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1319_1_fu_430_p2),64));
    zext_ln1319_3_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1319_2_fu_444_p2),64));
    zext_ln1319_4_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1319_3_fu_454_p2),64));
    zext_ln1319_5_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1319_4_fu_484_p2),64));
    zext_ln1319_6_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1319_5_fu_527_p2),64));
    zext_ln1319_7_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1319_6_fu_565_p2),64));
    zext_ln1319_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_fu_346_p3),61));
    zext_ln63_cast_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln63),16));
end behav;
