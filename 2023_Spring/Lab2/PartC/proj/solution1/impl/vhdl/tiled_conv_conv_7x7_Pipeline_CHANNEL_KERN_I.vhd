-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tiled_conv_conv_7x7_Pipeline_CHANNEL_KERN_I is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sub_ln1319 : IN STD_LOGIC_VECTOR (5 downto 0);
    W_buf_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_0_ce0 : OUT STD_LOGIC;
    W_buf_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_0_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_0_ce1 : OUT STD_LOGIC;
    W_buf_0_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_0_address2 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_0_ce2 : OUT STD_LOGIC;
    W_buf_0_q2 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_0_address3 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_0_ce3 : OUT STD_LOGIC;
    W_buf_0_q3 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_0_address4 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_0_ce4 : OUT STD_LOGIC;
    W_buf_0_q4 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_0_address5 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_0_ce5 : OUT STD_LOGIC;
    W_buf_0_q5 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_0_address6 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_0_ce6 : OUT STD_LOGIC;
    W_buf_0_q6 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_1_ce0 : OUT STD_LOGIC;
    W_buf_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_1_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_1_ce1 : OUT STD_LOGIC;
    W_buf_1_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_1_address2 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_1_ce2 : OUT STD_LOGIC;
    W_buf_1_q2 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_1_address3 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_1_ce3 : OUT STD_LOGIC;
    W_buf_1_q3 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_1_address4 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_1_ce4 : OUT STD_LOGIC;
    W_buf_1_q4 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_1_address5 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_1_ce5 : OUT STD_LOGIC;
    W_buf_1_q5 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_1_address6 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_1_ce6 : OUT STD_LOGIC;
    W_buf_1_q6 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_2_ce0 : OUT STD_LOGIC;
    W_buf_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_2_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_2_ce1 : OUT STD_LOGIC;
    W_buf_2_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_2_address2 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_2_ce2 : OUT STD_LOGIC;
    W_buf_2_q2 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_2_address3 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_2_ce3 : OUT STD_LOGIC;
    W_buf_2_q3 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_2_address4 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_2_ce4 : OUT STD_LOGIC;
    W_buf_2_q4 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_2_address5 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_2_ce5 : OUT STD_LOGIC;
    W_buf_2_q5 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_2_address6 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_2_ce6 : OUT STD_LOGIC;
    W_buf_2_q6 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_3_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_3_ce0 : OUT STD_LOGIC;
    W_buf_3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_3_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_3_ce1 : OUT STD_LOGIC;
    W_buf_3_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_3_address2 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_3_ce2 : OUT STD_LOGIC;
    W_buf_3_q2 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_3_address3 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_3_ce3 : OUT STD_LOGIC;
    W_buf_3_q3 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_3_address4 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_3_ce4 : OUT STD_LOGIC;
    W_buf_3_q4 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_3_address5 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_3_ce5 : OUT STD_LOGIC;
    W_buf_3_q5 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_3_address6 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_3_ce6 : OUT STD_LOGIC;
    W_buf_3_q6 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_4_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_4_ce0 : OUT STD_LOGIC;
    W_buf_4_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_4_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_4_ce1 : OUT STD_LOGIC;
    W_buf_4_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_4_address2 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_4_ce2 : OUT STD_LOGIC;
    W_buf_4_q2 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_4_address3 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_4_ce3 : OUT STD_LOGIC;
    W_buf_4_q3 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_4_address4 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_4_ce4 : OUT STD_LOGIC;
    W_buf_4_q4 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_4_address5 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_4_ce5 : OUT STD_LOGIC;
    W_buf_4_q5 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_4_address6 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_4_ce6 : OUT STD_LOGIC;
    W_buf_4_q6 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_5_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_5_ce0 : OUT STD_LOGIC;
    W_buf_5_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_5_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_5_ce1 : OUT STD_LOGIC;
    W_buf_5_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_5_address2 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_5_ce2 : OUT STD_LOGIC;
    W_buf_5_q2 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_5_address3 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_5_ce3 : OUT STD_LOGIC;
    W_buf_5_q3 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_5_address4 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_5_ce4 : OUT STD_LOGIC;
    W_buf_5_q4 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_5_address5 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_5_ce5 : OUT STD_LOGIC;
    W_buf_5_q5 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_5_address6 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_5_ce6 : OUT STD_LOGIC;
    W_buf_5_q6 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_6_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_6_ce0 : OUT STD_LOGIC;
    W_buf_6_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_6_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_6_ce1 : OUT STD_LOGIC;
    W_buf_6_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_6_address2 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_6_ce2 : OUT STD_LOGIC;
    W_buf_6_q2 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_6_address3 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_6_ce3 : OUT STD_LOGIC;
    W_buf_6_q3 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_6_address4 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_6_ce4 : OUT STD_LOGIC;
    W_buf_6_q4 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_6_address5 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_6_ce5 : OUT STD_LOGIC;
    W_buf_6_q5 : IN STD_LOGIC_VECTOR (15 downto 0);
    W_buf_6_address6 : OUT STD_LOGIC_VECTOR (6 downto 0);
    W_buf_6_ce6 : OUT STD_LOGIC;
    W_buf_6_q6 : IN STD_LOGIC_VECTOR (15 downto 0);
    select_ln34_4 : IN STD_LOGIC_VECTOR (5 downto 0);
    X_buf_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_0_ce0 : OUT STD_LOGIC;
    X_buf_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_1_ce0 : OUT STD_LOGIC;
    X_buf_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_2_ce0 : OUT STD_LOGIC;
    X_buf_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_3_ce0 : OUT STD_LOGIC;
    X_buf_3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_4_ce0 : OUT STD_LOGIC;
    X_buf_4_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_5_ce0 : OUT STD_LOGIC;
    X_buf_5_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_6_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_6_ce0 : OUT STD_LOGIC;
    X_buf_6_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_7_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_7_ce0 : OUT STD_LOGIC;
    X_buf_7_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_8_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_8_ce0 : OUT STD_LOGIC;
    X_buf_8_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_9_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_9_ce0 : OUT STD_LOGIC;
    X_buf_9_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_10_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_10_ce0 : OUT STD_LOGIC;
    X_buf_10_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_11_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_11_ce0 : OUT STD_LOGIC;
    X_buf_11_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_12_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_12_ce0 : OUT STD_LOGIC;
    X_buf_12_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_13_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_13_ce0 : OUT STD_LOGIC;
    X_buf_13_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_14_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_14_ce0 : OUT STD_LOGIC;
    X_buf_14_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_15_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_15_ce0 : OUT STD_LOGIC;
    X_buf_15_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_16_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_16_ce0 : OUT STD_LOGIC;
    X_buf_16_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_17_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_17_ce0 : OUT STD_LOGIC;
    X_buf_17_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_18_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_18_ce0 : OUT STD_LOGIC;
    X_buf_18_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_19_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_19_ce0 : OUT STD_LOGIC;
    X_buf_19_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_20_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_20_ce0 : OUT STD_LOGIC;
    X_buf_20_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_21_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_21_ce0 : OUT STD_LOGIC;
    X_buf_21_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_22_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_22_ce0 : OUT STD_LOGIC;
    X_buf_22_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_23_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_23_ce0 : OUT STD_LOGIC;
    X_buf_23_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_24_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_24_ce0 : OUT STD_LOGIC;
    X_buf_24_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_25_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_25_ce0 : OUT STD_LOGIC;
    X_buf_25_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_26_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_26_ce0 : OUT STD_LOGIC;
    X_buf_26_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_27_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_27_ce0 : OUT STD_LOGIC;
    X_buf_27_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_28_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_28_ce0 : OUT STD_LOGIC;
    X_buf_28_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_29_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_29_ce0 : OUT STD_LOGIC;
    X_buf_29_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_30_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_30_ce0 : OUT STD_LOGIC;
    X_buf_30_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_31_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_31_ce0 : OUT STD_LOGIC;
    X_buf_31_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_32_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_32_ce0 : OUT STD_LOGIC;
    X_buf_32_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_33_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_33_ce0 : OUT STD_LOGIC;
    X_buf_33_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_34_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_34_ce0 : OUT STD_LOGIC;
    X_buf_34_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_35_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_35_ce0 : OUT STD_LOGIC;
    X_buf_35_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_36_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_36_ce0 : OUT STD_LOGIC;
    X_buf_36_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_37_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_37_ce0 : OUT STD_LOGIC;
    X_buf_37_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_38_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_38_ce0 : OUT STD_LOGIC;
    X_buf_38_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_39_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_39_ce0 : OUT STD_LOGIC;
    X_buf_39_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_40_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_40_ce0 : OUT STD_LOGIC;
    X_buf_40_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_41_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_41_ce0 : OUT STD_LOGIC;
    X_buf_41_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_42_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_42_ce0 : OUT STD_LOGIC;
    X_buf_42_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_43_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_43_ce0 : OUT STD_LOGIC;
    X_buf_43_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    X_buf_44_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_buf_44_ce0 : OUT STD_LOGIC;
    X_buf_44_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    select_ln34_1 : IN STD_LOGIC_VECTOR (5 downto 0);
    or_ln52 : IN STD_LOGIC_VECTOR (5 downto 0);
    add_ln52_2 : IN STD_LOGIC_VECTOR (5 downto 0);
    add_ln52_3 : IN STD_LOGIC_VECTOR (5 downto 0);
    add_ln52_4 : IN STD_LOGIC_VECTOR (5 downto 0);
    add_ln52 : IN STD_LOGIC_VECTOR (5 downto 0);
    add_ln52_5 : IN STD_LOGIC_VECTOR (5 downto 0);
    val_V_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    val_V_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of tiled_conv_conv_7x7_Pipeline_CHANNEL_KERN_I is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv8_34 : STD_LOGIC_VECTOR (7 downto 0) := "00110100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln42_fu_1511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln42_reg_2819 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_reg_2819_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_reg_2819_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_reg_2819_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln42_fu_1538_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln42_reg_2823 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln42_reg_2823_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln42_1_fu_1568_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln42_1_reg_2835 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln42_2_fu_1576_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln42_2_reg_2840 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp1_fu_1774_p43 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_reg_3321 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_1861_p9 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_reg_3326 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_1880_p46 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_reg_3331 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_1_fu_1973_p9 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_1_reg_3336 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_1992_p43 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_reg_3341 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_2_fu_2079_p9 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_2_reg_3346 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_2098_p44 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_reg_3351 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_3_fu_2187_p9 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_3_reg_3356 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_2206_p45 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_reg_3361 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_4_fu_2297_p9 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_4_reg_3366 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_2316_p46 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_reg_3371 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_5_fu_2409_p9 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_5_reg_3376 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_2428_p47 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_reg_3381 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_6_fu_2523_p9 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_6_reg_3386 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln864_fu_2708_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln864_reg_3391 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln864_1_fu_2714_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln864_1_reg_3396 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln864_2_fu_2720_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln864_2_reg_3401 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln864_3_fu_2726_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln864_3_reg_3406 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln864_4_fu_2732_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln864_4_reg_3411 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln864_5_fu_2738_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln864_5_reg_3416 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln864_6_fu_2744_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln864_6_reg_3421 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln859_1_fu_2653_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_1_reg_3426 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_4_fu_2671_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_4_reg_3431 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1319_2_fu_1608_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln1319_3_fu_1623_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1319_4_fu_1639_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1319_5_fu_1655_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1319_6_fu_1671_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1319_7_fu_1687_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1319_8_fu_1703_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_fu_1726_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal val_V_fu_202 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_6_fu_2684_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_206 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln45_fu_1584_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (2 downto 0);
    signal chan_fu_210 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_allocacmp_chan_1 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_fu_214 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln42_3_fu_1517_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal sub_ln1319_cast_fu_1459_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1319_fu_1489_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1319_fu_1493_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln1319_fu_1499_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln45_fu_1532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln42_fu_1526_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln1319_1_fu_1546_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1319_1_fu_1550_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln1319_1_fu_1556_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln1319_2_fu_1562_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln1319_1_fu_1505_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln42_4_fu_1618_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln42_5_fu_1634_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln42_6_fu_1650_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln42_7_fu_1666_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln42_8_fu_1682_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln42_9_fu_1698_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_cast_fu_1714_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_60_fu_1717_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_2699_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln864_1_fu_2593_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln864_2_fu_2602_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_fu_2647_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_fu_2584_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln864_4_fu_2620_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln864_3_fu_2611_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_2_fu_2659_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln864_5_fu_2629_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_3_fu_2665_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln864_6_fu_2638_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln859_5_fu_2680_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2699_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_2699_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_2699_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_2699_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2699_p20 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component tiled_conv_mux_416_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (15 downto 0);
        din11 : IN STD_LOGIC_VECTOR (15 downto 0);
        din12 : IN STD_LOGIC_VECTOR (15 downto 0);
        din13 : IN STD_LOGIC_VECTOR (15 downto 0);
        din14 : IN STD_LOGIC_VECTOR (15 downto 0);
        din15 : IN STD_LOGIC_VECTOR (15 downto 0);
        din16 : IN STD_LOGIC_VECTOR (15 downto 0);
        din17 : IN STD_LOGIC_VECTOR (15 downto 0);
        din18 : IN STD_LOGIC_VECTOR (15 downto 0);
        din19 : IN STD_LOGIC_VECTOR (15 downto 0);
        din20 : IN STD_LOGIC_VECTOR (15 downto 0);
        din21 : IN STD_LOGIC_VECTOR (15 downto 0);
        din22 : IN STD_LOGIC_VECTOR (15 downto 0);
        din23 : IN STD_LOGIC_VECTOR (15 downto 0);
        din24 : IN STD_LOGIC_VECTOR (15 downto 0);
        din25 : IN STD_LOGIC_VECTOR (15 downto 0);
        din26 : IN STD_LOGIC_VECTOR (15 downto 0);
        din27 : IN STD_LOGIC_VECTOR (15 downto 0);
        din28 : IN STD_LOGIC_VECTOR (15 downto 0);
        din29 : IN STD_LOGIC_VECTOR (15 downto 0);
        din30 : IN STD_LOGIC_VECTOR (15 downto 0);
        din31 : IN STD_LOGIC_VECTOR (15 downto 0);
        din32 : IN STD_LOGIC_VECTOR (15 downto 0);
        din33 : IN STD_LOGIC_VECTOR (15 downto 0);
        din34 : IN STD_LOGIC_VECTOR (15 downto 0);
        din35 : IN STD_LOGIC_VECTOR (15 downto 0);
        din36 : IN STD_LOGIC_VECTOR (15 downto 0);
        din37 : IN STD_LOGIC_VECTOR (15 downto 0);
        din38 : IN STD_LOGIC_VECTOR (15 downto 0);
        din39 : IN STD_LOGIC_VECTOR (15 downto 0);
        din40 : IN STD_LOGIC_VECTOR (15 downto 0);
        din41 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component tiled_conv_mux_73_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component tiled_conv_mux_446_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (15 downto 0);
        din11 : IN STD_LOGIC_VECTOR (15 downto 0);
        din12 : IN STD_LOGIC_VECTOR (15 downto 0);
        din13 : IN STD_LOGIC_VECTOR (15 downto 0);
        din14 : IN STD_LOGIC_VECTOR (15 downto 0);
        din15 : IN STD_LOGIC_VECTOR (15 downto 0);
        din16 : IN STD_LOGIC_VECTOR (15 downto 0);
        din17 : IN STD_LOGIC_VECTOR (15 downto 0);
        din18 : IN STD_LOGIC_VECTOR (15 downto 0);
        din19 : IN STD_LOGIC_VECTOR (15 downto 0);
        din20 : IN STD_LOGIC_VECTOR (15 downto 0);
        din21 : IN STD_LOGIC_VECTOR (15 downto 0);
        din22 : IN STD_LOGIC_VECTOR (15 downto 0);
        din23 : IN STD_LOGIC_VECTOR (15 downto 0);
        din24 : IN STD_LOGIC_VECTOR (15 downto 0);
        din25 : IN STD_LOGIC_VECTOR (15 downto 0);
        din26 : IN STD_LOGIC_VECTOR (15 downto 0);
        din27 : IN STD_LOGIC_VECTOR (15 downto 0);
        din28 : IN STD_LOGIC_VECTOR (15 downto 0);
        din29 : IN STD_LOGIC_VECTOR (15 downto 0);
        din30 : IN STD_LOGIC_VECTOR (15 downto 0);
        din31 : IN STD_LOGIC_VECTOR (15 downto 0);
        din32 : IN STD_LOGIC_VECTOR (15 downto 0);
        din33 : IN STD_LOGIC_VECTOR (15 downto 0);
        din34 : IN STD_LOGIC_VECTOR (15 downto 0);
        din35 : IN STD_LOGIC_VECTOR (15 downto 0);
        din36 : IN STD_LOGIC_VECTOR (15 downto 0);
        din37 : IN STD_LOGIC_VECTOR (15 downto 0);
        din38 : IN STD_LOGIC_VECTOR (15 downto 0);
        din39 : IN STD_LOGIC_VECTOR (15 downto 0);
        din40 : IN STD_LOGIC_VECTOR (15 downto 0);
        din41 : IN STD_LOGIC_VECTOR (15 downto 0);
        din42 : IN STD_LOGIC_VECTOR (15 downto 0);
        din43 : IN STD_LOGIC_VECTOR (15 downto 0);
        din44 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component tiled_conv_mux_426_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (15 downto 0);
        din11 : IN STD_LOGIC_VECTOR (15 downto 0);
        din12 : IN STD_LOGIC_VECTOR (15 downto 0);
        din13 : IN STD_LOGIC_VECTOR (15 downto 0);
        din14 : IN STD_LOGIC_VECTOR (15 downto 0);
        din15 : IN STD_LOGIC_VECTOR (15 downto 0);
        din16 : IN STD_LOGIC_VECTOR (15 downto 0);
        din17 : IN STD_LOGIC_VECTOR (15 downto 0);
        din18 : IN STD_LOGIC_VECTOR (15 downto 0);
        din19 : IN STD_LOGIC_VECTOR (15 downto 0);
        din20 : IN STD_LOGIC_VECTOR (15 downto 0);
        din21 : IN STD_LOGIC_VECTOR (15 downto 0);
        din22 : IN STD_LOGIC_VECTOR (15 downto 0);
        din23 : IN STD_LOGIC_VECTOR (15 downto 0);
        din24 : IN STD_LOGIC_VECTOR (15 downto 0);
        din25 : IN STD_LOGIC_VECTOR (15 downto 0);
        din26 : IN STD_LOGIC_VECTOR (15 downto 0);
        din27 : IN STD_LOGIC_VECTOR (15 downto 0);
        din28 : IN STD_LOGIC_VECTOR (15 downto 0);
        din29 : IN STD_LOGIC_VECTOR (15 downto 0);
        din30 : IN STD_LOGIC_VECTOR (15 downto 0);
        din31 : IN STD_LOGIC_VECTOR (15 downto 0);
        din32 : IN STD_LOGIC_VECTOR (15 downto 0);
        din33 : IN STD_LOGIC_VECTOR (15 downto 0);
        din34 : IN STD_LOGIC_VECTOR (15 downto 0);
        din35 : IN STD_LOGIC_VECTOR (15 downto 0);
        din36 : IN STD_LOGIC_VECTOR (15 downto 0);
        din37 : IN STD_LOGIC_VECTOR (15 downto 0);
        din38 : IN STD_LOGIC_VECTOR (15 downto 0);
        din39 : IN STD_LOGIC_VECTOR (15 downto 0);
        din40 : IN STD_LOGIC_VECTOR (15 downto 0);
        din41 : IN STD_LOGIC_VECTOR (15 downto 0);
        din42 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component tiled_conv_mux_436_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (15 downto 0);
        din11 : IN STD_LOGIC_VECTOR (15 downto 0);
        din12 : IN STD_LOGIC_VECTOR (15 downto 0);
        din13 : IN STD_LOGIC_VECTOR (15 downto 0);
        din14 : IN STD_LOGIC_VECTOR (15 downto 0);
        din15 : IN STD_LOGIC_VECTOR (15 downto 0);
        din16 : IN STD_LOGIC_VECTOR (15 downto 0);
        din17 : IN STD_LOGIC_VECTOR (15 downto 0);
        din18 : IN STD_LOGIC_VECTOR (15 downto 0);
        din19 : IN STD_LOGIC_VECTOR (15 downto 0);
        din20 : IN STD_LOGIC_VECTOR (15 downto 0);
        din21 : IN STD_LOGIC_VECTOR (15 downto 0);
        din22 : IN STD_LOGIC_VECTOR (15 downto 0);
        din23 : IN STD_LOGIC_VECTOR (15 downto 0);
        din24 : IN STD_LOGIC_VECTOR (15 downto 0);
        din25 : IN STD_LOGIC_VECTOR (15 downto 0);
        din26 : IN STD_LOGIC_VECTOR (15 downto 0);
        din27 : IN STD_LOGIC_VECTOR (15 downto 0);
        din28 : IN STD_LOGIC_VECTOR (15 downto 0);
        din29 : IN STD_LOGIC_VECTOR (15 downto 0);
        din30 : IN STD_LOGIC_VECTOR (15 downto 0);
        din31 : IN STD_LOGIC_VECTOR (15 downto 0);
        din32 : IN STD_LOGIC_VECTOR (15 downto 0);
        din33 : IN STD_LOGIC_VECTOR (15 downto 0);
        din34 : IN STD_LOGIC_VECTOR (15 downto 0);
        din35 : IN STD_LOGIC_VECTOR (15 downto 0);
        din36 : IN STD_LOGIC_VECTOR (15 downto 0);
        din37 : IN STD_LOGIC_VECTOR (15 downto 0);
        din38 : IN STD_LOGIC_VECTOR (15 downto 0);
        din39 : IN STD_LOGIC_VECTOR (15 downto 0);
        din40 : IN STD_LOGIC_VECTOR (15 downto 0);
        din41 : IN STD_LOGIC_VECTOR (15 downto 0);
        din42 : IN STD_LOGIC_VECTOR (15 downto 0);
        din43 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component tiled_conv_mux_456_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (15 downto 0);
        din11 : IN STD_LOGIC_VECTOR (15 downto 0);
        din12 : IN STD_LOGIC_VECTOR (15 downto 0);
        din13 : IN STD_LOGIC_VECTOR (15 downto 0);
        din14 : IN STD_LOGIC_VECTOR (15 downto 0);
        din15 : IN STD_LOGIC_VECTOR (15 downto 0);
        din16 : IN STD_LOGIC_VECTOR (15 downto 0);
        din17 : IN STD_LOGIC_VECTOR (15 downto 0);
        din18 : IN STD_LOGIC_VECTOR (15 downto 0);
        din19 : IN STD_LOGIC_VECTOR (15 downto 0);
        din20 : IN STD_LOGIC_VECTOR (15 downto 0);
        din21 : IN STD_LOGIC_VECTOR (15 downto 0);
        din22 : IN STD_LOGIC_VECTOR (15 downto 0);
        din23 : IN STD_LOGIC_VECTOR (15 downto 0);
        din24 : IN STD_LOGIC_VECTOR (15 downto 0);
        din25 : IN STD_LOGIC_VECTOR (15 downto 0);
        din26 : IN STD_LOGIC_VECTOR (15 downto 0);
        din27 : IN STD_LOGIC_VECTOR (15 downto 0);
        din28 : IN STD_LOGIC_VECTOR (15 downto 0);
        din29 : IN STD_LOGIC_VECTOR (15 downto 0);
        din30 : IN STD_LOGIC_VECTOR (15 downto 0);
        din31 : IN STD_LOGIC_VECTOR (15 downto 0);
        din32 : IN STD_LOGIC_VECTOR (15 downto 0);
        din33 : IN STD_LOGIC_VECTOR (15 downto 0);
        din34 : IN STD_LOGIC_VECTOR (15 downto 0);
        din35 : IN STD_LOGIC_VECTOR (15 downto 0);
        din36 : IN STD_LOGIC_VECTOR (15 downto 0);
        din37 : IN STD_LOGIC_VECTOR (15 downto 0);
        din38 : IN STD_LOGIC_VECTOR (15 downto 0);
        din39 : IN STD_LOGIC_VECTOR (15 downto 0);
        din40 : IN STD_LOGIC_VECTOR (15 downto 0);
        din41 : IN STD_LOGIC_VECTOR (15 downto 0);
        din42 : IN STD_LOGIC_VECTOR (15 downto 0);
        din43 : IN STD_LOGIC_VECTOR (15 downto 0);
        din44 : IN STD_LOGIC_VECTOR (15 downto 0);
        din45 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component tiled_conv_mac_muladd_2ns_6ns_6ns_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component tiled_conv_mul_mul_16s_16s_29_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component tiled_conv_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_416_16_1_1_U146 : component tiled_conv_mux_416_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 16,
        din17_WIDTH => 16,
        din18_WIDTH => 16,
        din19_WIDTH => 16,
        din20_WIDTH => 16,
        din21_WIDTH => 16,
        din22_WIDTH => 16,
        din23_WIDTH => 16,
        din24_WIDTH => 16,
        din25_WIDTH => 16,
        din26_WIDTH => 16,
        din27_WIDTH => 16,
        din28_WIDTH => 16,
        din29_WIDTH => 16,
        din30_WIDTH => 16,
        din31_WIDTH => 16,
        din32_WIDTH => 16,
        din33_WIDTH => 16,
        din34_WIDTH => 16,
        din35_WIDTH => 16,
        din36_WIDTH => 16,
        din37_WIDTH => 16,
        din38_WIDTH => 16,
        din39_WIDTH => 16,
        din40_WIDTH => 16,
        din41_WIDTH => 6,
        dout_WIDTH => 16)
    port map (
        din0 => X_buf_0_q0,
        din1 => ap_const_lv16_0,
        din2 => X_buf_2_q0,
        din3 => ap_const_lv16_0,
        din4 => X_buf_4_q0,
        din5 => ap_const_lv16_0,
        din6 => X_buf_6_q0,
        din7 => ap_const_lv16_0,
        din8 => X_buf_8_q0,
        din9 => ap_const_lv16_0,
        din10 => X_buf_10_q0,
        din11 => ap_const_lv16_0,
        din12 => X_buf_12_q0,
        din13 => ap_const_lv16_0,
        din14 => X_buf_14_q0,
        din15 => ap_const_lv16_0,
        din16 => X_buf_16_q0,
        din17 => ap_const_lv16_0,
        din18 => X_buf_18_q0,
        din19 => ap_const_lv16_0,
        din20 => X_buf_20_q0,
        din21 => ap_const_lv16_0,
        din22 => X_buf_22_q0,
        din23 => ap_const_lv16_0,
        din24 => X_buf_24_q0,
        din25 => ap_const_lv16_0,
        din26 => X_buf_26_q0,
        din27 => ap_const_lv16_0,
        din28 => X_buf_28_q0,
        din29 => ap_const_lv16_0,
        din30 => X_buf_30_q0,
        din31 => ap_const_lv16_0,
        din32 => X_buf_32_q0,
        din33 => ap_const_lv16_0,
        din34 => X_buf_34_q0,
        din35 => ap_const_lv16_0,
        din36 => X_buf_36_q0,
        din37 => ap_const_lv16_0,
        din38 => X_buf_38_q0,
        din39 => ap_const_lv16_0,
        din40 => X_buf_40_q0,
        din41 => select_ln34_1,
        dout => tmp1_fu_1774_p43);

    mux_73_16_1_1_U147 : component tiled_conv_mux_73_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 3,
        dout_WIDTH => 16)
    port map (
        din0 => W_buf_0_q6,
        din1 => W_buf_1_q6,
        din2 => W_buf_2_q6,
        din3 => W_buf_3_q6,
        din4 => W_buf_4_q6,
        din5 => W_buf_5_q6,
        din6 => W_buf_6_q6,
        din7 => select_ln42_reg_2823_pp0_iter1_reg,
        dout => tmp_1_fu_1861_p9);

    mux_446_16_1_1_U148 : component tiled_conv_mux_446_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 16,
        din17_WIDTH => 16,
        din18_WIDTH => 16,
        din19_WIDTH => 16,
        din20_WIDTH => 16,
        din21_WIDTH => 16,
        din22_WIDTH => 16,
        din23_WIDTH => 16,
        din24_WIDTH => 16,
        din25_WIDTH => 16,
        din26_WIDTH => 16,
        din27_WIDTH => 16,
        din28_WIDTH => 16,
        din29_WIDTH => 16,
        din30_WIDTH => 16,
        din31_WIDTH => 16,
        din32_WIDTH => 16,
        din33_WIDTH => 16,
        din34_WIDTH => 16,
        din35_WIDTH => 16,
        din36_WIDTH => 16,
        din37_WIDTH => 16,
        din38_WIDTH => 16,
        din39_WIDTH => 16,
        din40_WIDTH => 16,
        din41_WIDTH => 16,
        din42_WIDTH => 16,
        din43_WIDTH => 16,
        din44_WIDTH => 6,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_0,
        din1 => X_buf_1_q0,
        din2 => ap_const_lv16_0,
        din3 => X_buf_3_q0,
        din4 => ap_const_lv16_0,
        din5 => X_buf_5_q0,
        din6 => ap_const_lv16_0,
        din7 => X_buf_7_q0,
        din8 => ap_const_lv16_0,
        din9 => X_buf_9_q0,
        din10 => ap_const_lv16_0,
        din11 => X_buf_11_q0,
        din12 => ap_const_lv16_0,
        din13 => X_buf_13_q0,
        din14 => ap_const_lv16_0,
        din15 => X_buf_15_q0,
        din16 => ap_const_lv16_0,
        din17 => X_buf_17_q0,
        din18 => ap_const_lv16_0,
        din19 => X_buf_19_q0,
        din20 => ap_const_lv16_0,
        din21 => X_buf_21_q0,
        din22 => ap_const_lv16_0,
        din23 => X_buf_23_q0,
        din24 => ap_const_lv16_0,
        din25 => X_buf_25_q0,
        din26 => ap_const_lv16_0,
        din27 => X_buf_27_q0,
        din28 => ap_const_lv16_0,
        din29 => X_buf_29_q0,
        din30 => ap_const_lv16_0,
        din31 => X_buf_31_q0,
        din32 => ap_const_lv16_0,
        din33 => X_buf_33_q0,
        din34 => ap_const_lv16_0,
        din35 => X_buf_35_q0,
        din36 => ap_const_lv16_0,
        din37 => X_buf_37_q0,
        din38 => ap_const_lv16_0,
        din39 => X_buf_39_q0,
        din40 => ap_const_lv16_0,
        din41 => X_buf_41_q0,
        din42 => ap_const_lv16_0,
        din43 => X_buf_43_q0,
        din44 => or_ln52,
        dout => tmp_s_fu_1880_p46);

    mux_73_16_1_1_U149 : component tiled_conv_mux_73_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 3,
        dout_WIDTH => 16)
    port map (
        din0 => W_buf_0_q5,
        din1 => W_buf_1_q5,
        din2 => W_buf_2_q5,
        din3 => W_buf_3_q5,
        din4 => W_buf_4_q5,
        din5 => W_buf_5_q5,
        din6 => W_buf_6_q5,
        din7 => select_ln42_reg_2823_pp0_iter1_reg,
        dout => tmp_1_1_fu_1973_p9);

    mux_416_16_1_1_U150 : component tiled_conv_mux_416_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 16,
        din17_WIDTH => 16,
        din18_WIDTH => 16,
        din19_WIDTH => 16,
        din20_WIDTH => 16,
        din21_WIDTH => 16,
        din22_WIDTH => 16,
        din23_WIDTH => 16,
        din24_WIDTH => 16,
        din25_WIDTH => 16,
        din26_WIDTH => 16,
        din27_WIDTH => 16,
        din28_WIDTH => 16,
        din29_WIDTH => 16,
        din30_WIDTH => 16,
        din31_WIDTH => 16,
        din32_WIDTH => 16,
        din33_WIDTH => 16,
        din34_WIDTH => 16,
        din35_WIDTH => 16,
        din36_WIDTH => 16,
        din37_WIDTH => 16,
        din38_WIDTH => 16,
        din39_WIDTH => 16,
        din40_WIDTH => 16,
        din41_WIDTH => 6,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_0,
        din1 => ap_const_lv16_0,
        din2 => X_buf_2_q0,
        din3 => ap_const_lv16_0,
        din4 => X_buf_4_q0,
        din5 => ap_const_lv16_0,
        din6 => X_buf_6_q0,
        din7 => ap_const_lv16_0,
        din8 => X_buf_8_q0,
        din9 => ap_const_lv16_0,
        din10 => X_buf_10_q0,
        din11 => ap_const_lv16_0,
        din12 => X_buf_12_q0,
        din13 => ap_const_lv16_0,
        din14 => X_buf_14_q0,
        din15 => ap_const_lv16_0,
        din16 => X_buf_16_q0,
        din17 => ap_const_lv16_0,
        din18 => X_buf_18_q0,
        din19 => ap_const_lv16_0,
        din20 => X_buf_20_q0,
        din21 => ap_const_lv16_0,
        din22 => X_buf_22_q0,
        din23 => ap_const_lv16_0,
        din24 => X_buf_24_q0,
        din25 => ap_const_lv16_0,
        din26 => X_buf_26_q0,
        din27 => ap_const_lv16_0,
        din28 => X_buf_28_q0,
        din29 => ap_const_lv16_0,
        din30 => X_buf_30_q0,
        din31 => ap_const_lv16_0,
        din32 => X_buf_32_q0,
        din33 => ap_const_lv16_0,
        din34 => X_buf_34_q0,
        din35 => ap_const_lv16_0,
        din36 => X_buf_36_q0,
        din37 => ap_const_lv16_0,
        din38 => X_buf_38_q0,
        din39 => ap_const_lv16_0,
        din40 => X_buf_40_q0,
        din41 => add_ln52_2,
        dout => tmp_2_fu_1992_p43);

    mux_73_16_1_1_U151 : component tiled_conv_mux_73_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 3,
        dout_WIDTH => 16)
    port map (
        din0 => W_buf_0_q4,
        din1 => W_buf_1_q4,
        din2 => W_buf_2_q4,
        din3 => W_buf_3_q4,
        din4 => W_buf_4_q4,
        din5 => W_buf_5_q4,
        din6 => W_buf_6_q4,
        din7 => select_ln42_reg_2823_pp0_iter1_reg,
        dout => tmp_1_2_fu_2079_p9);

    mux_426_16_1_1_U152 : component tiled_conv_mux_426_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 16,
        din17_WIDTH => 16,
        din18_WIDTH => 16,
        din19_WIDTH => 16,
        din20_WIDTH => 16,
        din21_WIDTH => 16,
        din22_WIDTH => 16,
        din23_WIDTH => 16,
        din24_WIDTH => 16,
        din25_WIDTH => 16,
        din26_WIDTH => 16,
        din27_WIDTH => 16,
        din28_WIDTH => 16,
        din29_WIDTH => 16,
        din30_WIDTH => 16,
        din31_WIDTH => 16,
        din32_WIDTH => 16,
        din33_WIDTH => 16,
        din34_WIDTH => 16,
        din35_WIDTH => 16,
        din36_WIDTH => 16,
        din37_WIDTH => 16,
        din38_WIDTH => 16,
        din39_WIDTH => 16,
        din40_WIDTH => 16,
        din41_WIDTH => 16,
        din42_WIDTH => 6,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_0,
        din1 => ap_const_lv16_0,
        din2 => ap_const_lv16_0,
        din3 => X_buf_3_q0,
        din4 => ap_const_lv16_0,
        din5 => X_buf_5_q0,
        din6 => ap_const_lv16_0,
        din7 => X_buf_7_q0,
        din8 => ap_const_lv16_0,
        din9 => X_buf_9_q0,
        din10 => ap_const_lv16_0,
        din11 => X_buf_11_q0,
        din12 => ap_const_lv16_0,
        din13 => X_buf_13_q0,
        din14 => ap_const_lv16_0,
        din15 => X_buf_15_q0,
        din16 => ap_const_lv16_0,
        din17 => X_buf_17_q0,
        din18 => ap_const_lv16_0,
        din19 => X_buf_19_q0,
        din20 => ap_const_lv16_0,
        din21 => X_buf_21_q0,
        din22 => ap_const_lv16_0,
        din23 => X_buf_23_q0,
        din24 => ap_const_lv16_0,
        din25 => X_buf_25_q0,
        din26 => ap_const_lv16_0,
        din27 => X_buf_27_q0,
        din28 => ap_const_lv16_0,
        din29 => X_buf_29_q0,
        din30 => ap_const_lv16_0,
        din31 => X_buf_31_q0,
        din32 => ap_const_lv16_0,
        din33 => X_buf_33_q0,
        din34 => ap_const_lv16_0,
        din35 => X_buf_35_q0,
        din36 => ap_const_lv16_0,
        din37 => X_buf_37_q0,
        din38 => ap_const_lv16_0,
        din39 => X_buf_39_q0,
        din40 => ap_const_lv16_0,
        din41 => X_buf_41_q0,
        din42 => add_ln52_3,
        dout => tmp_3_fu_2098_p44);

    mux_73_16_1_1_U153 : component tiled_conv_mux_73_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 3,
        dout_WIDTH => 16)
    port map (
        din0 => W_buf_0_q3,
        din1 => W_buf_1_q3,
        din2 => W_buf_2_q3,
        din3 => W_buf_3_q3,
        din4 => W_buf_4_q3,
        din5 => W_buf_5_q3,
        din6 => W_buf_6_q3,
        din7 => select_ln42_reg_2823_pp0_iter1_reg,
        dout => tmp_1_3_fu_2187_p9);

    mux_436_16_1_1_U154 : component tiled_conv_mux_436_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 16,
        din17_WIDTH => 16,
        din18_WIDTH => 16,
        din19_WIDTH => 16,
        din20_WIDTH => 16,
        din21_WIDTH => 16,
        din22_WIDTH => 16,
        din23_WIDTH => 16,
        din24_WIDTH => 16,
        din25_WIDTH => 16,
        din26_WIDTH => 16,
        din27_WIDTH => 16,
        din28_WIDTH => 16,
        din29_WIDTH => 16,
        din30_WIDTH => 16,
        din31_WIDTH => 16,
        din32_WIDTH => 16,
        din33_WIDTH => 16,
        din34_WIDTH => 16,
        din35_WIDTH => 16,
        din36_WIDTH => 16,
        din37_WIDTH => 16,
        din38_WIDTH => 16,
        din39_WIDTH => 16,
        din40_WIDTH => 16,
        din41_WIDTH => 16,
        din42_WIDTH => 16,
        din43_WIDTH => 6,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_0,
        din1 => ap_const_lv16_0,
        din2 => ap_const_lv16_0,
        din3 => ap_const_lv16_0,
        din4 => X_buf_4_q0,
        din5 => ap_const_lv16_0,
        din6 => X_buf_6_q0,
        din7 => ap_const_lv16_0,
        din8 => X_buf_8_q0,
        din9 => ap_const_lv16_0,
        din10 => X_buf_10_q0,
        din11 => ap_const_lv16_0,
        din12 => X_buf_12_q0,
        din13 => ap_const_lv16_0,
        din14 => X_buf_14_q0,
        din15 => ap_const_lv16_0,
        din16 => X_buf_16_q0,
        din17 => ap_const_lv16_0,
        din18 => X_buf_18_q0,
        din19 => ap_const_lv16_0,
        din20 => X_buf_20_q0,
        din21 => ap_const_lv16_0,
        din22 => X_buf_22_q0,
        din23 => ap_const_lv16_0,
        din24 => X_buf_24_q0,
        din25 => ap_const_lv16_0,
        din26 => X_buf_26_q0,
        din27 => ap_const_lv16_0,
        din28 => X_buf_28_q0,
        din29 => ap_const_lv16_0,
        din30 => X_buf_30_q0,
        din31 => ap_const_lv16_0,
        din32 => X_buf_32_q0,
        din33 => ap_const_lv16_0,
        din34 => X_buf_34_q0,
        din35 => ap_const_lv16_0,
        din36 => X_buf_36_q0,
        din37 => ap_const_lv16_0,
        din38 => X_buf_38_q0,
        din39 => ap_const_lv16_0,
        din40 => X_buf_40_q0,
        din41 => ap_const_lv16_0,
        din42 => X_buf_42_q0,
        din43 => add_ln52_4,
        dout => tmp_4_fu_2206_p45);

    mux_73_16_1_1_U155 : component tiled_conv_mux_73_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 3,
        dout_WIDTH => 16)
    port map (
        din0 => W_buf_0_q2,
        din1 => W_buf_1_q2,
        din2 => W_buf_2_q2,
        din3 => W_buf_3_q2,
        din4 => W_buf_4_q2,
        din5 => W_buf_5_q2,
        din6 => W_buf_6_q2,
        din7 => select_ln42_reg_2823_pp0_iter1_reg,
        dout => tmp_1_4_fu_2297_p9);

    mux_446_16_1_1_U156 : component tiled_conv_mux_446_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 16,
        din17_WIDTH => 16,
        din18_WIDTH => 16,
        din19_WIDTH => 16,
        din20_WIDTH => 16,
        din21_WIDTH => 16,
        din22_WIDTH => 16,
        din23_WIDTH => 16,
        din24_WIDTH => 16,
        din25_WIDTH => 16,
        din26_WIDTH => 16,
        din27_WIDTH => 16,
        din28_WIDTH => 16,
        din29_WIDTH => 16,
        din30_WIDTH => 16,
        din31_WIDTH => 16,
        din32_WIDTH => 16,
        din33_WIDTH => 16,
        din34_WIDTH => 16,
        din35_WIDTH => 16,
        din36_WIDTH => 16,
        din37_WIDTH => 16,
        din38_WIDTH => 16,
        din39_WIDTH => 16,
        din40_WIDTH => 16,
        din41_WIDTH => 16,
        din42_WIDTH => 16,
        din43_WIDTH => 16,
        din44_WIDTH => 6,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_0,
        din1 => ap_const_lv16_0,
        din2 => ap_const_lv16_0,
        din3 => ap_const_lv16_0,
        din4 => ap_const_lv16_0,
        din5 => X_buf_5_q0,
        din6 => ap_const_lv16_0,
        din7 => X_buf_7_q0,
        din8 => ap_const_lv16_0,
        din9 => X_buf_9_q0,
        din10 => ap_const_lv16_0,
        din11 => X_buf_11_q0,
        din12 => ap_const_lv16_0,
        din13 => X_buf_13_q0,
        din14 => ap_const_lv16_0,
        din15 => X_buf_15_q0,
        din16 => ap_const_lv16_0,
        din17 => X_buf_17_q0,
        din18 => ap_const_lv16_0,
        din19 => X_buf_19_q0,
        din20 => ap_const_lv16_0,
        din21 => X_buf_21_q0,
        din22 => ap_const_lv16_0,
        din23 => X_buf_23_q0,
        din24 => ap_const_lv16_0,
        din25 => X_buf_25_q0,
        din26 => ap_const_lv16_0,
        din27 => X_buf_27_q0,
        din28 => ap_const_lv16_0,
        din29 => X_buf_29_q0,
        din30 => ap_const_lv16_0,
        din31 => X_buf_31_q0,
        din32 => ap_const_lv16_0,
        din33 => X_buf_33_q0,
        din34 => ap_const_lv16_0,
        din35 => X_buf_35_q0,
        din36 => ap_const_lv16_0,
        din37 => X_buf_37_q0,
        din38 => ap_const_lv16_0,
        din39 => X_buf_39_q0,
        din40 => ap_const_lv16_0,
        din41 => X_buf_41_q0,
        din42 => ap_const_lv16_0,
        din43 => X_buf_43_q0,
        din44 => add_ln52,
        dout => tmp_5_fu_2316_p46);

    mux_73_16_1_1_U157 : component tiled_conv_mux_73_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 3,
        dout_WIDTH => 16)
    port map (
        din0 => W_buf_0_q1,
        din1 => W_buf_1_q1,
        din2 => W_buf_2_q1,
        din3 => W_buf_3_q1,
        din4 => W_buf_4_q1,
        din5 => W_buf_5_q1,
        din6 => W_buf_6_q1,
        din7 => select_ln42_reg_2823_pp0_iter1_reg,
        dout => tmp_1_5_fu_2409_p9);

    mux_456_16_1_1_U158 : component tiled_conv_mux_456_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 16,
        din17_WIDTH => 16,
        din18_WIDTH => 16,
        din19_WIDTH => 16,
        din20_WIDTH => 16,
        din21_WIDTH => 16,
        din22_WIDTH => 16,
        din23_WIDTH => 16,
        din24_WIDTH => 16,
        din25_WIDTH => 16,
        din26_WIDTH => 16,
        din27_WIDTH => 16,
        din28_WIDTH => 16,
        din29_WIDTH => 16,
        din30_WIDTH => 16,
        din31_WIDTH => 16,
        din32_WIDTH => 16,
        din33_WIDTH => 16,
        din34_WIDTH => 16,
        din35_WIDTH => 16,
        din36_WIDTH => 16,
        din37_WIDTH => 16,
        din38_WIDTH => 16,
        din39_WIDTH => 16,
        din40_WIDTH => 16,
        din41_WIDTH => 16,
        din42_WIDTH => 16,
        din43_WIDTH => 16,
        din44_WIDTH => 16,
        din45_WIDTH => 6,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_0,
        din1 => ap_const_lv16_0,
        din2 => ap_const_lv16_0,
        din3 => ap_const_lv16_0,
        din4 => ap_const_lv16_0,
        din5 => ap_const_lv16_0,
        din6 => X_buf_6_q0,
        din7 => ap_const_lv16_0,
        din8 => X_buf_8_q0,
        din9 => ap_const_lv16_0,
        din10 => X_buf_10_q0,
        din11 => ap_const_lv16_0,
        din12 => X_buf_12_q0,
        din13 => ap_const_lv16_0,
        din14 => X_buf_14_q0,
        din15 => ap_const_lv16_0,
        din16 => X_buf_16_q0,
        din17 => ap_const_lv16_0,
        din18 => X_buf_18_q0,
        din19 => ap_const_lv16_0,
        din20 => X_buf_20_q0,
        din21 => ap_const_lv16_0,
        din22 => X_buf_22_q0,
        din23 => ap_const_lv16_0,
        din24 => X_buf_24_q0,
        din25 => ap_const_lv16_0,
        din26 => X_buf_26_q0,
        din27 => ap_const_lv16_0,
        din28 => X_buf_28_q0,
        din29 => ap_const_lv16_0,
        din30 => X_buf_30_q0,
        din31 => ap_const_lv16_0,
        din32 => X_buf_32_q0,
        din33 => ap_const_lv16_0,
        din34 => X_buf_34_q0,
        din35 => ap_const_lv16_0,
        din36 => X_buf_36_q0,
        din37 => ap_const_lv16_0,
        din38 => X_buf_38_q0,
        din39 => ap_const_lv16_0,
        din40 => X_buf_40_q0,
        din41 => ap_const_lv16_0,
        din42 => X_buf_42_q0,
        din43 => ap_const_lv16_0,
        din44 => X_buf_44_q0,
        din45 => add_ln52_5,
        dout => tmp_6_fu_2428_p47);

    mux_73_16_1_1_U159 : component tiled_conv_mux_73_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 3,
        dout_WIDTH => 16)
    port map (
        din0 => W_buf_0_q0,
        din1 => W_buf_1_q0,
        din2 => W_buf_2_q0,
        din3 => W_buf_3_q0,
        din4 => W_buf_4_q0,
        din5 => W_buf_5_q0,
        din6 => W_buf_6_q0,
        din7 => select_ln42_reg_2823_pp0_iter1_reg,
        dout => tmp_1_6_fu_2523_p9);

    mac_muladd_2ns_6ns_6ns_8_1_1_U160 : component tiled_conv_mac_muladd_2ns_6ns_6ns_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_2699_p0,
        din1 => grp_fu_2699_p1,
        din2 => grp_fu_2699_p2,
        dout => grp_fu_2699_p3);

    mul_mul_16s_16s_29_1_1_U161 : component tiled_conv_mul_mul_16s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => tmp_1_reg_3326,
        din1 => tmp1_reg_3321,
        dout => mul_ln864_fu_2708_p2);

    mul_mul_16s_16s_29_1_1_U162 : component tiled_conv_mul_mul_16s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => tmp_1_1_reg_3336,
        din1 => tmp_s_reg_3331,
        dout => mul_ln864_1_fu_2714_p2);

    mul_mul_16s_16s_29_1_1_U163 : component tiled_conv_mul_mul_16s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => tmp_1_2_reg_3346,
        din1 => tmp_2_reg_3341,
        dout => mul_ln864_2_fu_2720_p2);

    mul_mul_16s_16s_29_1_1_U164 : component tiled_conv_mul_mul_16s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => tmp_1_3_reg_3356,
        din1 => tmp_3_reg_3351,
        dout => mul_ln864_3_fu_2726_p2);

    mul_mul_16s_16s_29_1_1_U165 : component tiled_conv_mul_mul_16s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => tmp_1_4_reg_3366,
        din1 => tmp_4_reg_3361,
        dout => mul_ln864_4_fu_2732_p2);

    mul_mul_16s_16s_29_1_1_U166 : component tiled_conv_mul_mul_16s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => tmp_1_5_reg_3376,
        din1 => tmp_5_reg_3371,
        dout => mul_ln864_5_fu_2738_p2);

    mul_mul_16s_16s_29_1_1_U167 : component tiled_conv_mul_mul_16s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => tmp_1_6_reg_3386,
        din1 => tmp_6_reg_3381,
        dout => mul_ln864_6_fu_2744_p2);

    flow_control_loop_pipe_sequential_init_U : component tiled_conv_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    chan_fu_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln42_fu_1511_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    chan_fu_210 <= select_ln42_1_fu_1568_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    chan_fu_210 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;

    i_fu_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln42_fu_1511_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_206 <= add_ln45_fu_1584_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_206 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln42_fu_1511_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_214 <= add_ln42_3_fu_1517_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_214 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    val_V_fu_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    val_V_fu_202 <= ap_const_lv16_0;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    val_V_fu_202 <= add_ln859_6_fu_2684_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln859_1_reg_3426 <= add_ln859_1_fu_2653_p2;
                add_ln859_4_reg_3431 <= add_ln859_4_fu_2671_p2;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                icmp_ln42_reg_2819_pp0_iter2_reg <= icmp_ln42_reg_2819_pp0_iter1_reg;
                icmp_ln42_reg_2819_pp0_iter3_reg <= icmp_ln42_reg_2819_pp0_iter2_reg;
                mul_ln864_1_reg_3396 <= mul_ln864_1_fu_2714_p2;
                mul_ln864_2_reg_3401 <= mul_ln864_2_fu_2720_p2;
                mul_ln864_3_reg_3406 <= mul_ln864_3_fu_2726_p2;
                mul_ln864_4_reg_3411 <= mul_ln864_4_fu_2732_p2;
                mul_ln864_5_reg_3416 <= mul_ln864_5_fu_2738_p2;
                mul_ln864_6_reg_3421 <= mul_ln864_6_fu_2744_p2;
                mul_ln864_reg_3391 <= mul_ln864_fu_2708_p2;
                tmp1_reg_3321 <= tmp1_fu_1774_p43;
                tmp_1_1_reg_3336 <= tmp_1_1_fu_1973_p9;
                tmp_1_2_reg_3346 <= tmp_1_2_fu_2079_p9;
                tmp_1_3_reg_3356 <= tmp_1_3_fu_2187_p9;
                tmp_1_4_reg_3366 <= tmp_1_4_fu_2297_p9;
                tmp_1_5_reg_3376 <= tmp_1_5_fu_2409_p9;
                tmp_1_6_reg_3386 <= tmp_1_6_fu_2523_p9;
                tmp_1_reg_3326 <= tmp_1_fu_1861_p9;
                tmp_2_reg_3341 <= tmp_2_fu_1992_p43;
                tmp_3_reg_3351 <= tmp_3_fu_2098_p44;
                tmp_4_reg_3361 <= tmp_4_fu_2206_p45;
                tmp_5_reg_3371 <= tmp_5_fu_2316_p46;
                tmp_6_reg_3381 <= tmp_6_fu_2428_p47;
                tmp_s_reg_3331 <= tmp_s_fu_1880_p46;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln42_reg_2819 <= icmp_ln42_fu_1511_p2;
                icmp_ln42_reg_2819_pp0_iter1_reg <= icmp_ln42_reg_2819;
                select_ln42_reg_2823_pp0_iter1_reg <= select_ln42_reg_2823;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln42_fu_1511_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln42_1_reg_2835 <= select_ln42_1_fu_1568_p3;
                select_ln42_2_reg_2840 <= select_ln42_2_fu_1576_p3;
                select_ln42_reg_2823 <= select_ln42_fu_1538_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    W_buf_0_address0 <= zext_ln1319_8_fu_1703_p1(7 - 1 downto 0);
    W_buf_0_address1 <= zext_ln1319_7_fu_1687_p1(7 - 1 downto 0);
    W_buf_0_address2 <= zext_ln1319_6_fu_1671_p1(7 - 1 downto 0);
    W_buf_0_address3 <= zext_ln1319_5_fu_1655_p1(7 - 1 downto 0);
    W_buf_0_address4 <= zext_ln1319_4_fu_1639_p1(7 - 1 downto 0);
    W_buf_0_address5 <= zext_ln1319_3_fu_1623_p1(7 - 1 downto 0);
    W_buf_0_address6 <= zext_ln1319_2_fu_1608_p1(7 - 1 downto 0);

    W_buf_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_0_ce0 <= ap_const_logic_1;
        else 
            W_buf_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_0_ce1 <= ap_const_logic_1;
        else 
            W_buf_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_0_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_0_ce2 <= ap_const_logic_1;
        else 
            W_buf_0_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_0_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_0_ce3 <= ap_const_logic_1;
        else 
            W_buf_0_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_0_ce4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_0_ce4 <= ap_const_logic_1;
        else 
            W_buf_0_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_0_ce5_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_0_ce5 <= ap_const_logic_1;
        else 
            W_buf_0_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_0_ce6_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_0_ce6 <= ap_const_logic_1;
        else 
            W_buf_0_ce6 <= ap_const_logic_0;
        end if; 
    end process;

    W_buf_1_address0 <= zext_ln1319_8_fu_1703_p1(7 - 1 downto 0);
    W_buf_1_address1 <= zext_ln1319_7_fu_1687_p1(7 - 1 downto 0);
    W_buf_1_address2 <= zext_ln1319_6_fu_1671_p1(7 - 1 downto 0);
    W_buf_1_address3 <= zext_ln1319_5_fu_1655_p1(7 - 1 downto 0);
    W_buf_1_address4 <= zext_ln1319_4_fu_1639_p1(7 - 1 downto 0);
    W_buf_1_address5 <= zext_ln1319_3_fu_1623_p1(7 - 1 downto 0);
    W_buf_1_address6 <= zext_ln1319_2_fu_1608_p1(7 - 1 downto 0);

    W_buf_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_1_ce0 <= ap_const_logic_1;
        else 
            W_buf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_1_ce1 <= ap_const_logic_1;
        else 
            W_buf_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_1_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_1_ce2 <= ap_const_logic_1;
        else 
            W_buf_1_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_1_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_1_ce3 <= ap_const_logic_1;
        else 
            W_buf_1_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_1_ce4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_1_ce4 <= ap_const_logic_1;
        else 
            W_buf_1_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_1_ce5_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_1_ce5 <= ap_const_logic_1;
        else 
            W_buf_1_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_1_ce6_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_1_ce6 <= ap_const_logic_1;
        else 
            W_buf_1_ce6 <= ap_const_logic_0;
        end if; 
    end process;

    W_buf_2_address0 <= zext_ln1319_8_fu_1703_p1(7 - 1 downto 0);
    W_buf_2_address1 <= zext_ln1319_7_fu_1687_p1(7 - 1 downto 0);
    W_buf_2_address2 <= zext_ln1319_6_fu_1671_p1(7 - 1 downto 0);
    W_buf_2_address3 <= zext_ln1319_5_fu_1655_p1(7 - 1 downto 0);
    W_buf_2_address4 <= zext_ln1319_4_fu_1639_p1(7 - 1 downto 0);
    W_buf_2_address5 <= zext_ln1319_3_fu_1623_p1(7 - 1 downto 0);
    W_buf_2_address6 <= zext_ln1319_2_fu_1608_p1(7 - 1 downto 0);

    W_buf_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_2_ce0 <= ap_const_logic_1;
        else 
            W_buf_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_2_ce1 <= ap_const_logic_1;
        else 
            W_buf_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_2_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_2_ce2 <= ap_const_logic_1;
        else 
            W_buf_2_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_2_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_2_ce3 <= ap_const_logic_1;
        else 
            W_buf_2_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_2_ce4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_2_ce4 <= ap_const_logic_1;
        else 
            W_buf_2_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_2_ce5_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_2_ce5 <= ap_const_logic_1;
        else 
            W_buf_2_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_2_ce6_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_2_ce6 <= ap_const_logic_1;
        else 
            W_buf_2_ce6 <= ap_const_logic_0;
        end if; 
    end process;

    W_buf_3_address0 <= zext_ln1319_8_fu_1703_p1(7 - 1 downto 0);
    W_buf_3_address1 <= zext_ln1319_7_fu_1687_p1(7 - 1 downto 0);
    W_buf_3_address2 <= zext_ln1319_6_fu_1671_p1(7 - 1 downto 0);
    W_buf_3_address3 <= zext_ln1319_5_fu_1655_p1(7 - 1 downto 0);
    W_buf_3_address4 <= zext_ln1319_4_fu_1639_p1(7 - 1 downto 0);
    W_buf_3_address5 <= zext_ln1319_3_fu_1623_p1(7 - 1 downto 0);
    W_buf_3_address6 <= zext_ln1319_2_fu_1608_p1(7 - 1 downto 0);

    W_buf_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_3_ce0 <= ap_const_logic_1;
        else 
            W_buf_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_3_ce1 <= ap_const_logic_1;
        else 
            W_buf_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_3_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_3_ce2 <= ap_const_logic_1;
        else 
            W_buf_3_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_3_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_3_ce3 <= ap_const_logic_1;
        else 
            W_buf_3_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_3_ce4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_3_ce4 <= ap_const_logic_1;
        else 
            W_buf_3_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_3_ce5_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_3_ce5 <= ap_const_logic_1;
        else 
            W_buf_3_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_3_ce6_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_3_ce6 <= ap_const_logic_1;
        else 
            W_buf_3_ce6 <= ap_const_logic_0;
        end if; 
    end process;

    W_buf_4_address0 <= zext_ln1319_8_fu_1703_p1(7 - 1 downto 0);
    W_buf_4_address1 <= zext_ln1319_7_fu_1687_p1(7 - 1 downto 0);
    W_buf_4_address2 <= zext_ln1319_6_fu_1671_p1(7 - 1 downto 0);
    W_buf_4_address3 <= zext_ln1319_5_fu_1655_p1(7 - 1 downto 0);
    W_buf_4_address4 <= zext_ln1319_4_fu_1639_p1(7 - 1 downto 0);
    W_buf_4_address5 <= zext_ln1319_3_fu_1623_p1(7 - 1 downto 0);
    W_buf_4_address6 <= zext_ln1319_2_fu_1608_p1(7 - 1 downto 0);

    W_buf_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_4_ce0 <= ap_const_logic_1;
        else 
            W_buf_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_4_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_4_ce1 <= ap_const_logic_1;
        else 
            W_buf_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_4_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_4_ce2 <= ap_const_logic_1;
        else 
            W_buf_4_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_4_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_4_ce3 <= ap_const_logic_1;
        else 
            W_buf_4_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_4_ce4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_4_ce4 <= ap_const_logic_1;
        else 
            W_buf_4_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_4_ce5_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_4_ce5 <= ap_const_logic_1;
        else 
            W_buf_4_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_4_ce6_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_4_ce6 <= ap_const_logic_1;
        else 
            W_buf_4_ce6 <= ap_const_logic_0;
        end if; 
    end process;

    W_buf_5_address0 <= zext_ln1319_8_fu_1703_p1(7 - 1 downto 0);
    W_buf_5_address1 <= zext_ln1319_7_fu_1687_p1(7 - 1 downto 0);
    W_buf_5_address2 <= zext_ln1319_6_fu_1671_p1(7 - 1 downto 0);
    W_buf_5_address3 <= zext_ln1319_5_fu_1655_p1(7 - 1 downto 0);
    W_buf_5_address4 <= zext_ln1319_4_fu_1639_p1(7 - 1 downto 0);
    W_buf_5_address5 <= zext_ln1319_3_fu_1623_p1(7 - 1 downto 0);
    W_buf_5_address6 <= zext_ln1319_2_fu_1608_p1(7 - 1 downto 0);

    W_buf_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_5_ce0 <= ap_const_logic_1;
        else 
            W_buf_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_5_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_5_ce1 <= ap_const_logic_1;
        else 
            W_buf_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_5_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_5_ce2 <= ap_const_logic_1;
        else 
            W_buf_5_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_5_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_5_ce3 <= ap_const_logic_1;
        else 
            W_buf_5_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_5_ce4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_5_ce4 <= ap_const_logic_1;
        else 
            W_buf_5_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_5_ce5_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_5_ce5 <= ap_const_logic_1;
        else 
            W_buf_5_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_5_ce6_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_5_ce6 <= ap_const_logic_1;
        else 
            W_buf_5_ce6 <= ap_const_logic_0;
        end if; 
    end process;

    W_buf_6_address0 <= zext_ln1319_8_fu_1703_p1(7 - 1 downto 0);
    W_buf_6_address1 <= zext_ln1319_7_fu_1687_p1(7 - 1 downto 0);
    W_buf_6_address2 <= zext_ln1319_6_fu_1671_p1(7 - 1 downto 0);
    W_buf_6_address3 <= zext_ln1319_5_fu_1655_p1(7 - 1 downto 0);
    W_buf_6_address4 <= zext_ln1319_4_fu_1639_p1(7 - 1 downto 0);
    W_buf_6_address5 <= zext_ln1319_3_fu_1623_p1(7 - 1 downto 0);
    W_buf_6_address6 <= zext_ln1319_2_fu_1608_p1(7 - 1 downto 0);

    W_buf_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_6_ce0 <= ap_const_logic_1;
        else 
            W_buf_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_6_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_6_ce1 <= ap_const_logic_1;
        else 
            W_buf_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_6_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_6_ce2 <= ap_const_logic_1;
        else 
            W_buf_6_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_6_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_6_ce3 <= ap_const_logic_1;
        else 
            W_buf_6_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_6_ce4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_6_ce4 <= ap_const_logic_1;
        else 
            W_buf_6_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_6_ce5_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_6_ce5 <= ap_const_logic_1;
        else 
            W_buf_6_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_6_ce6_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_6_ce6 <= ap_const_logic_1;
        else 
            W_buf_6_ce6 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_0_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_0_ce0 <= ap_const_logic_1;
        else 
            X_buf_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_10_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_10_ce0 <= ap_const_logic_1;
        else 
            X_buf_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_11_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_11_ce0 <= ap_const_logic_1;
        else 
            X_buf_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_12_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_12_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_12_ce0 <= ap_const_logic_1;
        else 
            X_buf_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_13_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_13_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_13_ce0 <= ap_const_logic_1;
        else 
            X_buf_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_14_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_14_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_14_ce0 <= ap_const_logic_1;
        else 
            X_buf_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_15_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_15_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_15_ce0 <= ap_const_logic_1;
        else 
            X_buf_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_16_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_16_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_16_ce0 <= ap_const_logic_1;
        else 
            X_buf_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_17_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_17_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_17_ce0 <= ap_const_logic_1;
        else 
            X_buf_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_18_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_18_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_18_ce0 <= ap_const_logic_1;
        else 
            X_buf_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_19_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_19_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_19_ce0 <= ap_const_logic_1;
        else 
            X_buf_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_1_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_1_ce0 <= ap_const_logic_1;
        else 
            X_buf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_20_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_20_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_20_ce0 <= ap_const_logic_1;
        else 
            X_buf_20_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_21_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_21_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_21_ce0 <= ap_const_logic_1;
        else 
            X_buf_21_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_22_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_22_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_22_ce0 <= ap_const_logic_1;
        else 
            X_buf_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_23_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_23_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_23_ce0 <= ap_const_logic_1;
        else 
            X_buf_23_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_24_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_24_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_24_ce0 <= ap_const_logic_1;
        else 
            X_buf_24_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_25_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_25_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_25_ce0 <= ap_const_logic_1;
        else 
            X_buf_25_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_26_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_26_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_26_ce0 <= ap_const_logic_1;
        else 
            X_buf_26_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_27_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_27_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_27_ce0 <= ap_const_logic_1;
        else 
            X_buf_27_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_28_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_28_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_28_ce0 <= ap_const_logic_1;
        else 
            X_buf_28_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_29_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_29_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_29_ce0 <= ap_const_logic_1;
        else 
            X_buf_29_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_2_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_2_ce0 <= ap_const_logic_1;
        else 
            X_buf_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_30_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_30_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_30_ce0 <= ap_const_logic_1;
        else 
            X_buf_30_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_31_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_31_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_31_ce0 <= ap_const_logic_1;
        else 
            X_buf_31_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_32_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_32_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_32_ce0 <= ap_const_logic_1;
        else 
            X_buf_32_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_33_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_33_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_33_ce0 <= ap_const_logic_1;
        else 
            X_buf_33_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_34_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_34_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_34_ce0 <= ap_const_logic_1;
        else 
            X_buf_34_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_35_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_35_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_35_ce0 <= ap_const_logic_1;
        else 
            X_buf_35_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_36_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_36_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_36_ce0 <= ap_const_logic_1;
        else 
            X_buf_36_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_37_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_37_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_37_ce0 <= ap_const_logic_1;
        else 
            X_buf_37_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_38_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_38_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_38_ce0 <= ap_const_logic_1;
        else 
            X_buf_38_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_39_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_39_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_39_ce0 <= ap_const_logic_1;
        else 
            X_buf_39_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_3_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_3_ce0 <= ap_const_logic_1;
        else 
            X_buf_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_40_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_40_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_40_ce0 <= ap_const_logic_1;
        else 
            X_buf_40_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_41_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_41_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_41_ce0 <= ap_const_logic_1;
        else 
            X_buf_41_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_42_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_42_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_42_ce0 <= ap_const_logic_1;
        else 
            X_buf_42_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_43_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_43_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_43_ce0 <= ap_const_logic_1;
        else 
            X_buf_43_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_44_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_44_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_44_ce0 <= ap_const_logic_1;
        else 
            X_buf_44_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_4_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_4_ce0 <= ap_const_logic_1;
        else 
            X_buf_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_5_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_5_ce0 <= ap_const_logic_1;
        else 
            X_buf_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_6_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_6_ce0 <= ap_const_logic_1;
        else 
            X_buf_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_7_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_7_ce0 <= ap_const_logic_1;
        else 
            X_buf_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_8_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_8_ce0 <= ap_const_logic_1;
        else 
            X_buf_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_buf_9_address0 <= p_cast_fu_1726_p1(8 - 1 downto 0);

    X_buf_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_buf_9_ce0 <= ap_const_logic_1;
        else 
            X_buf_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1319_1_fu_1550_p2 <= std_logic_vector(signed(sub_ln1319_cast_fu_1459_p1) + signed(zext_ln1319_1_fu_1546_p1));
    add_ln1319_fu_1493_p2 <= std_logic_vector(signed(sub_ln1319_cast_fu_1459_p1) + signed(zext_ln1319_fu_1489_p1));
    add_ln42_3_fu_1517_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv5_1));
    add_ln42_4_fu_1618_p2 <= std_logic_vector(unsigned(select_ln42_2_reg_2840) + unsigned(ap_const_lv7_1));
    add_ln42_5_fu_1634_p2 <= std_logic_vector(unsigned(select_ln42_2_reg_2840) + unsigned(ap_const_lv7_2));
    add_ln42_6_fu_1650_p2 <= std_logic_vector(unsigned(select_ln42_2_reg_2840) + unsigned(ap_const_lv7_3));
    add_ln42_7_fu_1666_p2 <= std_logic_vector(unsigned(select_ln42_2_reg_2840) + unsigned(ap_const_lv7_4));
    add_ln42_8_fu_1682_p2 <= std_logic_vector(unsigned(select_ln42_2_reg_2840) + unsigned(ap_const_lv7_5));
    add_ln42_9_fu_1698_p2 <= std_logic_vector(unsigned(select_ln42_2_reg_2840) + unsigned(ap_const_lv7_6));
    add_ln42_fu_1526_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_chan_1) + unsigned(ap_const_lv2_1));
    add_ln45_fu_1584_p2 <= std_logic_vector(unsigned(select_ln42_fu_1538_p3) + unsigned(ap_const_lv3_1));
    add_ln859_1_fu_2653_p2 <= std_logic_vector(unsigned(add_ln859_fu_2647_p2) + unsigned(trunc_ln_fu_2584_p4));
    add_ln859_2_fu_2659_p2 <= std_logic_vector(unsigned(trunc_ln864_4_fu_2620_p4) + unsigned(trunc_ln864_3_fu_2611_p4));
    add_ln859_3_fu_2665_p2 <= std_logic_vector(unsigned(add_ln859_2_fu_2659_p2) + unsigned(trunc_ln864_5_fu_2629_p4));
    add_ln859_4_fu_2671_p2 <= std_logic_vector(unsigned(add_ln859_3_fu_2665_p2) + unsigned(trunc_ln864_6_fu_2638_p4));
    add_ln859_5_fu_2680_p2 <= std_logic_vector(unsigned(add_ln859_4_reg_3431) + unsigned(add_ln859_1_reg_3426));
    add_ln859_6_fu_2684_p2 <= std_logic_vector(unsigned(add_ln859_5_fu_2680_p2) + unsigned(val_V_fu_202));
    add_ln859_fu_2647_p2 <= std_logic_vector(unsigned(trunc_ln864_1_fu_2593_p4) + unsigned(trunc_ln864_2_fu_2602_p4));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln42_fu_1511_p2)
    begin
        if (((icmp_ln42_fu_1511_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_chan_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, chan_fu_210)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_chan_1 <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_chan_1 <= chan_fu_210;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_206)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_206;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_214)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_214;
        end if; 
    end process;

    empty_60_fu_1717_p2 <= std_logic_vector(unsigned(i_cast_fu_1714_p1) + unsigned(select_ln34_4));
    grp_fu_2699_p0 <= grp_fu_2699_p00(2 - 1 downto 0);
    grp_fu_2699_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln42_1_reg_2835),8));
    grp_fu_2699_p1 <= ap_const_lv8_34(6 - 1 downto 0);
    grp_fu_2699_p2 <= grp_fu_2699_p20(6 - 1 downto 0);
    grp_fu_2699_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_60_fu_1717_p2),8));
    i_cast_fu_1714_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln42_reg_2823),6));
    icmp_ln42_fu_1511_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv5_15) else "0";
    icmp_ln45_fu_1532_p2 <= "1" when (ap_sig_allocacmp_i_load = ap_const_lv3_7) else "0";
    p_cast_fu_1726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_2699_p3),64));
    select_ln42_1_fu_1568_p3 <= 
        add_ln42_fu_1526_p2 when (icmp_ln45_fu_1532_p2(0) = '1') else 
        ap_sig_allocacmp_chan_1;
    select_ln42_2_fu_1576_p3 <= 
        sub_ln1319_2_fu_1562_p2 when (icmp_ln45_fu_1532_p2(0) = '1') else 
        sub_ln1319_1_fu_1505_p2;
    select_ln42_fu_1538_p3 <= 
        ap_const_lv3_0 when (icmp_ln45_fu_1532_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    shl_ln1319_1_fu_1556_p2 <= std_logic_vector(shift_left(unsigned(add_ln1319_1_fu_1550_p2),to_integer(unsigned('0' & ap_const_lv7_3(7-1 downto 0)))));
    shl_ln1319_fu_1499_p2 <= std_logic_vector(shift_left(unsigned(add_ln1319_fu_1493_p2),to_integer(unsigned('0' & ap_const_lv7_3(7-1 downto 0)))));
    sub_ln1319_1_fu_1505_p2 <= std_logic_vector(unsigned(shl_ln1319_fu_1499_p2) - unsigned(add_ln1319_fu_1493_p2));
    sub_ln1319_2_fu_1562_p2 <= std_logic_vector(unsigned(shl_ln1319_1_fu_1556_p2) - unsigned(add_ln1319_1_fu_1550_p2));
        sub_ln1319_cast_fu_1459_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1319),7));

    trunc_ln864_1_fu_2593_p4 <= mul_ln864_1_reg_3396(28 downto 13);
    trunc_ln864_2_fu_2602_p4 <= mul_ln864_2_reg_3401(28 downto 13);
    trunc_ln864_3_fu_2611_p4 <= mul_ln864_3_reg_3406(28 downto 13);
    trunc_ln864_4_fu_2620_p4 <= mul_ln864_4_reg_3411(28 downto 13);
    trunc_ln864_5_fu_2629_p4 <= mul_ln864_5_reg_3416(28 downto 13);
    trunc_ln864_6_fu_2638_p4 <= mul_ln864_6_reg_3421(28 downto 13);
    trunc_ln_fu_2584_p4 <= mul_ln864_reg_3391(28 downto 13);
    val_V_out <= val_V_fu_202;

    val_V_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln42_reg_2819_pp0_iter3_reg)
    begin
        if (((icmp_ln42_reg_2819_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            val_V_out_ap_vld <= ap_const_logic_1;
        else 
            val_V_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln1319_1_fu_1546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_fu_1526_p2),7));
    zext_ln1319_2_fu_1608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln42_2_reg_2840),64));
    zext_ln1319_3_fu_1623_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_4_fu_1618_p2),64));
    zext_ln1319_4_fu_1639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_5_fu_1634_p2),64));
    zext_ln1319_5_fu_1655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_6_fu_1650_p2),64));
    zext_ln1319_6_fu_1671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_7_fu_1666_p2),64));
    zext_ln1319_7_fu_1687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_8_fu_1682_p2),64));
    zext_ln1319_8_fu_1703_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_9_fu_1698_p2),64));
    zext_ln1319_fu_1489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_chan_1),7));
end behav;
