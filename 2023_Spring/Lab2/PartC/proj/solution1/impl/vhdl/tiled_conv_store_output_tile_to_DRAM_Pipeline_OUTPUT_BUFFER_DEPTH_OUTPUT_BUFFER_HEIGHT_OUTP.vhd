-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tiled_conv_store_output_tile_to_DRAM_Pipeline_OUTPUT_BUFFER_DEPTH_OUTPUT_BUFFER_HEIGHT_OUTP is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_fm_AWVALID : OUT STD_LOGIC;
    m_axi_fm_AWREADY : IN STD_LOGIC;
    m_axi_fm_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_fm_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fm_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fm_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fm_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_WVALID : OUT STD_LOGIC;
    m_axi_fm_WREADY : IN STD_LOGIC;
    m_axi_fm_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_fm_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_WLAST : OUT STD_LOGIC;
    m_axi_fm_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_ARVALID : OUT STD_LOGIC;
    m_axi_fm_ARREADY : IN STD_LOGIC;
    m_axi_fm_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_fm_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fm_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fm_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fm_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_RVALID : IN STD_LOGIC;
    m_axi_fm_RREADY : OUT STD_LOGIC;
    m_axi_fm_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_fm_RLAST : IN STD_LOGIC;
    m_axi_fm_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_RFIFONUM : IN STD_LOGIC_VECTOR (9 downto 0);
    m_axi_fm_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_BVALID : IN STD_LOGIC;
    m_axi_fm_BREADY : OUT STD_LOGIC;
    m_axi_fm_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    depth_offset : IN STD_LOGIC_VECTOR (5 downto 0);
    out_fm : IN STD_LOGIC_VECTOR (63 downto 0);
    height_offset : IN STD_LOGIC_VECTOR (8 downto 0);
    zext_ln137_1 : IN STD_LOGIC_VECTOR (10 downto 0);
    shl_ln137_mid : IN STD_LOGIC_VECTOR (18 downto 0);
    zext_ln128_1 : IN STD_LOGIC_VECTOR (16 downto 0);
    zext_ln137_2 : IN STD_LOGIC_VECTOR (18 downto 0);
    out_fm_buf_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    out_fm_buf_ce0 : OUT STD_LOGIC;
    out_fm_buf_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    width_offset : IN STD_LOGIC_VECTOR (9 downto 0) );
end;


architecture behav of tiled_conv_store_output_tile_to_DRAM_Pipeline_OUTPUT_BUFFER_DEPTH_OUTPUT_BUFFER_HEIGHT_OUTP is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv11_730 : STD_LOGIC_VECTOR (10 downto 0) := "11100110000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_14 : STD_LOGIC_VECTOR (10 downto 0) := "00000010100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv10_1CC : STD_LOGIC_VECTOR (9 downto 0) := "0111001100";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv25_73000 : STD_LOGIC_VECTOR (24 downto 0) := "0000001110011000000000000";
    constant ap_const_lv8_17 : STD_LOGIC_VECTOR (7 downto 0) := "00010111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal empty_35_reg_897 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state16_io : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal empty_37_reg_901 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_37_reg_901_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln122_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal fm_blk_n_AW : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal fm_blk_n_W : STD_LOGIC;
    signal fm_blk_n_B : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln137_2_cast_fu_231_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln137_2_cast_reg_780 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln137_1_cast_fu_235_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln137_1_cast_reg_785 : STD_LOGIC_VECTOR (18 downto 0);
    signal icmp_ln122_reg_796 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_796_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_796_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_796_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_796_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_796_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_796_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_796_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_796_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_796_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_796_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_796_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_796_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_796_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln122_1_fu_273_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_fu_303_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_reg_805 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln125_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln125_reg_810 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln125_reg_810_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln125_reg_810_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln122_1_fu_323_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln122_1_reg_819 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln122_1_reg_819_pp0_iter12_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln122_1_reg_819_pp0_iter13_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal p_mid111_fu_335_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_mid111_reg_824 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_reg_829 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln137_fu_704_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln137_reg_834 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln137_1_fu_710_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln137_1_reg_839 : STD_LOGIC_VECTOR (24 downto 0);
    signal and_ln122_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln122_reg_844 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln122_reg_844_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln125_fu_403_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln125_reg_849 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln125_fu_414_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln125_reg_854 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln125_reg_854_pp0_iter13_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln125_1_fu_422_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln125_1_reg_859 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln125_1_reg_859_pp0_iter13_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln137_fu_449_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln137_reg_864 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln137_2_fu_487_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln137_2_reg_870 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln137_4_fu_496_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln137_4_reg_875 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln137_7_fu_534_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln137_7_reg_881 : STD_LOGIC_VECTOR (18 downto 0);
    signal fm_addr_reg_891 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_35_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_37_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_37_reg_901_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_37_reg_901_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_37_reg_901_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_37_reg_901_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_37_reg_901_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln131_fu_692_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln131_reg_905 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_condition_exit_pp0_iter14_stage0 : STD_LOGIC;
    signal zext_ln1696_4_fu_657_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln125_fu_644_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal j_fu_134 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln128_fu_430_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_138 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_fu_142 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln125_3_fu_349_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal f_fu_146 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten45_fu_150 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_indvar_flatten45_load : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_279_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_285_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_285_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln122_fu_299_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln122_fu_311_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln122_1_fu_331_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln125_1_fu_343_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln128_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln122_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln122_fu_376_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln125_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln125_fu_446_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln125_1_fu_454_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_32_fu_457_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln137_1_fu_470_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln1_fu_462_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln137_1_fu_482_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln128_fu_478_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln125_2_fu_493_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln125_3_fu_501_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_mid1_fu_504_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln137_1_mid1_fu_517_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln137_mid1_fu_509_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln137_6_fu_529_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln128_2_fu_525_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln137_3_fu_540_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_716_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1696_fu_563_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_574_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_fu_566_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1696_2_fu_581_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln137_5_fu_591_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln122_2_fu_551_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln137_8_fu_594_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln137_5_fu_556_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln137_3_fu_543_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_610_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_7_fu_620_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_5_fu_600_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal select_ln122_3_fu_630_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal select_ln125_2_fu_637_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln1696_1_fu_585_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1696_3_fu_648_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1696_2_fu_651_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_279_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_285_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_fu_684_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1696_1_fu_680_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln137_fu_704_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln137_fu_704_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln137_1_fu_710_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln137_1_fu_710_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_716_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_716_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_716_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_279_ce : STD_LOGIC;
    signal grp_fu_285_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_716_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_716_p20 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln137_1_fu_710_p00 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln137_fu_704_p00 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component tiled_conv_urem_11ns_6ns_11_15_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component tiled_conv_mul_mul_6ns_19ns_25_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (18 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component tiled_conv_mac_muladd_3ns_5ns_5ns_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component tiled_conv_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    urem_11ns_6ns_11_15_1_U379 : component tiled_conv_urem_11ns_6ns_11_15_1
    generic map (
        ID => 1,
        NUM_STAGE => 15,
        din0_WIDTH => 11,
        din1_WIDTH => 6,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_sig_allocacmp_indvar_flatten45_load,
        din1 => grp_fu_279_p1,
        ce => grp_fu_279_ce,
        dout => grp_fu_279_p2);

    urem_11ns_6ns_11_15_1_U380 : component tiled_conv_urem_11ns_6ns_11_15_1
    generic map (
        ID => 1,
        NUM_STAGE => 15,
        din0_WIDTH => 11,
        din1_WIDTH => 6,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_285_p0,
        din1 => grp_fu_285_p1,
        ce => grp_fu_285_ce,
        dout => grp_fu_285_p2);

    mul_mul_6ns_19ns_25_1_1_U381 : component tiled_conv_mul_mul_6ns_19ns_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 19,
        dout_WIDTH => 25)
    port map (
        din0 => mul_ln137_fu_704_p0,
        din1 => mul_ln137_fu_704_p1,
        dout => mul_ln137_fu_704_p2);

    mul_mul_6ns_19ns_25_1_1_U382 : component tiled_conv_mul_mul_6ns_19ns_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 19,
        dout_WIDTH => 25)
    port map (
        din0 => mul_ln137_1_fu_710_p0,
        din1 => mul_ln137_1_fu_710_p1,
        dout => mul_ln137_1_fu_710_p2);

    mac_muladd_3ns_5ns_5ns_8_1_1_U383 : component tiled_conv_mac_muladd_3ns_5ns_5ns_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 5,
        din2_WIDTH => 5,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_716_p0,
        din1 => grp_fu_716_p1,
        din2 => grp_fu_716_p2,
        dout => grp_fu_716_p3);

    flow_control_loop_pipe_sequential_init_U : component tiled_conv_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter20_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter14_stage0)) then 
                    ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    f_fu_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    f_fu_146 <= ap_const_lv3_0;
                elsif (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (icmp_ln122_reg_796_pp0_iter10_reg = ap_const_lv1_0))) then 
                    f_fu_146 <= select_ln122_1_fu_323_p3;
                end if;
            end if; 
        end if;
    end process;

    i_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    i_fu_138 <= ap_const_lv5_0;
                elsif (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (icmp_ln122_reg_796_pp0_iter11_reg = ap_const_lv1_0))) then 
                    i_fu_138 <= select_ln125_1_fu_422_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten45_fu_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln122_fu_267_p2 = ap_const_lv1_0))) then 
                    indvar_flatten45_fu_150 <= add_ln122_1_fu_273_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten45_fu_150 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    indvar_flatten_fu_142 <= ap_const_lv10_0;
                elsif (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (icmp_ln122_reg_796_pp0_iter10_reg = ap_const_lv1_0))) then 
                    indvar_flatten_fu_142 <= select_ln125_3_fu_349_p3;
                end if;
            end if; 
        end if;
    end process;

    j_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    j_fu_134 <= ap_const_lv5_0;
                elsif (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (icmp_ln122_reg_796_pp0_iter11_reg = ap_const_lv1_0))) then 
                    j_fu_134 <= add_ln128_fu_430_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln122_reg_796_pp0_iter11_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln125_reg_849 <= add_ln125_fu_403_p2;
                and_ln122_reg_844 <= and_ln122_fu_397_p2;
                mul_ln137_1_reg_839 <= mul_ln137_1_fu_710_p2;
                select_ln125_1_reg_859 <= select_ln125_1_fu_422_p3;
                select_ln125_reg_854 <= select_ln125_fu_414_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln125_reg_810_pp0_iter12_reg = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln122_reg_844) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln137_2_reg_870 <= add_ln137_2_fu_487_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln122_reg_796_pp0_iter12_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln137_4_reg_875 <= add_ln137_4_fu_496_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln122_reg_796_pp0_iter12_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln122_reg_844))) then
                add_ln137_7_reg_881 <= add_ln137_7_fu_534_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln137_reg_864 <= add_ln137_fu_449_p2;
                and_ln122_reg_844_pp0_iter13_reg <= and_ln122_reg_844;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                empty_37_reg_901_pp0_iter15_reg <= empty_37_reg_901;
                empty_37_reg_901_pp0_iter16_reg <= empty_37_reg_901_pp0_iter15_reg;
                empty_37_reg_901_pp0_iter17_reg <= empty_37_reg_901_pp0_iter16_reg;
                empty_37_reg_901_pp0_iter18_reg <= empty_37_reg_901_pp0_iter17_reg;
                empty_37_reg_901_pp0_iter19_reg <= empty_37_reg_901_pp0_iter18_reg;
                empty_37_reg_901_pp0_iter20_reg <= empty_37_reg_901_pp0_iter19_reg;
                empty_reg_805 <= empty_fu_303_p2;
                i_1_reg_829 <= i_fu_138;
                icmp_ln122_reg_796_pp0_iter10_reg <= icmp_ln122_reg_796_pp0_iter9_reg;
                icmp_ln122_reg_796_pp0_iter11_reg <= icmp_ln122_reg_796_pp0_iter10_reg;
                icmp_ln122_reg_796_pp0_iter12_reg <= icmp_ln122_reg_796_pp0_iter11_reg;
                icmp_ln122_reg_796_pp0_iter13_reg <= icmp_ln122_reg_796_pp0_iter12_reg;
                icmp_ln122_reg_796_pp0_iter2_reg <= icmp_ln122_reg_796_pp0_iter1_reg;
                icmp_ln122_reg_796_pp0_iter3_reg <= icmp_ln122_reg_796_pp0_iter2_reg;
                icmp_ln122_reg_796_pp0_iter4_reg <= icmp_ln122_reg_796_pp0_iter3_reg;
                icmp_ln122_reg_796_pp0_iter5_reg <= icmp_ln122_reg_796_pp0_iter4_reg;
                icmp_ln122_reg_796_pp0_iter6_reg <= icmp_ln122_reg_796_pp0_iter5_reg;
                icmp_ln122_reg_796_pp0_iter7_reg <= icmp_ln122_reg_796_pp0_iter6_reg;
                icmp_ln122_reg_796_pp0_iter8_reg <= icmp_ln122_reg_796_pp0_iter7_reg;
                icmp_ln122_reg_796_pp0_iter9_reg <= icmp_ln122_reg_796_pp0_iter8_reg;
                icmp_ln125_reg_810_pp0_iter12_reg <= icmp_ln125_reg_810;
                icmp_ln125_reg_810_pp0_iter13_reg <= icmp_ln125_reg_810_pp0_iter12_reg;
                mul_ln137_reg_834 <= mul_ln137_fu_704_p2;
                select_ln122_1_reg_819_pp0_iter12_reg <= select_ln122_1_reg_819;
                select_ln122_1_reg_819_pp0_iter13_reg <= select_ln122_1_reg_819_pp0_iter12_reg;
                select_ln125_1_reg_859_pp0_iter13_reg <= select_ln125_1_reg_859;
                select_ln125_reg_854_pp0_iter13_reg <= select_ln125_reg_854;
                select_ln131_reg_905 <= select_ln131_fu_692_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln122_reg_796 <= icmp_ln122_fu_267_p2;
                icmp_ln122_reg_796_pp0_iter1_reg <= icmp_ln122_reg_796;
                    zext_ln137_1_cast_reg_785(10 downto 0) <= zext_ln137_1_cast_fu_235_p1(10 downto 0);
                    zext_ln137_2_cast_reg_780(18 downto 0) <= zext_ln137_2_cast_fu_231_p1(18 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln122_reg_796_pp0_iter13_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_35_reg_897 <= empty_35_fu_668_p2;
                empty_37_reg_901 <= empty_37_fu_674_p2;
                fm_addr_reg_891 <= sext_ln125_fu_644_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln122_reg_796_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln125_reg_810 <= icmp_ln125_fu_317_p2;
                p_mid111_reg_824 <= p_mid111_fu_335_p2;
                select_ln122_1_reg_819 <= select_ln122_1_fu_323_p3;
            end if;
        end if;
    end process;
    zext_ln137_2_cast_reg_780(63 downto 19) <= "000000000000000000000000000000000000000000000";
    zext_ln137_1_cast_reg_785(18 downto 11) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln122_1_fu_273_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten45_load) + unsigned(ap_const_lv11_1));
    add_ln122_fu_311_p2 <= std_logic_vector(unsigned(f_fu_146) + unsigned(ap_const_lv3_1));
    add_ln125_1_fu_343_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_142) + unsigned(ap_const_lv10_1));
    add_ln125_fu_403_p2 <= std_logic_vector(unsigned(select_ln122_fu_376_p3) + unsigned(ap_const_lv5_1));
    add_ln128_fu_430_p2 <= std_logic_vector(unsigned(select_ln125_fu_414_p3) + unsigned(ap_const_lv5_1));
    add_ln137_1_fu_482_p2 <= std_logic_vector(unsigned(shl_ln1_fu_462_p3) + unsigned(zext_ln137_1_cast_reg_785));
    add_ln137_2_fu_487_p2 <= std_logic_vector(unsigned(add_ln137_1_fu_482_p2) + unsigned(zext_ln128_fu_478_p1));
    add_ln137_3_fu_543_p2 <= std_logic_vector(unsigned(zext_ln137_3_fu_540_p1) + unsigned(add_ln137_reg_864));
    add_ln137_4_fu_496_p2 <= std_logic_vector(unsigned(zext_ln125_2_fu_493_p1) + unsigned(out_fm));
    add_ln137_5_fu_556_p2 <= std_logic_vector(unsigned(zext_ln137_2_cast_reg_780) + unsigned(add_ln137_4_reg_875));
    add_ln137_6_fu_529_p2 <= std_logic_vector(unsigned(shl_ln137_mid1_fu_509_p3) + unsigned(zext_ln137_1_cast_reg_785));
    add_ln137_7_fu_534_p2 <= std_logic_vector(unsigned(add_ln137_6_fu_529_p2) + unsigned(zext_ln128_2_fu_525_p1));
    add_ln137_8_fu_594_p2 <= std_logic_vector(unsigned(zext_ln137_5_fu_591_p1) + unsigned(select_ln122_2_fu_551_p3));
    add_ln137_fu_449_p2 <= std_logic_vector(unsigned(zext_ln125_fu_446_p1) + unsigned(out_fm));
    add_ln1696_1_fu_585_p2 <= std_logic_vector(unsigned(p_shl_fu_566_p3) + unsigned(zext_ln1696_2_fu_581_p1));
    add_ln1696_2_fu_651_p2 <= std_logic_vector(unsigned(add_ln1696_1_fu_585_p2) + unsigned(zext_ln1696_3_fu_648_p1));
    and_ln122_fu_397_p2 <= (xor_ln122_fu_386_p2 and icmp_ln128_fu_391_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter21, m_axi_fm_BVALID, empty_37_reg_901_pp0_iter20_reg)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (empty_37_reg_901_pp0_iter20_reg = ap_const_lv1_1) and (m_axi_fm_BVALID = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter21, m_axi_fm_WREADY, m_axi_fm_BVALID, ap_block_state16_io, empty_37_reg_901_pp0_iter20_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (empty_37_reg_901_pp0_iter20_reg = ap_const_lv1_1) and (m_axi_fm_BVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (m_axi_fm_WREADY = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state16_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter21, m_axi_fm_WREADY, m_axi_fm_BVALID, ap_block_state16_io, empty_37_reg_901_pp0_iter20_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (empty_37_reg_901_pp0_iter20_reg = ap_const_lv1_1) and (m_axi_fm_BVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (m_axi_fm_WREADY = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state16_io)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state16_io_assign_proc : process(m_axi_fm_AWREADY, empty_35_reg_897)
    begin
                ap_block_state16_io <= ((empty_35_reg_897 = ap_const_lv1_1) and (m_axi_fm_AWREADY = ap_const_logic_0));
    end process;

        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state22_pp0_stage0_iter21_assign_proc : process(m_axi_fm_BVALID, empty_37_reg_901_pp0_iter20_reg)
    begin
                ap_block_state22_pp0_stage0_iter21 <= ((empty_37_reg_901_pp0_iter20_reg = ap_const_lv1_1) and (m_axi_fm_BVALID = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln122_fu_267_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln122_fu_267_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter14_stage0_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_subdone, icmp_ln122_reg_796_pp0_iter13_reg)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (icmp_ln122_reg_796_pp0_iter13_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter14_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter14_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter20_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter20_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21)
    begin
        if (((ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten45_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten45_fu_150)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten45_load <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_indvar_flatten45_load <= indvar_flatten45_fu_150;
        end if; 
    end process;

    empty_32_fu_457_p2 <= std_logic_vector(unsigned(zext_ln125_1_fu_454_p1) + unsigned(height_offset));
    empty_35_fu_668_p2 <= "1" when (grp_fu_279_p2 = ap_const_lv11_0) else "0";
    empty_37_fu_674_p2 <= "1" when (grp_fu_285_p2 = ap_const_lv11_0) else "0";
    empty_fu_303_p2 <= std_logic_vector(unsigned(zext_ln122_fu_299_p1) + unsigned(depth_offset));

    fm_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter15, m_axi_fm_AWREADY, empty_35_reg_897, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (empty_35_reg_897 = ap_const_lv1_1))) then 
            fm_blk_n_AW <= m_axi_fm_AWREADY;
        else 
            fm_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    fm_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter21, m_axi_fm_BVALID, empty_37_reg_901_pp0_iter20_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (empty_37_reg_901_pp0_iter20_reg = ap_const_lv1_1))) then 
            fm_blk_n_B <= m_axi_fm_BVALID;
        else 
            fm_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    fm_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter16, m_axi_fm_WREADY, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            fm_blk_n_W <= m_axi_fm_WREADY;
        else 
            fm_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_279_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_279_ce <= ap_const_logic_1;
        else 
            grp_fu_279_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_279_p1 <= ap_const_lv11_14(6 - 1 downto 0);

    grp_fu_285_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_285_ce <= ap_const_logic_1;
        else 
            grp_fu_285_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_285_p0 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten45_load) + unsigned(ap_const_lv11_1));
    grp_fu_285_p1 <= ap_const_lv11_14(6 - 1 downto 0);
    grp_fu_716_p0 <= grp_fu_716_p00(3 - 1 downto 0);
    grp_fu_716_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln122_1_reg_819_pp0_iter13_reg),8));
    grp_fu_716_p1 <= ap_const_lv8_17(5 - 1 downto 0);
    grp_fu_716_p2 <= grp_fu_716_p20(5 - 1 downto 0);
    grp_fu_716_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln125_1_reg_859_pp0_iter13_reg),8));
    icmp_ln122_fu_267_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten45_load = ap_const_lv11_730) else "0";
    icmp_ln125_fu_317_p2 <= "1" when (indvar_flatten_fu_142 = ap_const_lv10_1CC) else "0";
    icmp_ln128_fu_391_p2 <= "1" when (j_fu_134 = ap_const_lv5_14) else "0";
    m_axi_fm_ARADDR <= ap_const_lv64_0;
    m_axi_fm_ARBURST <= ap_const_lv2_0;
    m_axi_fm_ARCACHE <= ap_const_lv4_0;
    m_axi_fm_ARID <= ap_const_lv1_0;
    m_axi_fm_ARLEN <= ap_const_lv32_0;
    m_axi_fm_ARLOCK <= ap_const_lv2_0;
    m_axi_fm_ARPROT <= ap_const_lv3_0;
    m_axi_fm_ARQOS <= ap_const_lv4_0;
    m_axi_fm_ARREGION <= ap_const_lv4_0;
    m_axi_fm_ARSIZE <= ap_const_lv3_0;
    m_axi_fm_ARUSER <= ap_const_lv1_0;
    m_axi_fm_ARVALID <= ap_const_logic_0;
    m_axi_fm_AWADDR <= fm_addr_reg_891;
    m_axi_fm_AWBURST <= ap_const_lv2_0;
    m_axi_fm_AWCACHE <= ap_const_lv4_0;
    m_axi_fm_AWID <= ap_const_lv1_0;
    m_axi_fm_AWLEN <= ap_const_lv32_14;
    m_axi_fm_AWLOCK <= ap_const_lv2_0;
    m_axi_fm_AWPROT <= ap_const_lv3_0;
    m_axi_fm_AWQOS <= ap_const_lv4_0;
    m_axi_fm_AWREGION <= ap_const_lv4_0;
    m_axi_fm_AWSIZE <= ap_const_lv3_0;
    m_axi_fm_AWUSER <= ap_const_lv1_0;

    m_axi_fm_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter15, empty_35_reg_897, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_35_reg_897 = ap_const_lv1_1))) then 
            m_axi_fm_AWVALID <= ap_const_logic_1;
        else 
            m_axi_fm_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_fm_BREADY_assign_proc : process(ap_enable_reg_pp0_iter21, empty_37_reg_901_pp0_iter20_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_37_reg_901_pp0_iter20_reg = ap_const_lv1_1))) then 
            m_axi_fm_BREADY <= ap_const_logic_1;
        else 
            m_axi_fm_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_fm_RREADY <= ap_const_logic_0;
    m_axi_fm_WDATA <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln131_reg_905),16));
    m_axi_fm_WID <= ap_const_lv1_0;
    m_axi_fm_WLAST <= ap_const_logic_0;
    m_axi_fm_WSTRB <= ap_const_lv2_3;
    m_axi_fm_WUSER <= ap_const_lv1_0;

    m_axi_fm_WVALID_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_fm_WVALID <= ap_const_logic_1;
        else 
            m_axi_fm_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln137_1_fu_710_p0 <= mul_ln137_1_fu_710_p00(6 - 1 downto 0);
    mul_ln137_1_fu_710_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_mid111_reg_824),25));
    mul_ln137_1_fu_710_p1 <= ap_const_lv25_73000(19 - 1 downto 0);
    mul_ln137_fu_704_p0 <= mul_ln137_fu_704_p00(6 - 1 downto 0);
    mul_ln137_fu_704_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_805),25));
    mul_ln137_fu_704_p1 <= ap_const_lv25_73000(19 - 1 downto 0);
    or_ln125_fu_409_p2 <= (icmp_ln125_reg_810 or and_ln122_fu_397_p2);
    out_fm_buf_address0 <= zext_ln1696_4_fu_657_p1(11 - 1 downto 0);

    out_fm_buf_ce0_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_fm_buf_ce0 <= ap_const_logic_1;
        else 
            out_fm_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_mid111_fu_335_p2 <= std_logic_vector(unsigned(zext_ln122_1_fu_331_p1) + unsigned(depth_offset));
    p_mid1_fu_504_p2 <= std_logic_vector(unsigned(zext_ln125_3_fu_501_p1) + unsigned(height_offset));
    p_shl_fu_566_p3 <= (trunc_ln1696_fu_563_p1 & ap_const_lv4_0);
    select_ln122_1_fu_323_p3 <= 
        add_ln122_fu_311_p2 when (icmp_ln125_fu_317_p2(0) = '1') else 
        f_fu_146;
    select_ln122_2_fu_551_p3 <= 
        add_ln137_4_reg_875 when (icmp_ln125_reg_810_pp0_iter13_reg(0) = '1') else 
        add_ln137_reg_864;
    select_ln122_3_fu_630_p3 <= 
        tmp_6_fu_610_p4 when (icmp_ln125_reg_810_pp0_iter13_reg(0) = '1') else 
        tmp_7_fu_620_p4;
    select_ln122_fu_376_p3 <= 
        ap_const_lv5_0 when (icmp_ln125_reg_810(0) = '1') else 
        i_fu_138;
    select_ln125_1_fu_422_p3 <= 
        add_ln125_fu_403_p2 when (and_ln122_fu_397_p2(0) = '1') else 
        select_ln122_fu_376_p3;
    select_ln125_2_fu_637_p3 <= 
        tmp_5_fu_600_p4 when (and_ln122_reg_844_pp0_iter13_reg(0) = '1') else 
        select_ln122_3_fu_630_p3;
    select_ln125_3_fu_349_p3 <= 
        ap_const_lv10_1 when (icmp_ln125_fu_317_p2(0) = '1') else 
        add_ln125_1_fu_343_p2;
    select_ln125_fu_414_p3 <= 
        ap_const_lv5_0 when (or_ln125_fu_409_p2(0) = '1') else 
        j_fu_134;
    select_ln131_fu_692_p3 <= 
        ap_const_lv15_0 when (tmp_1_fu_684_p3(0) = '1') else 
        trunc_ln1696_1_fu_680_p1;
        sext_ln125_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln125_2_fu_637_p3),64));

    shl_ln137_1_fu_470_p3 <= (empty_32_fu_457_p2 & ap_const_lv8_0);
    shl_ln137_1_mid1_fu_517_p3 <= (p_mid1_fu_504_p2 & ap_const_lv8_0);
    shl_ln137_mid1_fu_509_p3 <= (p_mid1_fu_504_p2 & ap_const_lv10_0);
    shl_ln1_fu_462_p3 <= (empty_32_fu_457_p2 & ap_const_lv10_0);
    tmp_1_fu_684_p3 <= out_fm_buf_q0(15 downto 15);
    tmp_5_fu_600_p4 <= add_ln137_8_fu_594_p2(63 downto 1);
    tmp_6_fu_610_p4 <= add_ln137_5_fu_556_p2(63 downto 1);
    tmp_7_fu_620_p4 <= add_ln137_3_fu_543_p2(63 downto 1);
    tmp_fu_574_p3 <= (grp_fu_716_p3 & ap_const_lv2_0);
    trunc_ln1696_1_fu_680_p1 <= out_fm_buf_q0(15 - 1 downto 0);
    trunc_ln1696_fu_563_p1 <= grp_fu_716_p3(7 - 1 downto 0);
    xor_ln122_fu_386_p2 <= (icmp_ln125_reg_810 xor ap_const_lv1_1);
    zext_ln122_1_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln122_fu_311_p2),6));
    zext_ln122_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_fu_146),6));
    zext_ln125_1_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_829),9));
    zext_ln125_2_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln137_1_reg_839),64));
    zext_ln125_3_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln125_reg_849),9));
    zext_ln125_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln137_reg_834),64));
    zext_ln128_2_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln137_1_mid1_fu_517_p3),19));
    zext_ln128_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln137_1_fu_470_p3),19));
    zext_ln137_1_cast_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln137_1),19));
    zext_ln137_2_cast_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln137_2),64));
    zext_ln137_3_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln137_2_reg_870),64));
    zext_ln137_5_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln137_7_reg_881),64));
    zext_ln1696_2_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_574_p3),11));
    zext_ln1696_3_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln125_reg_854_pp0_iter13_reg),11));
    zext_ln1696_4_fu_657_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1696_2_fu_651_p2),64));
end behav;
