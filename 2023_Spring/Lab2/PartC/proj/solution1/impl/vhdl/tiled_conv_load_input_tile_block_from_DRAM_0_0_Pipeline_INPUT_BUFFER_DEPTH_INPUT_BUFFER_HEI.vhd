-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tiled_conv_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_fm_AWVALID : OUT STD_LOGIC;
    m_axi_fm_AWREADY : IN STD_LOGIC;
    m_axi_fm_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_fm_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fm_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fm_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fm_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_WVALID : OUT STD_LOGIC;
    m_axi_fm_WREADY : IN STD_LOGIC;
    m_axi_fm_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_fm_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_WLAST : OUT STD_LOGIC;
    m_axi_fm_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_ARVALID : OUT STD_LOGIC;
    m_axi_fm_ARREADY : IN STD_LOGIC;
    m_axi_fm_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_fm_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fm_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fm_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fm_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fm_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_RVALID : IN STD_LOGIC;
    m_axi_fm_RREADY : OUT STD_LOGIC;
    m_axi_fm_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_fm_RLAST : IN STD_LOGIC;
    m_axi_fm_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_RFIFONUM : IN STD_LOGIC_VECTOR (9 downto 0);
    m_axi_fm_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_BVALID : IN STD_LOGIC;
    m_axi_fm_BREADY : OUT STD_LOGIC;
    m_axi_fm_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fm_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fm_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    add_ln42 : IN STD_LOGIC_VECTOR (10 downto 0);
    zext_ln30 : IN STD_LOGIC_VECTOR (9 downto 0);
    in_fm : IN STD_LOGIC_VECTOR (63 downto 0);
    p_mid132 : IN STD_LOGIC_VECTOR (0 downto 0);
    in_fm_buf_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    in_fm_buf_ce0 : OUT STD_LOGIC;
    in_fm_buf_we0 : OUT STD_LOGIC;
    in_fm_buf_d0 : OUT STD_LOGIC_VECTOR (735 downto 0);
    in_fm_buf_q0 : IN STD_LOGIC_VECTOR (735 downto 0);
    zext_ln31_2 : IN STD_LOGIC_VECTOR (10 downto 0);
    add_ln52 : IN STD_LOGIC_VECTOR (11 downto 0) );
end;


architecture behav of tiled_conv_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv736_lc_1 : STD_LOGIC_VECTOR (735 downto
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv13_1C08 : STD_LOGIC_VECTOR (12 downto 0) := "1110000001000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv12_958 : STD_LOGIC_VECTOR (11 downto 0) := "100101011000";
    constant ap_const_lv6_2E : STD_LOGIC_VECTOR (5 downto 0) := "101110";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv7_7D : STD_LOGIC_VECTOR (6 downto 0) := "1111101";
    constant ap_const_lv11_2DF : STD_LOGIC_VECTOR (10 downto 0) := "01011011111";
    constant ap_const_lv23_1CC000 : STD_LOGIC_VECTOR (22 downto 0) := "00111001100000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv12_4FF : STD_LOGIC_VECTOR (11 downto 0) := "010011111111";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv736_lc_2 : STD_LOGIC_VECTOR (735 downto
    constant ap_const_lv736_lc_3 : STD_LOGIC_VECTOR (735 downto
    constant ap_const_lv8_34 : STD_LOGIC_VECTOR (7 downto 0) := "00110100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter4 : BOOLEAN;
    signal icmp_ln37_reg_836 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_836_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln49_reg_890 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln49_reg_890_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op133_read_state12 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln37_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal fm_blk_n_AR : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln37_reg_836_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal fm_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal storemerge_reg_217 : STD_LOGIC_VECTOR (735 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_predicate_op113_readreq_state5 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln31_2_cast_fu_231_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln31_2_cast_reg_819 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln30_cast_fu_235_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln30_cast_reg_824 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_1_reg_830 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln37_reg_836_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_836_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_836_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_reg_840 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln37_fu_310_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln37_reg_847 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln37_1_fu_318_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln37_1_reg_852 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln37_1_reg_852_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln37_1_reg_852_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln37_1_reg_852_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln37_1_reg_852_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln37_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln37_reg_858 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln40_fu_344_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln40_reg_865 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln40_fu_356_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln40_reg_872 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln40_reg_872_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln40_reg_872_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln40_reg_872_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln40_reg_872_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln40_reg_872_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln37_fu_409_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln37_reg_880 : STD_LOGIC_VECTOR (22 downto 0);
    signal select_ln40_1_fu_427_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln40_1_reg_885 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln40_1_reg_885_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln40_1_reg_885_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln40_1_reg_885_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln49_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln49_reg_890_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln49_reg_890_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln49_reg_890_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln52_4_fu_558_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln52_4_reg_894 : STD_LOGIC_VECTOR (22 downto 0);
    signal fm_addr_reg_899 : STD_LOGIC_VECTOR (63 downto 0);
    signal in_fm_buf_addr_reg_905 : STD_LOGIC_VECTOR (7 downto 0);
    signal in_fm_buf_addr_reg_905_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal addr_cmp_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp_reg_910 : STD_LOGIC_VECTOR (0 downto 0);
    signal reuse_select_fu_661_p3 : STD_LOGIC_VECTOR (735 downto 0);
    signal reuse_select_reg_915 : STD_LOGIC_VECTOR (735 downto 0);
    signal fm_addr_read_reg_921 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_phi_mux_storemerge_phi_fu_221_p4 : STD_LOGIC_VECTOR (735 downto 0);
    signal or_ln52_fu_705_p2 : STD_LOGIC_VECTOR (735 downto 0);
    signal ap_phi_reg_pp0_iter6_storemerge_reg_217 : STD_LOGIC_VECTOR (735 downto 0);
    signal and_ln50_fu_728_p2 : STD_LOGIC_VECTOR (735 downto 0);
    signal p_cast_fu_640_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln52_fu_624_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_addr_reg_fu_128 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal reuse_reg_fu_132 : STD_LOGIC_VECTOR (735 downto 0);
    signal j_fu_136 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln45_fu_564_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_fu_140 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten_fu_144 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln40_4_fu_575_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal c_fu_148 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten44_fu_152 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln37_2_fu_286_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln37_fu_298_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln45_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln37_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln40_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln40_fu_374_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln42_fu_377_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp2_fu_385_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp2_cast_fu_391_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_fu_395_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln37_fu_409_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln37_fu_409_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal empty_37_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln42_1_fu_380_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln40_1_fu_432_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln42_1_fu_435_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp2_mid1_fu_443_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp2_cast_mid1_fu_449_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_mid1_fu_453_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_mid15_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln37_2_fu_415_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln42_2_fu_438_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln37_3_fu_421_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln40_3_fu_471_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln52_1_mid2_v_fu_478_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln45_mid2_v_fu_490_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln47_fu_502_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln49_1_fu_508_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln49_fu_514_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln49_fu_518_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln49_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln40_2_fu_464_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln49_fu_505_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln52_1_fu_535_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_540_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln40_fu_486_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln52_1_fu_548_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln52_3_fu_552_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln45_mid2_v_cast_fu_498_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln40_1_fu_569_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln37_1_fu_597_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln52_2_fu_605_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln37_1_fu_600_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln52_2_fu_608_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_614_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_739_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln3_fu_668_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln52_fu_675_p1 : STD_LOGIC_VECTOR (735 downto 0);
    signal shl_ln52_fu_679_p2 : STD_LOGIC_VECTOR (735 downto 0);
    signal xor_ln52_fu_685_p2 : STD_LOGIC_VECTOR (735 downto 0);
    signal zext_ln52_1_fu_696_p1 : STD_LOGIC_VECTOR (735 downto 0);
    signal and_ln52_fu_691_p2 : STD_LOGIC_VECTOR (735 downto 0);
    signal shl_ln52_1_fu_699_p2 : STD_LOGIC_VECTOR (735 downto 0);
    signal zext_ln50_fu_712_p1 : STD_LOGIC_VECTOR (735 downto 0);
    signal shl_ln50_fu_716_p2 : STD_LOGIC_VECTOR (735 downto 0);
    signal xor_ln50_fu_722_p2 : STD_LOGIC_VECTOR (735 downto 0);
    signal grp_fu_739_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_739_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_739_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to6 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_739_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_739_p20 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln37_fu_409_p00 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_condition_332 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component tiled_conv_mul_2ns_22ns_23_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component tiled_conv_mac_muladd_2ns_6ns_6ns_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component tiled_conv_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_2ns_22ns_23_1_1_U1 : component tiled_conv_mul_2ns_22ns_23_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 22,
        dout_WIDTH => 23)
    port map (
        din0 => mul_ln37_fu_409_p0,
        din1 => mul_ln37_fu_409_p1,
        dout => mul_ln37_fu_409_p2);

    mac_muladd_2ns_6ns_6ns_8_1_1_U2 : component tiled_conv_mac_muladd_2ns_6ns_6ns_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_739_p0,
        din1 => grp_fu_739_p1,
        din2 => grp_fu_739_p2,
        dout => grp_fu_739_p3);

    flow_control_loop_pipe_sequential_init_U : component tiled_conv_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    c_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                c_fu_148 <= ap_const_lv2_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln37_fu_280_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                c_fu_148 <= select_ln37_1_fu_318_p3;
            end if; 
        end if;
    end process;

    i_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_140 <= ap_const_lv6_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln37_reg_836 = ap_const_lv1_0))) then 
                    i_fu_140 <= select_ln40_1_fu_427_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten44_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten44_fu_152 <= ap_const_lv13_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln37_fu_280_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                indvar_flatten44_fu_152 <= add_ln37_2_fu_286_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_144 <= ap_const_lv12_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln37_reg_836 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_144 <= select_ln40_4_fu_575_p3;
                end if;
            end if; 
        end if;
    end process;

    j_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_136 <= ap_const_lv6_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln37_reg_836 = ap_const_lv1_0))) then 
                    j_fu_136 <= add_ln45_fu_564_p2;
                end if;
            end if; 
        end if;
    end process;

    reuse_addr_reg_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reuse_addr_reg_fu_128 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    reuse_addr_reg_fu_128 <= p_cast_fu_640_p1;
                end if;
            end if; 
        end if;
    end process;

    reuse_reg_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reuse_reg_fu_132 <= ap_const_lv736_lc_1;
                elsif ((ap_enable_reg_pp0_iter6 = ap_const_logic_1)) then 
                    reuse_reg_fu_132 <= ap_phi_mux_storemerge_phi_fu_221_p4;
                end if;
            end if; 
        end if;
    end process;

    storemerge_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_332)) then
                if (((icmp_ln37_reg_836_pp0_iter5_reg = ap_const_lv1_0) and (or_ln49_reg_890_pp0_iter5_reg = ap_const_lv1_1))) then 
                    storemerge_reg_217 <= and_ln50_fu_728_p2;
                elsif (((icmp_ln37_reg_836_pp0_iter5_reg = ap_const_lv1_0) and (or_ln49_reg_890_pp0_iter5_reg = ap_const_lv1_0))) then 
                    storemerge_reg_217 <= or_ln52_fu_705_p2;
                elsif (not((icmp_ln37_reg_836_pp0_iter5_reg = ap_const_lv1_1))) then 
                    storemerge_reg_217 <= ap_phi_reg_pp0_iter6_storemerge_reg_217;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln37_fu_280_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln40_reg_865 <= add_ln40_fu_344_p2;
                and_ln37_reg_858 <= and_ln37_fu_338_p2;
                icmp_ln40_reg_840 <= icmp_ln40_fu_304_p2;
                select_ln37_1_reg_852 <= select_ln37_1_fu_318_p3;
                select_ln37_reg_847 <= select_ln37_fu_310_p3;
                select_ln40_reg_872 <= select_ln40_fu_356_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln49_fu_529_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln37_reg_836 = ap_const_lv1_0))) then
                    add_ln52_4_reg_894(22 downto 1) <= add_ln52_4_fu_558_p2(22 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln37_reg_836_pp0_iter4_reg = ap_const_lv1_0))) then
                addr_cmp_reg_910 <= addr_cmp_fu_647_p2;
                in_fm_buf_addr_reg_905 <= p_cast_fu_640_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                i_1_reg_830 <= i_fu_140;
                icmp_ln37_reg_836 <= icmp_ln37_fu_280_p2;
                icmp_ln37_reg_836_pp0_iter1_reg <= icmp_ln37_reg_836;
                icmp_ln37_reg_836_pp0_iter2_reg <= icmp_ln37_reg_836_pp0_iter1_reg;
                icmp_ln37_reg_836_pp0_iter3_reg <= icmp_ln37_reg_836_pp0_iter2_reg;
                icmp_ln37_reg_836_pp0_iter4_reg <= icmp_ln37_reg_836_pp0_iter3_reg;
                icmp_ln37_reg_836_pp0_iter5_reg <= icmp_ln37_reg_836_pp0_iter4_reg;
                select_ln37_1_reg_852_pp0_iter1_reg <= select_ln37_1_reg_852;
                select_ln37_1_reg_852_pp0_iter2_reg <= select_ln37_1_reg_852_pp0_iter1_reg;
                select_ln37_1_reg_852_pp0_iter3_reg <= select_ln37_1_reg_852_pp0_iter2_reg;
                select_ln37_1_reg_852_pp0_iter4_reg <= select_ln37_1_reg_852_pp0_iter3_reg;
                select_ln40_reg_872_pp0_iter1_reg <= select_ln40_reg_872;
                select_ln40_reg_872_pp0_iter2_reg <= select_ln40_reg_872_pp0_iter1_reg;
                select_ln40_reg_872_pp0_iter3_reg <= select_ln40_reg_872_pp0_iter2_reg;
                select_ln40_reg_872_pp0_iter4_reg <= select_ln40_reg_872_pp0_iter3_reg;
                select_ln40_reg_872_pp0_iter5_reg <= select_ln40_reg_872_pp0_iter4_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_predicate_op133_read_state12 = ap_const_boolean_1))) then
                fm_addr_read_reg_921 <= m_axi_fm_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (or_ln49_reg_890 = ap_const_lv1_0) and (icmp_ln37_reg_836 = ap_const_lv1_0))) then
                fm_addr_reg_899 <= sext_ln52_fu_624_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                in_fm_buf_addr_reg_905_pp0_iter6_reg <= in_fm_buf_addr_reg_905;
                or_ln49_reg_890_pp0_iter2_reg <= or_ln49_reg_890;
                or_ln49_reg_890_pp0_iter3_reg <= or_ln49_reg_890_pp0_iter2_reg;
                or_ln49_reg_890_pp0_iter4_reg <= or_ln49_reg_890_pp0_iter3_reg;
                or_ln49_reg_890_pp0_iter5_reg <= or_ln49_reg_890_pp0_iter4_reg;
                select_ln40_1_reg_885_pp0_iter2_reg <= select_ln40_1_reg_885;
                select_ln40_1_reg_885_pp0_iter3_reg <= select_ln40_1_reg_885_pp0_iter2_reg;
                select_ln40_1_reg_885_pp0_iter4_reg <= select_ln40_1_reg_885_pp0_iter3_reg;
                    zext_ln30_cast_reg_824(9 downto 0) <= zext_ln30_cast_fu_235_p1(9 downto 0);
                    zext_ln31_2_cast_reg_819(10 downto 0) <= zext_ln31_2_cast_fu_231_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln37_reg_836 = ap_const_lv1_0))) then
                mul_ln37_reg_880 <= mul_ln37_fu_409_p2;
                or_ln49_reg_890 <= or_ln49_fu_529_p2;
                select_ln40_1_reg_885 <= select_ln40_1_fu_427_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln37_reg_836_pp0_iter4_reg = ap_const_lv1_0))) then
                reuse_select_reg_915 <= reuse_select_fu_661_p3;
            end if;
        end if;
    end process;
    zext_ln31_2_cast_reg_819(11) <= '0';
    zext_ln30_cast_reg_824(10) <= '0';
    add_ln52_4_reg_894(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to6, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to6 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln37_1_fu_600_p2 <= std_logic_vector(unsigned(zext_ln37_1_fu_597_p1) + unsigned(in_fm));
    add_ln37_2_fu_286_p2 <= std_logic_vector(unsigned(indvar_flatten44_fu_152) + unsigned(ap_const_lv13_1));
    add_ln37_fu_298_p2 <= std_logic_vector(unsigned(c_fu_148) + unsigned(ap_const_lv2_1));
    add_ln40_1_fu_569_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_144) + unsigned(ap_const_lv12_1));
    add_ln40_fu_344_p2 <= std_logic_vector(unsigned(select_ln37_fu_310_p3) + unsigned(ap_const_lv6_1));
    add_ln42_1_fu_380_p2 <= std_logic_vector(unsigned(add_ln42) + unsigned(zext_ln40_fu_374_p1));
    add_ln42_2_fu_438_p2 <= std_logic_vector(unsigned(add_ln42) + unsigned(zext_ln40_1_fu_432_p1));
    add_ln45_fu_564_p2 <= std_logic_vector(unsigned(select_ln40_reg_872) + unsigned(ap_const_lv6_1));
    add_ln49_1_fu_508_p2 <= std_logic_vector(unsigned(zext_ln47_fu_502_p1) + unsigned(ap_const_lv7_7D));
    add_ln49_fu_518_p2 <= std_logic_vector(signed(sext_ln49_fu_514_p1) + signed(zext_ln31_2_cast_reg_819));
    add_ln52_1_fu_535_p2 <= std_logic_vector(unsigned(add_ln52) + unsigned(zext_ln49_fu_505_p1));
    add_ln52_2_fu_608_p2 <= std_logic_vector(signed(sext_ln52_2_fu_605_p1) + signed(add_ln37_1_fu_600_p2));
    add_ln52_3_fu_552_p2 <= std_logic_vector(signed(sext_ln40_fu_486_p1) + signed(sext_ln52_1_fu_548_p1));
    add_ln52_4_fu_558_p2 <= std_logic_vector(unsigned(add_ln52_3_fu_552_p2) + unsigned(sext_ln45_mid2_v_cast_fu_498_p1));
    addr_cmp_fu_647_p2 <= "1" when (reuse_addr_reg_fu_128 = p_cast_fu_640_p1) else "0";
    and_ln37_fu_338_p2 <= (xor_ln37_fu_326_p2 and icmp_ln45_fu_332_p2);
    and_ln50_fu_728_p2 <= (xor_ln50_fu_722_p2 and reuse_select_reg_915);
    and_ln52_fu_691_p2 <= (xor_ln52_fu_685_p2 and reuse_select_reg_915);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter5, m_axi_fm_RVALID, ap_predicate_op133_read_state12)
    begin
                ap_block_pp0_stage1_11001 <= ((m_axi_fm_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_predicate_op133_read_state12 = ap_const_boolean_1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter5, m_axi_fm_RVALID, ap_predicate_op133_read_state12)
    begin
                ap_block_pp0_stage1_subdone <= ((m_axi_fm_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_predicate_op133_read_state12 = ap_const_boolean_1));
    end process;

        ap_block_state10_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_pp0_stage1_iter5_assign_proc : process(m_axi_fm_RVALID, ap_predicate_op133_read_state12)
    begin
                ap_block_state12_pp0_stage1_iter5 <= ((m_axi_fm_RVALID = ap_const_logic_0) and (ap_predicate_op133_read_state12 = ap_const_boolean_1));
    end process;

        ap_block_state13_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(m_axi_fm_ARREADY, ap_predicate_op113_readreq_state5)
    begin
                ap_block_state5_io <= ((m_axi_fm_ARREADY = ap_const_logic_0) and (ap_predicate_op113_readreq_state5 = ap_const_boolean_1));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_332_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
                ap_condition_332 <= ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln37_fu_280_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln37_fu_280_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln37_reg_836, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln37_reg_836 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to6_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to6 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to6 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_phi_mux_storemerge_phi_fu_221_p4_assign_proc : process(or_ln49_reg_890_pp0_iter5_reg, icmp_ln37_reg_836_pp0_iter5_reg, or_ln52_fu_705_p2, ap_phi_reg_pp0_iter6_storemerge_reg_217, and_ln50_fu_728_p2)
    begin
        if ((icmp_ln37_reg_836_pp0_iter5_reg = ap_const_lv1_0)) then
            if ((or_ln49_reg_890_pp0_iter5_reg = ap_const_lv1_1)) then 
                ap_phi_mux_storemerge_phi_fu_221_p4 <= and_ln50_fu_728_p2;
            elsif ((or_ln49_reg_890_pp0_iter5_reg = ap_const_lv1_0)) then 
                ap_phi_mux_storemerge_phi_fu_221_p4 <= or_ln52_fu_705_p2;
            else 
                ap_phi_mux_storemerge_phi_fu_221_p4 <= ap_phi_reg_pp0_iter6_storemerge_reg_217;
            end if;
        else 
            ap_phi_mux_storemerge_phi_fu_221_p4 <= ap_phi_reg_pp0_iter6_storemerge_reg_217;
        end if; 
    end process;

    ap_phi_reg_pp0_iter6_storemerge_reg

    ap_predicate_op113_readreq_state5_assign_proc : process(or_ln49_reg_890, icmp_ln37_reg_836_pp0_iter1_reg)
    begin
                ap_predicate_op113_readreq_state5 <= ((icmp_ln37_reg_836_pp0_iter1_reg = ap_const_lv1_0) and (or_ln49_reg_890 = ap_const_lv1_0));
    end process;


    ap_predicate_op133_read_state12_assign_proc : process(icmp_ln37_reg_836_pp0_iter4_reg, or_ln49_reg_890_pp0_iter5_reg)
    begin
                ap_predicate_op133_read_state12 <= ((or_ln49_reg_890_pp0_iter5_reg = ap_const_lv1_0) and (icmp_ln37_reg_836_pp0_iter4_reg = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    empty_37_fu_400_p2 <= "1" when (unsigned(empty_fu_395_p2) > unsigned(ap_const_lv11_2DF)) else "0";
    empty_fu_395_p2 <= std_logic_vector(signed(tmp2_cast_fu_391_p1) + signed(zext_ln30_cast_reg_824));

    fm_blk_n_AR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, m_axi_fm_ARREADY, or_ln49_reg_890, ap_block_pp0_stage0, icmp_ln37_reg_836_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln37_reg_836_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (or_ln49_reg_890 = ap_const_lv1_0))) then 
            fm_blk_n_AR <= m_axi_fm_ARREADY;
        else 
            fm_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    fm_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, m_axi_fm_RVALID, ap_predicate_op133_read_state12, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_predicate_op133_read_state12 = ap_const_boolean_1))) then 
            fm_blk_n_R <= m_axi_fm_RVALID;
        else 
            fm_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_739_p0 <= grp_fu_739_p00(2 - 1 downto 0);
    grp_fu_739_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln37_1_reg_852_pp0_iter4_reg),8));
    grp_fu_739_p1 <= ap_const_lv8_34(6 - 1 downto 0);
    grp_fu_739_p2 <= grp_fu_739_p20(6 - 1 downto 0);
    grp_fu_739_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln40_1_reg_885_pp0_iter4_reg),8));
    icmp_ln37_fu_280_p2 <= "1" when (indvar_flatten44_fu_152 = ap_const_lv13_1C08) else "0";
    icmp_ln40_fu_304_p2 <= "1" when (indvar_flatten_fu_144 = ap_const_lv12_958) else "0";
    icmp_ln45_fu_332_p2 <= "1" when (j_fu_136 = ap_const_lv6_2E) else "0";
    icmp_ln49_fu_523_p2 <= "1" when (unsigned(add_ln49_fu_518_p2) > unsigned(ap_const_lv12_4FF)) else "0";

    in_fm_buf_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1, in_fm_buf_addr_reg_905_pp0_iter6_reg, p_cast_fu_640_p1)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            in_fm_buf_address0 <= in_fm_buf_addr_reg_905_pp0_iter6_reg;
        elsif (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            in_fm_buf_address0 <= p_cast_fu_640_p1(8 - 1 downto 0);
        else 
            in_fm_buf_address0 <= "XXXXXXXX";
        end if; 
    end process;


    in_fm_buf_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            in_fm_buf_ce0 <= ap_const_logic_1;
        else 
            in_fm_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_fm_buf_d0 <= storemerge_reg_217;

    in_fm_buf_we0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            in_fm_buf_we0 <= ap_const_logic_1;
        else 
            in_fm_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_fm_ARADDR <= fm_addr_reg_899;
    m_axi_fm_ARBURST <= ap_const_lv2_0;
    m_axi_fm_ARCACHE <= ap_const_lv4_0;
    m_axi_fm_ARID <= ap_const_lv1_0;
    m_axi_fm_ARLEN <= ap_const_lv32_1;
    m_axi_fm_ARLOCK <= ap_const_lv2_0;
    m_axi_fm_ARPROT <= ap_const_lv3_0;
    m_axi_fm_ARQOS <= ap_const_lv4_0;
    m_axi_fm_ARREGION <= ap_const_lv4_0;
    m_axi_fm_ARSIZE <= ap_const_lv3_0;
    m_axi_fm_ARUSER <= ap_const_lv1_0;

    m_axi_fm_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_predicate_op113_readreq_state5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op113_readreq_state5 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_fm_ARVALID <= ap_const_logic_1;
        else 
            m_axi_fm_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_fm_AWADDR <= ap_const_lv64_0;
    m_axi_fm_AWBURST <= ap_const_lv2_0;
    m_axi_fm_AWCACHE <= ap_const_lv4_0;
    m_axi_fm_AWID <= ap_const_lv1_0;
    m_axi_fm_AWLEN <= ap_const_lv32_0;
    m_axi_fm_AWLOCK <= ap_const_lv2_0;
    m_axi_fm_AWPROT <= ap_const_lv3_0;
    m_axi_fm_AWQOS <= ap_const_lv4_0;
    m_axi_fm_AWREGION <= ap_const_lv4_0;
    m_axi_fm_AWSIZE <= ap_const_lv3_0;
    m_axi_fm_AWUSER <= ap_const_lv1_0;
    m_axi_fm_AWVALID <= ap_const_logic_0;
    m_axi_fm_BREADY <= ap_const_logic_0;

    m_axi_fm_RREADY_assign_proc : process(ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_predicate_op133_read_state12, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_predicate_op133_read_state12 = ap_const_boolean_1))) then 
            m_axi_fm_RREADY <= ap_const_logic_1;
        else 
            m_axi_fm_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_fm_WDATA <= ap_const_lv16_0;
    m_axi_fm_WID <= ap_const_lv1_0;
    m_axi_fm_WLAST <= ap_const_logic_0;
    m_axi_fm_WSTRB <= ap_const_lv2_0;
    m_axi_fm_WUSER <= ap_const_lv1_0;
    m_axi_fm_WVALID <= ap_const_logic_0;
    mul_ln37_fu_409_p0 <= mul_ln37_fu_409_p00(2 - 1 downto 0);
    mul_ln37_fu_409_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln37_1_reg_852),23));
    mul_ln37_fu_409_p1 <= ap_const_lv23_1CC000(22 - 1 downto 0);
    or_ln40_fu_350_p2 <= (icmp_ln40_fu_304_p2 or and_ln37_fu_338_p2);
    or_ln49_fu_529_p2 <= (select_ln40_2_fu_464_p3 or icmp_ln49_fu_523_p2);
    or_ln52_fu_705_p2 <= (shl_ln52_1_fu_699_p2 or and_ln52_fu_691_p2);
    p_cast_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_739_p3),64));
    p_mid15_fu_458_p2 <= "1" when (unsigned(p_mid1_fu_453_p2) > unsigned(ap_const_lv11_2DF)) else "0";
    p_mid1_fu_453_p2 <= std_logic_vector(signed(tmp2_cast_mid1_fu_449_p1) + signed(zext_ln30_cast_reg_824));
    reuse_select_fu_661_p3 <= 
        reuse_reg_fu_132 when (addr_cmp_reg_910(0) = '1') else 
        in_fm_buf_q0;
    select_ln37_1_fu_318_p3 <= 
        add_ln37_fu_298_p2 when (icmp_ln40_fu_304_p2(0) = '1') else 
        c_fu_148;
    select_ln37_2_fu_415_p3 <= 
        p_mid132 when (icmp_ln40_reg_840(0) = '1') else 
        empty_37_fu_400_p2;
    select_ln37_3_fu_421_p3 <= 
        add_ln42 when (icmp_ln40_reg_840(0) = '1') else 
        add_ln42_1_fu_380_p2;
    select_ln37_fu_310_p3 <= 
        ap_const_lv6_0 when (icmp_ln40_fu_304_p2(0) = '1') else 
        i_fu_140;
    select_ln40_1_fu_427_p3 <= 
        add_ln40_reg_865 when (and_ln37_reg_858(0) = '1') else 
        select_ln37_reg_847;
    select_ln40_2_fu_464_p3 <= 
        p_mid15_fu_458_p2 when (and_ln37_reg_858(0) = '1') else 
        select_ln37_2_fu_415_p3;
    select_ln40_3_fu_471_p3 <= 
        add_ln42_2_fu_438_p2 when (and_ln37_reg_858(0) = '1') else 
        select_ln37_3_fu_421_p3;
    select_ln40_4_fu_575_p3 <= 
        ap_const_lv12_1 when (icmp_ln40_reg_840(0) = '1') else 
        add_ln40_1_fu_569_p2;
    select_ln40_fu_356_p3 <= 
        ap_const_lv6_0 when (or_ln40_fu_350_p2(0) = '1') else 
        j_fu_136;
        sext_ln40_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln52_1_mid2_v_fu_478_p3),23));

        sext_ln45_mid2_v_cast_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln45_mid2_v_fu_490_p3),23));

    sext_ln45_mid2_v_fu_490_p3 <= (select_ln40_3_fu_471_p3 & ap_const_lv9_0);
        sext_ln49_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln49_1_fu_508_p2),12));

        sext_ln52_1_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_fu_540_p3),23));

    sext_ln52_1_mid2_v_fu_478_p3 <= (select_ln40_3_fu_471_p3 & ap_const_lv11_0);
        sext_ln52_2_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln52_4_reg_894),64));

        sext_ln52_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_614_p4),64));

    shl_ln3_fu_668_p3 <= (select_ln40_reg_872_pp0_iter5_reg & ap_const_lv4_0);
    shl_ln50_fu_716_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv736_lc_2),to_integer(unsigned('0' & zext_ln50_fu_712_p1(31-1 downto 0)))));
    shl_ln52_1_fu_699_p2 <= std_logic_vector(shift_left(unsigned(zext_ln52_1_fu_696_p1),to_integer(unsigned('0' & zext_ln52_fu_675_p1(31-1 downto 0)))));
    shl_ln52_fu_679_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv736_lc_2),to_integer(unsigned('0' & zext_ln52_fu_675_p1(31-1 downto 0)))));
        tmp2_cast_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_385_p2),11));

        tmp2_cast_mid1_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_mid1_fu_443_p2),11));

    tmp2_fu_385_p2 <= std_logic_vector(unsigned(zext_ln42_fu_377_p1) + unsigned(ap_const_lv7_7D));
    tmp2_mid1_fu_443_p2 <= std_logic_vector(unsigned(zext_ln42_1_fu_435_p1) + unsigned(ap_const_lv7_7D));
    tmp_s_fu_540_p3 <= (add_ln52_1_fu_535_p2 & ap_const_lv1_0);
    trunc_ln_fu_614_p4 <= add_ln52_2_fu_608_p2(63 downto 1);
    xor_ln37_fu_326_p2 <= (icmp_ln40_fu_304_p2 xor ap_const_lv1_1);
    xor_ln50_fu_722_p2 <= (shl_ln50_fu_716_p2 xor ap_const_lv736_lc_3);
    xor_ln52_fu_685_p2 <= (shl_ln52_fu_679_p2 xor ap_const_lv736_lc_3);
    zext_ln30_cast_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln30),11));
    zext_ln31_2_cast_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln31_2),12));
    zext_ln37_1_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln37_reg_880),64));
    zext_ln40_1_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_reg_865),11));
    zext_ln40_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_830),11));
    zext_ln42_1_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_reg_865),7));
    zext_ln42_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_830),7));
    zext_ln47_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln40_reg_872),7));
    zext_ln49_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln40_reg_872),12));
    zext_ln50_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln3_fu_668_p3),736));
    zext_ln52_1_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fm_addr_read_reg_921),736));
    zext_ln52_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln3_fu_668_p3),736));
end behav;
