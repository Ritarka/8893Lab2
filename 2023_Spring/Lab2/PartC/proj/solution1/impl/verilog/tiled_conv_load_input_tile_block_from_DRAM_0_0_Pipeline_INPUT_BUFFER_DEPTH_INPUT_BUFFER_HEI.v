// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tiled_conv_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_fm_AWVALID,
        m_axi_fm_AWREADY,
        m_axi_fm_AWADDR,
        m_axi_fm_AWID,
        m_axi_fm_AWLEN,
        m_axi_fm_AWSIZE,
        m_axi_fm_AWBURST,
        m_axi_fm_AWLOCK,
        m_axi_fm_AWCACHE,
        m_axi_fm_AWPROT,
        m_axi_fm_AWQOS,
        m_axi_fm_AWREGION,
        m_axi_fm_AWUSER,
        m_axi_fm_WVALID,
        m_axi_fm_WREADY,
        m_axi_fm_WDATA,
        m_axi_fm_WSTRB,
        m_axi_fm_WLAST,
        m_axi_fm_WID,
        m_axi_fm_WUSER,
        m_axi_fm_ARVALID,
        m_axi_fm_ARREADY,
        m_axi_fm_ARADDR,
        m_axi_fm_ARID,
        m_axi_fm_ARLEN,
        m_axi_fm_ARSIZE,
        m_axi_fm_ARBURST,
        m_axi_fm_ARLOCK,
        m_axi_fm_ARCACHE,
        m_axi_fm_ARPROT,
        m_axi_fm_ARQOS,
        m_axi_fm_ARREGION,
        m_axi_fm_ARUSER,
        m_axi_fm_RVALID,
        m_axi_fm_RREADY,
        m_axi_fm_RDATA,
        m_axi_fm_RLAST,
        m_axi_fm_RID,
        m_axi_fm_RFIFONUM,
        m_axi_fm_RUSER,
        m_axi_fm_RRESP,
        m_axi_fm_BVALID,
        m_axi_fm_BREADY,
        m_axi_fm_BRESP,
        m_axi_fm_BID,
        m_axi_fm_BUSER,
        add_ln42,
        zext_ln30,
        in_fm,
        p_mid132,
        in_fm_buf_address0,
        in_fm_buf_ce0,
        in_fm_buf_we0,
        in_fm_buf_d0,
        in_fm_buf_q0,
        zext_ln31_2,
        add_ln52
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_fm_AWVALID;
input   m_axi_fm_AWREADY;
output  [63:0] m_axi_fm_AWADDR;
output  [0:0] m_axi_fm_AWID;
output  [31:0] m_axi_fm_AWLEN;
output  [2:0] m_axi_fm_AWSIZE;
output  [1:0] m_axi_fm_AWBURST;
output  [1:0] m_axi_fm_AWLOCK;
output  [3:0] m_axi_fm_AWCACHE;
output  [2:0] m_axi_fm_AWPROT;
output  [3:0] m_axi_fm_AWQOS;
output  [3:0] m_axi_fm_AWREGION;
output  [0:0] m_axi_fm_AWUSER;
output   m_axi_fm_WVALID;
input   m_axi_fm_WREADY;
output  [15:0] m_axi_fm_WDATA;
output  [1:0] m_axi_fm_WSTRB;
output   m_axi_fm_WLAST;
output  [0:0] m_axi_fm_WID;
output  [0:0] m_axi_fm_WUSER;
output   m_axi_fm_ARVALID;
input   m_axi_fm_ARREADY;
output  [63:0] m_axi_fm_ARADDR;
output  [0:0] m_axi_fm_ARID;
output  [31:0] m_axi_fm_ARLEN;
output  [2:0] m_axi_fm_ARSIZE;
output  [1:0] m_axi_fm_ARBURST;
output  [1:0] m_axi_fm_ARLOCK;
output  [3:0] m_axi_fm_ARCACHE;
output  [2:0] m_axi_fm_ARPROT;
output  [3:0] m_axi_fm_ARQOS;
output  [3:0] m_axi_fm_ARREGION;
output  [0:0] m_axi_fm_ARUSER;
input   m_axi_fm_RVALID;
output   m_axi_fm_RREADY;
input  [15:0] m_axi_fm_RDATA;
input   m_axi_fm_RLAST;
input  [0:0] m_axi_fm_RID;
input  [9:0] m_axi_fm_RFIFONUM;
input  [0:0] m_axi_fm_RUSER;
input  [1:0] m_axi_fm_RRESP;
input   m_axi_fm_BVALID;
output   m_axi_fm_BREADY;
input  [1:0] m_axi_fm_BRESP;
input  [0:0] m_axi_fm_BID;
input  [0:0] m_axi_fm_BUSER;
input  [10:0] add_ln42;
input  [9:0] zext_ln30;
input  [63:0] in_fm;
input  [0:0] p_mid132;
output  [7:0] in_fm_buf_address0;
output   in_fm_buf_ce0;
output   in_fm_buf_we0;
output  [735:0] in_fm_buf_d0;
input  [735:0] in_fm_buf_q0;
input  [10:0] zext_ln31_2;
input  [11:0] add_ln52;

reg ap_idle;
reg m_axi_fm_ARVALID;
reg m_axi_fm_RREADY;
reg[7:0] in_fm_buf_address0;
reg in_fm_buf_ce0;
reg in_fm_buf_we0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_state6_pp0_stage1_iter2;
wire    ap_block_state8_pp0_stage1_iter3;
wire    ap_block_state10_pp0_stage1_iter4;
reg   [0:0] icmp_ln37_reg_836;
reg   [0:0] icmp_ln37_reg_836_pp0_iter4_reg;
reg   [0:0] or_ln49_reg_890;
reg   [0:0] or_ln49_reg_890_pp0_iter5_reg;
reg    ap_predicate_op133_read_state12;
reg    ap_block_state12_pp0_stage1_iter5;
wire    ap_block_state14_pp0_stage1_iter6;
reg    ap_block_pp0_stage1_subdone;
wire   [0:0] icmp_ln37_fu_280_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    fm_blk_n_AR;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln37_reg_836_pp0_iter1_reg;
reg    fm_blk_n_R;
wire    ap_block_pp0_stage1;
reg   [735:0] storemerge_reg_217;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_predicate_op113_readreq_state5;
reg    ap_block_state5_io;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_state9_pp0_stage0_iter4;
wire    ap_block_state11_pp0_stage0_iter5;
wire    ap_block_state13_pp0_stage0_iter6;
reg    ap_block_pp0_stage0_11001;
wire   [11:0] zext_ln31_2_cast_fu_231_p1;
reg   [11:0] zext_ln31_2_cast_reg_819;
wire   [10:0] zext_ln30_cast_fu_235_p1;
reg   [10:0] zext_ln30_cast_reg_824;
reg   [5:0] i_1_reg_830;
reg    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln37_reg_836_pp0_iter2_reg;
reg   [0:0] icmp_ln37_reg_836_pp0_iter3_reg;
reg   [0:0] icmp_ln37_reg_836_pp0_iter5_reg;
wire   [0:0] icmp_ln40_fu_304_p2;
reg   [0:0] icmp_ln40_reg_840;
wire   [5:0] select_ln37_fu_310_p3;
reg   [5:0] select_ln37_reg_847;
wire   [1:0] select_ln37_1_fu_318_p3;
reg   [1:0] select_ln37_1_reg_852;
reg   [1:0] select_ln37_1_reg_852_pp0_iter1_reg;
reg   [1:0] select_ln37_1_reg_852_pp0_iter2_reg;
reg   [1:0] select_ln37_1_reg_852_pp0_iter3_reg;
reg   [1:0] select_ln37_1_reg_852_pp0_iter4_reg;
wire   [0:0] and_ln37_fu_338_p2;
reg   [0:0] and_ln37_reg_858;
wire   [5:0] add_ln40_fu_344_p2;
reg   [5:0] add_ln40_reg_865;
wire   [5:0] select_ln40_fu_356_p3;
reg   [5:0] select_ln40_reg_872;
reg   [5:0] select_ln40_reg_872_pp0_iter1_reg;
reg   [5:0] select_ln40_reg_872_pp0_iter2_reg;
reg   [5:0] select_ln40_reg_872_pp0_iter3_reg;
reg   [5:0] select_ln40_reg_872_pp0_iter4_reg;
reg   [5:0] select_ln40_reg_872_pp0_iter5_reg;
wire   [22:0] mul_ln37_fu_409_p2;
reg   [22:0] mul_ln37_reg_880;
wire   [5:0] select_ln40_1_fu_427_p3;
reg   [5:0] select_ln40_1_reg_885;
reg   [5:0] select_ln40_1_reg_885_pp0_iter2_reg;
reg   [5:0] select_ln40_1_reg_885_pp0_iter3_reg;
reg   [5:0] select_ln40_1_reg_885_pp0_iter4_reg;
wire   [0:0] or_ln49_fu_529_p2;
reg   [0:0] or_ln49_reg_890_pp0_iter2_reg;
reg   [0:0] or_ln49_reg_890_pp0_iter3_reg;
reg   [0:0] or_ln49_reg_890_pp0_iter4_reg;
wire   [22:0] add_ln52_4_fu_558_p2;
reg   [22:0] add_ln52_4_reg_894;
reg   [63:0] fm_addr_reg_899;
reg   [7:0] in_fm_buf_addr_reg_905;
reg   [7:0] in_fm_buf_addr_reg_905_pp0_iter6_reg;
wire   [0:0] addr_cmp_fu_647_p2;
reg   [0:0] addr_cmp_reg_910;
wire   [735:0] reuse_select_fu_661_p3;
reg   [735:0] reuse_select_reg_915;
reg   [15:0] fm_addr_read_reg_921;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter1_stage0;
reg   [735:0] ap_phi_mux_storemerge_phi_fu_221_p4;
wire   [735:0] or_ln52_fu_705_p2;
wire   [735:0] ap_phi_reg_pp0_iter6_storemerge_reg_217;
wire   [735:0] and_ln50_fu_728_p2;
wire   [63:0] p_cast_fu_640_p1;
wire  signed [63:0] sext_ln52_fu_624_p1;
reg   [63:0] reuse_addr_reg_fu_128;
wire    ap_loop_init;
reg   [735:0] reuse_reg_fu_132;
reg   [5:0] j_fu_136;
wire   [5:0] add_ln45_fu_564_p2;
reg   [5:0] i_fu_140;
reg   [11:0] indvar_flatten_fu_144;
wire   [11:0] select_ln40_4_fu_575_p3;
reg   [1:0] c_fu_148;
reg   [12:0] indvar_flatten44_fu_152;
wire   [12:0] add_ln37_2_fu_286_p2;
wire   [1:0] add_ln37_fu_298_p2;
wire   [0:0] icmp_ln45_fu_332_p2;
wire   [0:0] xor_ln37_fu_326_p2;
wire   [0:0] or_ln40_fu_350_p2;
wire   [10:0] zext_ln40_fu_374_p1;
wire   [6:0] zext_ln42_fu_377_p1;
wire   [6:0] tmp2_fu_385_p2;
wire  signed [10:0] tmp2_cast_fu_391_p1;
wire   [10:0] empty_fu_395_p2;
wire   [1:0] mul_ln37_fu_409_p0;
wire   [21:0] mul_ln37_fu_409_p1;
wire   [0:0] empty_37_fu_400_p2;
wire   [10:0] add_ln42_1_fu_380_p2;
wire   [10:0] zext_ln40_1_fu_432_p1;
wire   [6:0] zext_ln42_1_fu_435_p1;
wire   [6:0] tmp2_mid1_fu_443_p2;
wire  signed [10:0] tmp2_cast_mid1_fu_449_p1;
wire   [10:0] p_mid1_fu_453_p2;
wire   [0:0] p_mid15_fu_458_p2;
wire   [0:0] select_ln37_2_fu_415_p3;
wire   [10:0] add_ln42_2_fu_438_p2;
wire   [10:0] select_ln37_3_fu_421_p3;
wire   [10:0] select_ln40_3_fu_471_p3;
wire   [21:0] sext_ln52_1_mid2_v_fu_478_p3;
wire   [19:0] sext_ln45_mid2_v_fu_490_p3;
wire   [6:0] zext_ln47_fu_502_p1;
wire   [6:0] add_ln49_1_fu_508_p2;
wire  signed [11:0] sext_ln49_fu_514_p1;
wire   [11:0] add_ln49_fu_518_p2;
wire   [0:0] icmp_ln49_fu_523_p2;
wire   [0:0] select_ln40_2_fu_464_p3;
wire   [11:0] zext_ln49_fu_505_p1;
wire   [11:0] add_ln52_1_fu_535_p2;
wire   [12:0] tmp_s_fu_540_p3;
wire  signed [22:0] sext_ln40_fu_486_p1;
wire  signed [22:0] sext_ln52_1_fu_548_p1;
wire   [22:0] add_ln52_3_fu_552_p2;
wire  signed [22:0] sext_ln45_mid2_v_cast_fu_498_p1;
wire   [11:0] add_ln40_1_fu_569_p2;
wire   [63:0] zext_ln37_1_fu_597_p1;
wire  signed [63:0] sext_ln52_2_fu_605_p1;
wire   [63:0] add_ln37_1_fu_600_p2;
wire   [63:0] add_ln52_2_fu_608_p2;
wire   [62:0] trunc_ln_fu_614_p4;
wire   [7:0] grp_fu_739_p3;
wire   [9:0] shl_ln3_fu_668_p3;
wire   [735:0] zext_ln52_fu_675_p1;
wire   [735:0] shl_ln52_fu_679_p2;
wire   [735:0] xor_ln52_fu_685_p2;
wire   [735:0] zext_ln52_1_fu_696_p1;
wire   [735:0] and_ln52_fu_691_p2;
wire   [735:0] shl_ln52_1_fu_699_p2;
wire   [735:0] zext_ln50_fu_712_p1;
wire   [735:0] shl_ln50_fu_716_p2;
wire   [735:0] xor_ln50_fu_722_p2;
wire   [1:0] grp_fu_739_p0;
wire   [5:0] grp_fu_739_p1;
wire   [5:0] grp_fu_739_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to6;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [7:0] grp_fu_739_p00;
wire   [7:0] grp_fu_739_p20;
wire   [22:0] mul_ln37_fu_409_p00;
reg    ap_condition_332;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

tiled_conv_mul_2ns_22ns_23_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 2 ),
    .din1_WIDTH( 22 ),
    .dout_WIDTH( 23 ))
mul_2ns_22ns_23_1_1_U1(
    .din0(mul_ln37_fu_409_p0),
    .din1(mul_ln37_fu_409_p1),
    .dout(mul_ln37_fu_409_p2)
);

tiled_conv_mac_muladd_2ns_6ns_6ns_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 2 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .dout_WIDTH( 8 ))
mac_muladd_2ns_6ns_6ns_8_1_1_U2(
    .din0(grp_fu_739_p0),
    .din1(grp_fu_739_p1),
    .din2(grp_fu_739_p2),
    .dout(grp_fu_739_p3)
);

tiled_conv_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        c_fu_148 <= 2'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln37_fu_280_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        c_fu_148 <= select_ln37_1_fu_318_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_140 <= 6'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln37_reg_836 == 1'd0))) begin
            i_fu_140 <= select_ln40_1_fu_427_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten44_fu_152 <= 13'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln37_fu_280_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        indvar_flatten44_fu_152 <= add_ln37_2_fu_286_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_144 <= 12'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln37_reg_836 == 1'd0))) begin
            indvar_flatten_fu_144 <= select_ln40_4_fu_575_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_136 <= 6'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln37_reg_836 == 1'd0))) begin
            j_fu_136 <= add_ln45_fu_564_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg_fu_128 <= 64'd18446744073709551615;
        end else if ((ap_enable_reg_pp0_iter5 == 1'b1)) begin
            reuse_addr_reg_fu_128 <= p_cast_fu_640_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_reg_fu_132 <= 736'd0;
        end else if ((ap_enable_reg_pp0_iter6 == 1'b1)) begin
            reuse_reg_fu_132 <= ap_phi_mux_storemerge_phi_fu_221_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_332)) begin
        if (((icmp_ln37_reg_836_pp0_iter5_reg == 1'd0) & (or_ln49_reg_890_pp0_iter5_reg == 1'd1))) begin
            storemerge_reg_217 <= and_ln50_fu_728_p2;
        end else if (((icmp_ln37_reg_836_pp0_iter5_reg == 1'd0) & (or_ln49_reg_890_pp0_iter5_reg == 1'd0))) begin
            storemerge_reg_217 <= or_ln52_fu_705_p2;
        end else if (~(icmp_ln37_reg_836_pp0_iter5_reg == 1'd1)) begin
            storemerge_reg_217 <= ap_phi_reg_pp0_iter6_storemerge_reg_217;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln37_fu_280_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln40_reg_865 <= add_ln40_fu_344_p2;
        and_ln37_reg_858 <= and_ln37_fu_338_p2;
        icmp_ln40_reg_840 <= icmp_ln40_fu_304_p2;
        select_ln37_1_reg_852 <= select_ln37_1_fu_318_p3;
        select_ln37_reg_847 <= select_ln37_fu_310_p3;
        select_ln40_reg_872 <= select_ln40_fu_356_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln49_fu_529_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln37_reg_836 == 1'd0))) begin
        add_ln52_4_reg_894[22 : 1] <= add_ln52_4_fu_558_p2[22 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln37_reg_836_pp0_iter4_reg == 1'd0))) begin
        addr_cmp_reg_910 <= addr_cmp_fu_647_p2;
        in_fm_buf_addr_reg_905 <= p_cast_fu_640_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        i_1_reg_830 <= i_fu_140;
        icmp_ln37_reg_836 <= icmp_ln37_fu_280_p2;
        icmp_ln37_reg_836_pp0_iter1_reg <= icmp_ln37_reg_836;
        icmp_ln37_reg_836_pp0_iter2_reg <= icmp_ln37_reg_836_pp0_iter1_reg;
        icmp_ln37_reg_836_pp0_iter3_reg <= icmp_ln37_reg_836_pp0_iter2_reg;
        icmp_ln37_reg_836_pp0_iter4_reg <= icmp_ln37_reg_836_pp0_iter3_reg;
        icmp_ln37_reg_836_pp0_iter5_reg <= icmp_ln37_reg_836_pp0_iter4_reg;
        select_ln37_1_reg_852_pp0_iter1_reg <= select_ln37_1_reg_852;
        select_ln37_1_reg_852_pp0_iter2_reg <= select_ln37_1_reg_852_pp0_iter1_reg;
        select_ln37_1_reg_852_pp0_iter3_reg <= select_ln37_1_reg_852_pp0_iter2_reg;
        select_ln37_1_reg_852_pp0_iter4_reg <= select_ln37_1_reg_852_pp0_iter3_reg;
        select_ln40_reg_872_pp0_iter1_reg <= select_ln40_reg_872;
        select_ln40_reg_872_pp0_iter2_reg <= select_ln40_reg_872_pp0_iter1_reg;
        select_ln40_reg_872_pp0_iter3_reg <= select_ln40_reg_872_pp0_iter2_reg;
        select_ln40_reg_872_pp0_iter4_reg <= select_ln40_reg_872_pp0_iter3_reg;
        select_ln40_reg_872_pp0_iter5_reg <= select_ln40_reg_872_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_predicate_op133_read_state12 == 1'b1))) begin
        fm_addr_read_reg_921 <= m_axi_fm_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (or_ln49_reg_890 == 1'd0) & (icmp_ln37_reg_836 == 1'd0))) begin
        fm_addr_reg_899 <= sext_ln52_fu_624_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_fm_buf_addr_reg_905_pp0_iter6_reg <= in_fm_buf_addr_reg_905;
        or_ln49_reg_890_pp0_iter2_reg <= or_ln49_reg_890;
        or_ln49_reg_890_pp0_iter3_reg <= or_ln49_reg_890_pp0_iter2_reg;
        or_ln49_reg_890_pp0_iter4_reg <= or_ln49_reg_890_pp0_iter3_reg;
        or_ln49_reg_890_pp0_iter5_reg <= or_ln49_reg_890_pp0_iter4_reg;
        select_ln40_1_reg_885_pp0_iter2_reg <= select_ln40_1_reg_885;
        select_ln40_1_reg_885_pp0_iter3_reg <= select_ln40_1_reg_885_pp0_iter2_reg;
        select_ln40_1_reg_885_pp0_iter4_reg <= select_ln40_1_reg_885_pp0_iter3_reg;
        zext_ln30_cast_reg_824[9 : 0] <= zext_ln30_cast_fu_235_p1[9 : 0];
        zext_ln31_2_cast_reg_819[10 : 0] <= zext_ln31_2_cast_fu_231_p1[10 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln37_reg_836 == 1'd0))) begin
        mul_ln37_reg_880 <= mul_ln37_fu_409_p2;
        or_ln49_reg_890 <= or_ln49_fu_529_p2;
        select_ln40_1_reg_885 <= select_ln40_1_fu_427_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln37_reg_836_pp0_iter4_reg == 1'd0))) begin
        reuse_select_reg_915 <= reuse_select_fu_661_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln37_fu_280_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln37_reg_836 == 1'd1))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to6 = 1'b1;
    end else begin
        ap_idle_pp0_1to6 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln37_reg_836_pp0_iter5_reg == 1'd0)) begin
        if ((or_ln49_reg_890_pp0_iter5_reg == 1'd1)) begin
            ap_phi_mux_storemerge_phi_fu_221_p4 = and_ln50_fu_728_p2;
        end else if ((or_ln49_reg_890_pp0_iter5_reg == 1'd0)) begin
            ap_phi_mux_storemerge_phi_fu_221_p4 = or_ln52_fu_705_p2;
        end else begin
            ap_phi_mux_storemerge_phi_fu_221_p4 = ap_phi_reg_pp0_iter6_storemerge_reg_217;
        end
    end else begin
        ap_phi_mux_storemerge_phi_fu_221_p4 = ap_phi_reg_pp0_iter6_storemerge_reg_217;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln37_reg_836_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (or_ln49_reg_890 == 1'd0))) begin
        fm_blk_n_AR = m_axi_fm_ARREADY;
    end else begin
        fm_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (ap_predicate_op133_read_state12 == 1'b1))) begin
        fm_blk_n_R = m_axi_fm_RVALID;
    end else begin
        fm_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        in_fm_buf_address0 = in_fm_buf_addr_reg_905_pp0_iter6_reg;
    end else if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        in_fm_buf_address0 = p_cast_fu_640_p1;
    end else begin
        in_fm_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        in_fm_buf_ce0 = 1'b1;
    end else begin
        in_fm_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        in_fm_buf_we0 = 1'b1;
    end else begin
        in_fm_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op113_readreq_state5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_fm_ARVALID = 1'b1;
    end else begin
        m_axi_fm_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_predicate_op133_read_state12 == 1'b1))) begin
        m_axi_fm_RREADY = 1'b1;
    end else begin
        m_axi_fm_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to6 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln37_1_fu_600_p2 = (zext_ln37_1_fu_597_p1 + in_fm);

assign add_ln37_2_fu_286_p2 = (indvar_flatten44_fu_152 + 13'd1);

assign add_ln37_fu_298_p2 = (c_fu_148 + 2'd1);

assign add_ln40_1_fu_569_p2 = (indvar_flatten_fu_144 + 12'd1);

assign add_ln40_fu_344_p2 = (select_ln37_fu_310_p3 + 6'd1);

assign add_ln42_1_fu_380_p2 = (add_ln42 + zext_ln40_fu_374_p1);

assign add_ln42_2_fu_438_p2 = (add_ln42 + zext_ln40_1_fu_432_p1);

assign add_ln45_fu_564_p2 = (select_ln40_reg_872 + 6'd1);

assign add_ln49_1_fu_508_p2 = ($signed(zext_ln47_fu_502_p1) + $signed(7'd125));

assign add_ln49_fu_518_p2 = ($signed(sext_ln49_fu_514_p1) + $signed(zext_ln31_2_cast_reg_819));

assign add_ln52_1_fu_535_p2 = (add_ln52 + zext_ln49_fu_505_p1);

assign add_ln52_2_fu_608_p2 = ($signed(sext_ln52_2_fu_605_p1) + $signed(add_ln37_1_fu_600_p2));

assign add_ln52_3_fu_552_p2 = ($signed(sext_ln40_fu_486_p1) + $signed(sext_ln52_1_fu_548_p1));

assign add_ln52_4_fu_558_p2 = ($signed(add_ln52_3_fu_552_p2) + $signed(sext_ln45_mid2_v_cast_fu_498_p1));

assign addr_cmp_fu_647_p2 = ((reuse_addr_reg_fu_128 == p_cast_fu_640_p1) ? 1'b1 : 1'b0);

assign and_ln37_fu_338_p2 = (xor_ln37_fu_326_p2 & icmp_ln45_fu_332_p2);

assign and_ln50_fu_728_p2 = (xor_ln50_fu_722_p2 & reuse_select_reg_915);

assign and_ln52_fu_691_p2 = (xor_ln52_fu_685_p2 & reuse_select_reg_915);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state5_io));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state5_io));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((m_axi_fm_RVALID == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (ap_predicate_op133_read_state12 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((m_axi_fm_RVALID == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (ap_predicate_op133_read_state12 == 1'b1));
end

assign ap_block_state10_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_pp0_stage1_iter5 = ((m_axi_fm_RVALID == 1'b0) & (ap_predicate_op133_read_state12 == 1'b1));
end

assign ap_block_state13_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((m_axi_fm_ARREADY == 1'b0) & (ap_predicate_op113_readreq_state5 == 1'b1));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_332 = ((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign ap_phi_reg_pp0_iter6_storemerge_reg_217 = 'bx;

always @ (*) begin
    ap_predicate_op113_readreq_state5 = ((icmp_ln37_reg_836_pp0_iter1_reg == 1'd0) & (or_ln49_reg_890 == 1'd0));
end

always @ (*) begin
    ap_predicate_op133_read_state12 = ((or_ln49_reg_890_pp0_iter5_reg == 1'd0) & (icmp_ln37_reg_836_pp0_iter4_reg == 1'd0));
end

assign empty_37_fu_400_p2 = ((empty_fu_395_p2 > 11'd735) ? 1'b1 : 1'b0);

assign empty_fu_395_p2 = ($signed(tmp2_cast_fu_391_p1) + $signed(zext_ln30_cast_reg_824));

assign grp_fu_739_p0 = grp_fu_739_p00;

assign grp_fu_739_p00 = select_ln37_1_reg_852_pp0_iter4_reg;

assign grp_fu_739_p1 = 8'd52;

assign grp_fu_739_p2 = grp_fu_739_p20;

assign grp_fu_739_p20 = select_ln40_1_reg_885_pp0_iter4_reg;

assign icmp_ln37_fu_280_p2 = ((indvar_flatten44_fu_152 == 13'd7176) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_304_p2 = ((indvar_flatten_fu_144 == 12'd2392) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_332_p2 = ((j_fu_136 == 6'd46) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_523_p2 = ((add_ln49_fu_518_p2 > 12'd1279) ? 1'b1 : 1'b0);

assign in_fm_buf_d0 = storemerge_reg_217;

assign m_axi_fm_ARADDR = fm_addr_reg_899;

assign m_axi_fm_ARBURST = 2'd0;

assign m_axi_fm_ARCACHE = 4'd0;

assign m_axi_fm_ARID = 1'd0;

assign m_axi_fm_ARLEN = 32'd1;

assign m_axi_fm_ARLOCK = 2'd0;

assign m_axi_fm_ARPROT = 3'd0;

assign m_axi_fm_ARQOS = 4'd0;

assign m_axi_fm_ARREGION = 4'd0;

assign m_axi_fm_ARSIZE = 3'd0;

assign m_axi_fm_ARUSER = 1'd0;

assign m_axi_fm_AWADDR = 64'd0;

assign m_axi_fm_AWBURST = 2'd0;

assign m_axi_fm_AWCACHE = 4'd0;

assign m_axi_fm_AWID = 1'd0;

assign m_axi_fm_AWLEN = 32'd0;

assign m_axi_fm_AWLOCK = 2'd0;

assign m_axi_fm_AWPROT = 3'd0;

assign m_axi_fm_AWQOS = 4'd0;

assign m_axi_fm_AWREGION = 4'd0;

assign m_axi_fm_AWSIZE = 3'd0;

assign m_axi_fm_AWUSER = 1'd0;

assign m_axi_fm_AWVALID = 1'b0;

assign m_axi_fm_BREADY = 1'b0;

assign m_axi_fm_WDATA = 16'd0;

assign m_axi_fm_WID = 1'd0;

assign m_axi_fm_WLAST = 1'b0;

assign m_axi_fm_WSTRB = 2'd0;

assign m_axi_fm_WUSER = 1'd0;

assign m_axi_fm_WVALID = 1'b0;

assign mul_ln37_fu_409_p0 = mul_ln37_fu_409_p00;

assign mul_ln37_fu_409_p00 = select_ln37_1_reg_852;

assign mul_ln37_fu_409_p1 = 23'd1884160;

assign or_ln40_fu_350_p2 = (icmp_ln40_fu_304_p2 | and_ln37_fu_338_p2);

assign or_ln49_fu_529_p2 = (select_ln40_2_fu_464_p3 | icmp_ln49_fu_523_p2);

assign or_ln52_fu_705_p2 = (shl_ln52_1_fu_699_p2 | and_ln52_fu_691_p2);

assign p_cast_fu_640_p1 = grp_fu_739_p3;

assign p_mid15_fu_458_p2 = ((p_mid1_fu_453_p2 > 11'd735) ? 1'b1 : 1'b0);

assign p_mid1_fu_453_p2 = ($signed(tmp2_cast_mid1_fu_449_p1) + $signed(zext_ln30_cast_reg_824));

assign reuse_select_fu_661_p3 = ((addr_cmp_reg_910[0:0] == 1'b1) ? reuse_reg_fu_132 : in_fm_buf_q0);

assign select_ln37_1_fu_318_p3 = ((icmp_ln40_fu_304_p2[0:0] == 1'b1) ? add_ln37_fu_298_p2 : c_fu_148);

assign select_ln37_2_fu_415_p3 = ((icmp_ln40_reg_840[0:0] == 1'b1) ? p_mid132 : empty_37_fu_400_p2);

assign select_ln37_3_fu_421_p3 = ((icmp_ln40_reg_840[0:0] == 1'b1) ? add_ln42 : add_ln42_1_fu_380_p2);

assign select_ln37_fu_310_p3 = ((icmp_ln40_fu_304_p2[0:0] == 1'b1) ? 6'd0 : i_fu_140);

assign select_ln40_1_fu_427_p3 = ((and_ln37_reg_858[0:0] == 1'b1) ? add_ln40_reg_865 : select_ln37_reg_847);

assign select_ln40_2_fu_464_p3 = ((and_ln37_reg_858[0:0] == 1'b1) ? p_mid15_fu_458_p2 : select_ln37_2_fu_415_p3);

assign select_ln40_3_fu_471_p3 = ((and_ln37_reg_858[0:0] == 1'b1) ? add_ln42_2_fu_438_p2 : select_ln37_3_fu_421_p3);

assign select_ln40_4_fu_575_p3 = ((icmp_ln40_reg_840[0:0] == 1'b1) ? 12'd1 : add_ln40_1_fu_569_p2);

assign select_ln40_fu_356_p3 = ((or_ln40_fu_350_p2[0:0] == 1'b1) ? 6'd0 : j_fu_136);

assign sext_ln40_fu_486_p1 = $signed(sext_ln52_1_mid2_v_fu_478_p3);

assign sext_ln45_mid2_v_cast_fu_498_p1 = $signed(sext_ln45_mid2_v_fu_490_p3);

assign sext_ln45_mid2_v_fu_490_p3 = {{select_ln40_3_fu_471_p3}, {9'd0}};

assign sext_ln49_fu_514_p1 = $signed(add_ln49_1_fu_508_p2);

assign sext_ln52_1_fu_548_p1 = $signed(tmp_s_fu_540_p3);

assign sext_ln52_1_mid2_v_fu_478_p3 = {{select_ln40_3_fu_471_p3}, {11'd0}};

assign sext_ln52_2_fu_605_p1 = $signed(add_ln52_4_reg_894);

assign sext_ln52_fu_624_p1 = $signed(trunc_ln_fu_614_p4);

assign shl_ln3_fu_668_p3 = {{select_ln40_reg_872_pp0_iter5_reg}, {4'd0}};

assign shl_ln50_fu_716_p2 = 736'd65535 << zext_ln50_fu_712_p1;

assign shl_ln52_1_fu_699_p2 = zext_ln52_1_fu_696_p1 << zext_ln52_fu_675_p1;

assign shl_ln52_fu_679_p2 = 736'd65535 << zext_ln52_fu_675_p1;

assign tmp2_cast_fu_391_p1 = $signed(tmp2_fu_385_p2);

assign tmp2_cast_mid1_fu_449_p1 = $signed(tmp2_mid1_fu_443_p2);

assign tmp2_fu_385_p2 = ($signed(zext_ln42_fu_377_p1) + $signed(7'd125));

assign tmp2_mid1_fu_443_p2 = ($signed(zext_ln42_1_fu_435_p1) + $signed(7'd125));

assign tmp_s_fu_540_p3 = {{add_ln52_1_fu_535_p2}, {1'd0}};

assign trunc_ln_fu_614_p4 = {{add_ln52_2_fu_608_p2[63:1]}};

assign xor_ln37_fu_326_p2 = (icmp_ln40_fu_304_p2 ^ 1'd1);

assign xor_ln50_fu_722_p2 = (shl_ln50_fu_716_p2 ^ 736'd361473786714651839609485931802192366508973300717001923159475447150424810286233407987951861887389439612274926783780351561999781998832434041296198795326329101623141899709787663433296905279066051548640942013290819886814068735);

assign xor_ln52_fu_685_p2 = (shl_ln52_fu_679_p2 ^ 736'd361473786714651839609485931802192366508973300717001923159475447150424810286233407987951861887389439612274926783780351561999781998832434041296198795326329101623141899709787663433296905279066051548640942013290819886814068735);

assign zext_ln30_cast_fu_235_p1 = zext_ln30;

assign zext_ln31_2_cast_fu_231_p1 = zext_ln31_2;

assign zext_ln37_1_fu_597_p1 = mul_ln37_reg_880;

assign zext_ln40_1_fu_432_p1 = add_ln40_reg_865;

assign zext_ln40_fu_374_p1 = i_1_reg_830;

assign zext_ln42_1_fu_435_p1 = add_ln40_reg_865;

assign zext_ln42_fu_377_p1 = i_1_reg_830;

assign zext_ln47_fu_502_p1 = select_ln40_reg_872;

assign zext_ln49_fu_505_p1 = select_ln40_reg_872;

assign zext_ln50_fu_712_p1 = shl_ln3_fu_668_p3;

assign zext_ln52_1_fu_696_p1 = fm_addr_read_reg_921;

assign zext_ln52_fu_675_p1 = shl_ln3_fu_668_p3;

always @ (posedge ap_clk) begin
    zext_ln31_2_cast_reg_819[11] <= 1'b0;
    zext_ln30_cast_reg_824[10] <= 1'b0;
    add_ln52_4_reg_894[0] <= 1'b0;
end

endmodule //tiled_conv_load_input_tile_block_from_DRAM_0_0_Pipeline_INPUT_BUFFER_DEPTH_INPUT_BUFFER_HEI
