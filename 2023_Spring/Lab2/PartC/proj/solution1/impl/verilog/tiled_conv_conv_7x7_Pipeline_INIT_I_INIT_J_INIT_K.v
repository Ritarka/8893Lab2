// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tiled_conv_conv_7x7_Pipeline_INIT_I_INIT_J_INIT_K (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Y_buf_address0,
        Y_buf_ce0,
        Y_buf_we0,
        Y_buf_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] Y_buf_address0;
output   Y_buf_ce0;
output   Y_buf_we0;
output  [14:0] Y_buf_d0;

reg ap_idle;
reg Y_buf_ce0;
reg Y_buf_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln31_fu_124_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln33_fu_148_p2;
reg   [0:0] icmp_ln33_reg_361;
wire   [4:0] select_ln33_fu_236_p3;
reg   [4:0] select_ln33_reg_373;
reg   [4:0] select_ln33_reg_373_pp0_iter2_reg;
wire   [4:0] select_ln33_4_fu_244_p3;
reg   [4:0] select_ln33_4_reg_378;
wire   [10:0] add_ln36_3_fu_302_p2;
reg   [10:0] add_ln36_3_reg_388;
wire   [63:0] zext_ln36_6_fu_308_p1;
wire    ap_block_pp0_stage0;
reg   [4:0] k_fu_62;
wire   [4:0] add_ln35_fu_252_p2;
wire    ap_loop_init;
reg   [4:0] j_fu_66;
reg   [9:0] indvar_flatten_fu_70;
wire   [9:0] select_ln33_5_fu_172_p3;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [2:0] i_fu_74;
wire   [2:0] select_ln31_1_fu_154_p3;
reg   [2:0] ap_sig_allocacmp_i_load;
reg   [10:0] indvar_flatten13_fu_78;
wire   [10:0] add_ln31_1_fu_130_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten13_load;
wire   [2:0] add_ln31_fu_142_p2;
wire   [9:0] add_ln33_3_fu_166_p2;
wire   [0:0] icmp_ln35_fu_213_p2;
wire   [0:0] xor_ln31_fu_208_p2;
wire   [4:0] select_ln31_fu_201_p3;
wire   [0:0] and_ln31_fu_219_p2;
wire   [0:0] or_ln33_fu_231_p2;
wire   [4:0] add_ln33_fu_225_p2;
wire   [7:0] grp_fu_312_p3;
wire   [6:0] trunc_ln36_fu_271_p1;
wire   [9:0] tmp_fu_282_p3;
wire   [10:0] p_shl_fu_274_p3;
wire   [10:0] zext_ln36_4_fu_289_p1;
wire   [10:0] add_ln36_2_fu_293_p2;
wire   [10:0] zext_ln36_5_fu_299_p1;
wire   [2:0] grp_fu_312_p0;
wire   [4:0] grp_fu_312_p1;
wire   [4:0] grp_fu_312_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [7:0] grp_fu_312_p00;
wire   [7:0] grp_fu_312_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tiled_conv_mac_muladd_3ns_5ns_5ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 5 ),
    .dout_WIDTH( 8 ))
mac_muladd_3ns_5ns_5ns_8_4_1_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_312_p0),
    .din1(grp_fu_312_p1),
    .din2(grp_fu_312_p2),
    .ce(1'b1),
    .dout(grp_fu_312_p3)
);

tiled_conv_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln31_fu_124_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_74 <= select_ln31_1_fu_154_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_74 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln31_fu_124_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten13_fu_78 <= add_ln31_1_fu_130_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten13_fu_78 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln31_fu_124_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_70 <= select_ln33_5_fu_172_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_70 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_66 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            j_fu_66 <= select_ln33_4_fu_244_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            k_fu_62 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            k_fu_62 <= add_ln35_fu_252_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln36_3_reg_388 <= add_ln36_3_fu_302_p2;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        select_ln33_reg_373_pp0_iter2_reg <= select_ln33_reg_373;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        select_ln33_4_reg_378 <= select_ln33_4_fu_244_p3;
        select_ln33_reg_373 <= select_ln33_fu_236_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_124_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln33_reg_361 <= icmp_ln33_fu_148_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        Y_buf_ce0 = 1'b1;
    end else begin
        Y_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        Y_buf_we0 = 1'b1;
    end else begin
        Y_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_fu_124_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 3'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten13_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten13_load = indvar_flatten13_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_70;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Y_buf_address0 = zext_ln36_6_fu_308_p1;

assign Y_buf_d0 = 15'd0;

assign add_ln31_1_fu_130_p2 = (ap_sig_allocacmp_indvar_flatten13_load + 11'd1);

assign add_ln31_fu_142_p2 = (ap_sig_allocacmp_i_load + 3'd1);

assign add_ln33_3_fu_166_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln33_fu_225_p2 = (select_ln31_fu_201_p3 + 5'd1);

assign add_ln35_fu_252_p2 = (select_ln33_fu_236_p3 + 5'd1);

assign add_ln36_2_fu_293_p2 = (p_shl_fu_274_p3 + zext_ln36_4_fu_289_p1);

assign add_ln36_3_fu_302_p2 = (add_ln36_2_fu_293_p2 + zext_ln36_5_fu_299_p1);

assign and_ln31_fu_219_p2 = (xor_ln31_fu_208_p2 & icmp_ln35_fu_213_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_312_p0 = grp_fu_312_p00;

assign grp_fu_312_p00 = select_ln31_1_fu_154_p3;

assign grp_fu_312_p1 = 8'd23;

assign grp_fu_312_p2 = grp_fu_312_p20;

assign grp_fu_312_p20 = select_ln33_4_reg_378;

assign icmp_ln31_fu_124_p2 = ((ap_sig_allocacmp_indvar_flatten13_load == 11'd1840) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_148_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd460) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_213_p2 = ((k_fu_62 == 5'd20) ? 1'b1 : 1'b0);

assign or_ln33_fu_231_p2 = (icmp_ln33_reg_361 | and_ln31_fu_219_p2);

assign p_shl_fu_274_p3 = {{trunc_ln36_fu_271_p1}, {4'd0}};

assign select_ln31_1_fu_154_p3 = ((icmp_ln33_fu_148_p2[0:0] == 1'b1) ? add_ln31_fu_142_p2 : ap_sig_allocacmp_i_load);

assign select_ln31_fu_201_p3 = ((icmp_ln33_reg_361[0:0] == 1'b1) ? 5'd0 : j_fu_66);

assign select_ln33_4_fu_244_p3 = ((and_ln31_fu_219_p2[0:0] == 1'b1) ? add_ln33_fu_225_p2 : select_ln31_fu_201_p3);

assign select_ln33_5_fu_172_p3 = ((icmp_ln33_fu_148_p2[0:0] == 1'b1) ? 10'd1 : add_ln33_3_fu_166_p2);

assign select_ln33_fu_236_p3 = ((or_ln33_fu_231_p2[0:0] == 1'b1) ? 5'd0 : k_fu_62);

assign tmp_fu_282_p3 = {{grp_fu_312_p3}, {2'd0}};

assign trunc_ln36_fu_271_p1 = grp_fu_312_p3[6:0];

assign xor_ln31_fu_208_p2 = (icmp_ln33_reg_361 ^ 1'd1);

assign zext_ln36_4_fu_289_p1 = tmp_fu_282_p3;

assign zext_ln36_5_fu_299_p1 = select_ln33_reg_373_pp0_iter2_reg;

assign zext_ln36_6_fu_308_p1 = add_ln36_3_reg_388;

endmodule //tiled_conv_conv_7x7_Pipeline_INIT_I_INIT_J_INIT_K
