// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
// Version: 2022.1.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tiled_conv_tiled_conv_Pipeline_WEIGHT_KERNEL_NUM_WEIGHT_KERNEL_HEIGHT_WEIGHT_KERNEL_WIDTH (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_wt_AWVALID,
        m_axi_wt_AWREADY,
        m_axi_wt_AWADDR,
        m_axi_wt_AWID,
        m_axi_wt_AWLEN,
        m_axi_wt_AWSIZE,
        m_axi_wt_AWBURST,
        m_axi_wt_AWLOCK,
        m_axi_wt_AWCACHE,
        m_axi_wt_AWPROT,
        m_axi_wt_AWQOS,
        m_axi_wt_AWREGION,
        m_axi_wt_AWUSER,
        m_axi_wt_WVALID,
        m_axi_wt_WREADY,
        m_axi_wt_WDATA,
        m_axi_wt_WSTRB,
        m_axi_wt_WLAST,
        m_axi_wt_WID,
        m_axi_wt_WUSER,
        m_axi_wt_ARVALID,
        m_axi_wt_ARREADY,
        m_axi_wt_ARADDR,
        m_axi_wt_ARID,
        m_axi_wt_ARLEN,
        m_axi_wt_ARSIZE,
        m_axi_wt_ARBURST,
        m_axi_wt_ARLOCK,
        m_axi_wt_ARCACHE,
        m_axi_wt_ARPROT,
        m_axi_wt_ARQOS,
        m_axi_wt_ARREGION,
        m_axi_wt_ARUSER,
        m_axi_wt_RVALID,
        m_axi_wt_RREADY,
        m_axi_wt_RDATA,
        m_axi_wt_RLAST,
        m_axi_wt_RID,
        m_axi_wt_RFIFONUM,
        m_axi_wt_RUSER,
        m_axi_wt_RRESP,
        m_axi_wt_BVALID,
        m_axi_wt_BREADY,
        m_axi_wt_BRESP,
        m_axi_wt_BID,
        m_axi_wt_BUSER,
        sext_ln73,
        conv_wt_buf_V_address0,
        conv_wt_buf_V_ce0,
        conv_wt_buf_V_we0,
        conv_wt_buf_V_d0,
        conv_wt_buf_V_1_address0,
        conv_wt_buf_V_1_ce0,
        conv_wt_buf_V_1_we0,
        conv_wt_buf_V_1_d0,
        conv_wt_buf_V_2_address0,
        conv_wt_buf_V_2_ce0,
        conv_wt_buf_V_2_we0,
        conv_wt_buf_V_2_d0,
        conv_wt_buf_V_3_address0,
        conv_wt_buf_V_3_ce0,
        conv_wt_buf_V_3_we0,
        conv_wt_buf_V_3_d0,
        conv_wt_buf_V_4_address0,
        conv_wt_buf_V_4_ce0,
        conv_wt_buf_V_4_we0,
        conv_wt_buf_V_4_d0,
        conv_wt_buf_V_5_address0,
        conv_wt_buf_V_5_ce0,
        conv_wt_buf_V_5_we0,
        conv_wt_buf_V_5_d0,
        conv_wt_buf_V_6_address0,
        conv_wt_buf_V_6_ce0,
        conv_wt_buf_V_6_we0,
        conv_wt_buf_V_6_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_wt_AWVALID;
input   m_axi_wt_AWREADY;
output  [63:0] m_axi_wt_AWADDR;
output  [0:0] m_axi_wt_AWID;
output  [31:0] m_axi_wt_AWLEN;
output  [2:0] m_axi_wt_AWSIZE;
output  [1:0] m_axi_wt_AWBURST;
output  [1:0] m_axi_wt_AWLOCK;
output  [3:0] m_axi_wt_AWCACHE;
output  [2:0] m_axi_wt_AWPROT;
output  [3:0] m_axi_wt_AWQOS;
output  [3:0] m_axi_wt_AWREGION;
output  [0:0] m_axi_wt_AWUSER;
output   m_axi_wt_WVALID;
input   m_axi_wt_WREADY;
output  [15:0] m_axi_wt_WDATA;
output  [1:0] m_axi_wt_WSTRB;
output   m_axi_wt_WLAST;
output  [0:0] m_axi_wt_WID;
output  [0:0] m_axi_wt_WUSER;
output   m_axi_wt_ARVALID;
input   m_axi_wt_ARREADY;
output  [63:0] m_axi_wt_ARADDR;
output  [0:0] m_axi_wt_ARID;
output  [31:0] m_axi_wt_ARLEN;
output  [2:0] m_axi_wt_ARSIZE;
output  [1:0] m_axi_wt_ARBURST;
output  [1:0] m_axi_wt_ARLOCK;
output  [3:0] m_axi_wt_ARCACHE;
output  [2:0] m_axi_wt_ARPROT;
output  [3:0] m_axi_wt_ARQOS;
output  [3:0] m_axi_wt_ARREGION;
output  [0:0] m_axi_wt_ARUSER;
input   m_axi_wt_RVALID;
output   m_axi_wt_RREADY;
input  [15:0] m_axi_wt_RDATA;
input   m_axi_wt_RLAST;
input  [0:0] m_axi_wt_RID;
input  [9:0] m_axi_wt_RFIFONUM;
input  [0:0] m_axi_wt_RUSER;
input  [1:0] m_axi_wt_RRESP;
input   m_axi_wt_BVALID;
output   m_axi_wt_BREADY;
input  [1:0] m_axi_wt_BRESP;
input  [0:0] m_axi_wt_BID;
input  [0:0] m_axi_wt_BUSER;
input  [62:0] sext_ln73;
output  [6:0] conv_wt_buf_V_address0;
output   conv_wt_buf_V_ce0;
output   conv_wt_buf_V_we0;
output  [15:0] conv_wt_buf_V_d0;
output  [6:0] conv_wt_buf_V_1_address0;
output   conv_wt_buf_V_1_ce0;
output   conv_wt_buf_V_1_we0;
output  [15:0] conv_wt_buf_V_1_d0;
output  [6:0] conv_wt_buf_V_2_address0;
output   conv_wt_buf_V_2_ce0;
output   conv_wt_buf_V_2_we0;
output  [15:0] conv_wt_buf_V_2_d0;
output  [6:0] conv_wt_buf_V_3_address0;
output   conv_wt_buf_V_3_ce0;
output   conv_wt_buf_V_3_we0;
output  [15:0] conv_wt_buf_V_3_d0;
output  [6:0] conv_wt_buf_V_4_address0;
output   conv_wt_buf_V_4_ce0;
output   conv_wt_buf_V_4_we0;
output  [15:0] conv_wt_buf_V_4_d0;
output  [6:0] conv_wt_buf_V_5_address0;
output   conv_wt_buf_V_5_ce0;
output   conv_wt_buf_V_5_we0;
output  [15:0] conv_wt_buf_V_5_d0;
output  [6:0] conv_wt_buf_V_6_address0;
output   conv_wt_buf_V_6_ce0;
output   conv_wt_buf_V_6_we0;
output  [15:0] conv_wt_buf_V_6_d0;

reg ap_idle;
reg m_axi_wt_RREADY;
reg conv_wt_buf_V_ce0;
reg conv_wt_buf_V_we0;
reg conv_wt_buf_V_1_ce0;
reg conv_wt_buf_V_1_we0;
reg conv_wt_buf_V_2_ce0;
reg conv_wt_buf_V_2_we0;
reg conv_wt_buf_V_3_ce0;
reg conv_wt_buf_V_3_we0;
reg conv_wt_buf_V_4_ce0;
reg conv_wt_buf_V_4_we0;
reg conv_wt_buf_V_5_ce0;
reg conv_wt_buf_V_5_we0;
reg conv_wt_buf_V_6_ce0;
reg conv_wt_buf_V_6_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln73_fu_282_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    wt_blk_n_R;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln76_fu_300_p2;
reg   [0:0] icmp_ln76_reg_642;
wire   [0:0] xor_ln73_fu_306_p2;
reg   [0:0] xor_ln73_reg_650;
wire   [0:0] icmp_ln79_fu_312_p2;
reg   [0:0] icmp_ln79_reg_655;
wire   [0:0] and_ln73_1_fu_318_p2;
reg   [0:0] and_ln73_1_reg_660;
wire   [0:0] or_ln76_fu_324_p2;
reg   [0:0] or_ln76_reg_666;
wire   [6:0] add_ln84_fu_472_p2;
reg   [6:0] add_ln84_reg_671;
wire   [2:0] select_ln79_fu_510_p3;
reg   [2:0] select_ln79_reg_677;
wire   [2:0] select_ln79_1_fu_518_p3;
reg   [2:0] select_ln79_1_reg_682;
reg   [15:0] wt_addr_read_reg_686;
wire   [63:0] zext_ln84_4_fu_571_p1;
reg   [2:0] kw_fu_104;
wire   [2:0] add_ln82_fu_526_p2;
wire    ap_loop_init;
reg   [2:0] kh_fu_108;
reg   [5:0] indvar_flatten136_fu_112;
wire   [5:0] select_ln79_2_fu_342_p3;
reg   [5:0] ap_sig_allocacmp_indvar_flatten136_load_1;
reg   [5:0] ap_sig_allocacmp_indvar_flatten136_load;
reg   [1:0] c_fu_116;
wire   [1:0] select_ln76_1_fu_461_p3;
reg   [7:0] indvar_flatten148_fu_120;
wire   [7:0] select_ln76_2_fu_356_p3;
reg   [7:0] ap_sig_allocacmp_indvar_flatten148_load_1;
reg   [7:0] ap_sig_allocacmp_indvar_flatten148_load;
reg   [2:0] f_fu_124;
wire   [2:0] select_ln73_1_fu_404_p3;
reg   [9:0] indvar_flatten170_fu_128;
wire   [9:0] add_ln73_1_fu_288_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten170_load;
wire   [5:0] add_ln79_1_fu_336_p2;
wire   [7:0] add_ln76_1_fu_350_p2;
wire   [2:0] add_ln73_fu_391_p2;
wire   [4:0] tmp_9_fu_415_p3;
wire   [5:0] zext_ln84_1_fu_423_p1;
wire   [5:0] zext_ln84_fu_411_p1;
wire   [5:0] sub_ln84_fu_427_p2;
wire   [0:0] icmp_ln82_fu_437_p2;
wire   [1:0] select_ln73_fu_397_p3;
wire   [1:0] add_ln76_fu_448_p2;
wire  signed [6:0] sext_ln76_fu_433_p1;
wire   [6:0] zext_ln84_2_fu_468_p1;
wire   [0:0] xor_ln76_fu_478_p2;
wire   [0:0] and_ln73_fu_443_p2;
wire   [0:0] or_ln76_1_fu_483_p2;
wire   [2:0] select_ln76_fu_454_p3;
wire   [0:0] and_ln76_fu_488_p2;
wire   [0:0] or_ln79_fu_500_p2;
wire   [0:0] or_ln79_1_fu_505_p2;
wire   [2:0] add_ln79_fu_494_p2;
wire   [6:0] shl_ln84_fu_552_p2;
wire   [6:0] sub_ln84_1_fu_557_p2;
wire   [6:0] zext_ln84_3_fu_562_p1;
wire   [6:0] add_ln84_1_fu_565_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

tiled_conv_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            c_fu_116 <= 2'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            c_fu_116 <= select_ln76_1_fu_461_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            f_fu_124 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            f_fu_124 <= select_ln73_1_fu_404_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln73_fu_282_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten136_fu_112 <= select_ln79_2_fu_342_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten136_fu_112 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln73_fu_282_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten148_fu_120 <= select_ln76_2_fu_356_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten148_fu_120 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln73_fu_282_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten170_fu_128 <= add_ln73_1_fu_288_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten170_fu_128 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            kh_fu_108 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            kh_fu_108 <= select_ln79_1_fu_518_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            kw_fu_104 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            kw_fu_104 <= add_ln82_fu_526_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln84_reg_671 <= add_ln84_fu_472_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        select_ln79_1_reg_682 <= select_ln79_1_fu_518_p3;
        select_ln79_reg_677 <= select_ln79_fu_510_p3;
        wt_addr_read_reg_686 <= m_axi_wt_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_fu_282_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln73_1_reg_660 <= and_ln73_1_fu_318_p2;
        icmp_ln76_reg_642 <= icmp_ln76_fu_300_p2;
        icmp_ln79_reg_655 <= icmp_ln79_fu_312_p2;
        or_ln76_reg_666 <= or_ln76_fu_324_p2;
        xor_ln73_reg_650 <= xor_ln73_fu_306_p2;
    end
end

always @ (*) begin
    if (((icmp_ln73_fu_282_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten136_load = 6'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten136_load = indvar_flatten136_fu_112;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten136_load_1 = 6'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten136_load_1 = indvar_flatten136_fu_112;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten148_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten148_load = indvar_flatten148_fu_120;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten148_load_1 = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten148_load_1 = indvar_flatten148_fu_120;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten170_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten170_load = indvar_flatten170_fu_128;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        conv_wt_buf_V_1_ce0 = 1'b1;
    end else begin
        conv_wt_buf_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln79_1_reg_682 == 3'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        conv_wt_buf_V_1_we0 = 1'b1;
    end else begin
        conv_wt_buf_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        conv_wt_buf_V_2_ce0 = 1'b1;
    end else begin
        conv_wt_buf_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln79_1_reg_682 == 3'd2) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        conv_wt_buf_V_2_we0 = 1'b1;
    end else begin
        conv_wt_buf_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        conv_wt_buf_V_3_ce0 = 1'b1;
    end else begin
        conv_wt_buf_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln79_1_reg_682 == 3'd3) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        conv_wt_buf_V_3_we0 = 1'b1;
    end else begin
        conv_wt_buf_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        conv_wt_buf_V_4_ce0 = 1'b1;
    end else begin
        conv_wt_buf_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln79_1_reg_682 == 3'd4) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        conv_wt_buf_V_4_we0 = 1'b1;
    end else begin
        conv_wt_buf_V_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        conv_wt_buf_V_5_ce0 = 1'b1;
    end else begin
        conv_wt_buf_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln79_1_reg_682 == 3'd5) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        conv_wt_buf_V_5_we0 = 1'b1;
    end else begin
        conv_wt_buf_V_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        conv_wt_buf_V_6_ce0 = 1'b1;
    end else begin
        conv_wt_buf_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & ((select_ln79_1_reg_682 == 3'd6) | (select_ln79_1_reg_682 == 3'd7)))) begin
        conv_wt_buf_V_6_we0 = 1'b1;
    end else begin
        conv_wt_buf_V_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        conv_wt_buf_V_ce0 = 1'b1;
    end else begin
        conv_wt_buf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (select_ln79_1_reg_682 == 3'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        conv_wt_buf_V_we0 = 1'b1;
    end else begin
        conv_wt_buf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_wt_RREADY = 1'b1;
    end else begin
        m_axi_wt_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        wt_blk_n_R = m_axi_wt_RVALID;
    end else begin
        wt_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln73_1_fu_288_p2 = (ap_sig_allocacmp_indvar_flatten170_load + 10'd1);

assign add_ln73_fu_391_p2 = (f_fu_124 + 3'd1);

assign add_ln76_1_fu_350_p2 = (ap_sig_allocacmp_indvar_flatten148_load + 8'd1);

assign add_ln76_fu_448_p2 = (select_ln73_fu_397_p3 + 2'd1);

assign add_ln79_1_fu_336_p2 = (ap_sig_allocacmp_indvar_flatten136_load + 6'd1);

assign add_ln79_fu_494_p2 = (select_ln76_fu_454_p3 + 3'd1);

assign add_ln82_fu_526_p2 = (select_ln79_fu_510_p3 + 3'd1);

assign add_ln84_1_fu_565_p2 = (sub_ln84_1_fu_557_p2 + zext_ln84_3_fu_562_p1);

assign add_ln84_fu_472_p2 = ($signed(sext_ln76_fu_433_p1) + $signed(zext_ln84_2_fu_468_p1));

assign and_ln73_1_fu_318_p2 = (xor_ln73_fu_306_p2 & icmp_ln79_fu_312_p2);

assign and_ln73_fu_443_p2 = (xor_ln73_reg_650 & icmp_ln82_fu_437_p2);

assign and_ln76_fu_488_p2 = (or_ln76_1_fu_483_p2 & and_ln73_fu_443_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_wt_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_wt_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (m_axi_wt_RVALID == 1'b0);
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign conv_wt_buf_V_1_address0 = zext_ln84_4_fu_571_p1;

assign conv_wt_buf_V_1_d0 = wt_addr_read_reg_686;

assign conv_wt_buf_V_2_address0 = zext_ln84_4_fu_571_p1;

assign conv_wt_buf_V_2_d0 = wt_addr_read_reg_686;

assign conv_wt_buf_V_3_address0 = zext_ln84_4_fu_571_p1;

assign conv_wt_buf_V_3_d0 = wt_addr_read_reg_686;

assign conv_wt_buf_V_4_address0 = zext_ln84_4_fu_571_p1;

assign conv_wt_buf_V_4_d0 = wt_addr_read_reg_686;

assign conv_wt_buf_V_5_address0 = zext_ln84_4_fu_571_p1;

assign conv_wt_buf_V_5_d0 = wt_addr_read_reg_686;

assign conv_wt_buf_V_6_address0 = zext_ln84_4_fu_571_p1;

assign conv_wt_buf_V_6_d0 = wt_addr_read_reg_686;

assign conv_wt_buf_V_address0 = zext_ln84_4_fu_571_p1;

assign conv_wt_buf_V_d0 = wt_addr_read_reg_686;

assign icmp_ln73_fu_282_p2 = ((ap_sig_allocacmp_indvar_flatten170_load == 10'd588) ? 1'b1 : 1'b0);

assign icmp_ln76_fu_300_p2 = ((ap_sig_allocacmp_indvar_flatten148_load_1 == 8'd147) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_312_p2 = ((ap_sig_allocacmp_indvar_flatten136_load_1 == 6'd49) ? 1'b1 : 1'b0);

assign icmp_ln82_fu_437_p2 = ((kw_fu_104 == 3'd7) ? 1'b1 : 1'b0);

assign m_axi_wt_ARADDR = 64'd0;

assign m_axi_wt_ARBURST = 2'd0;

assign m_axi_wt_ARCACHE = 4'd0;

assign m_axi_wt_ARID = 1'd0;

assign m_axi_wt_ARLEN = 32'd0;

assign m_axi_wt_ARLOCK = 2'd0;

assign m_axi_wt_ARPROT = 3'd0;

assign m_axi_wt_ARQOS = 4'd0;

assign m_axi_wt_ARREGION = 4'd0;

assign m_axi_wt_ARSIZE = 3'd0;

assign m_axi_wt_ARUSER = 1'd0;

assign m_axi_wt_ARVALID = 1'b0;

assign m_axi_wt_AWADDR = 64'd0;

assign m_axi_wt_AWBURST = 2'd0;

assign m_axi_wt_AWCACHE = 4'd0;

assign m_axi_wt_AWID = 1'd0;

assign m_axi_wt_AWLEN = 32'd0;

assign m_axi_wt_AWLOCK = 2'd0;

assign m_axi_wt_AWPROT = 3'd0;

assign m_axi_wt_AWQOS = 4'd0;

assign m_axi_wt_AWREGION = 4'd0;

assign m_axi_wt_AWSIZE = 3'd0;

assign m_axi_wt_AWUSER = 1'd0;

assign m_axi_wt_AWVALID = 1'b0;

assign m_axi_wt_BREADY = 1'b0;

assign m_axi_wt_WDATA = 16'd0;

assign m_axi_wt_WID = 1'd0;

assign m_axi_wt_WLAST = 1'b0;

assign m_axi_wt_WSTRB = 2'd0;

assign m_axi_wt_WUSER = 1'd0;

assign m_axi_wt_WVALID = 1'b0;

assign or_ln76_1_fu_483_p2 = (xor_ln76_fu_478_p2 | icmp_ln76_reg_642);

assign or_ln76_fu_324_p2 = (icmp_ln76_fu_300_p2 | and_ln73_1_fu_318_p2);

assign or_ln79_1_fu_505_p2 = (or_ln79_fu_500_p2 | icmp_ln76_reg_642);

assign or_ln79_fu_500_p2 = (and_ln76_fu_488_p2 | and_ln73_1_reg_660);

assign select_ln73_1_fu_404_p3 = ((icmp_ln76_reg_642[0:0] == 1'b1) ? add_ln73_fu_391_p2 : f_fu_124);

assign select_ln73_fu_397_p3 = ((icmp_ln76_reg_642[0:0] == 1'b1) ? 2'd0 : c_fu_116);

assign select_ln76_1_fu_461_p3 = ((and_ln73_1_reg_660[0:0] == 1'b1) ? add_ln76_fu_448_p2 : select_ln73_fu_397_p3);

assign select_ln76_2_fu_356_p3 = ((icmp_ln76_fu_300_p2[0:0] == 1'b1) ? 8'd1 : add_ln76_1_fu_350_p2);

assign select_ln76_fu_454_p3 = ((or_ln76_reg_666[0:0] == 1'b1) ? 3'd0 : kh_fu_108);

assign select_ln79_1_fu_518_p3 = ((and_ln76_fu_488_p2[0:0] == 1'b1) ? add_ln79_fu_494_p2 : select_ln76_fu_454_p3);

assign select_ln79_2_fu_342_p3 = ((or_ln76_fu_324_p2[0:0] == 1'b1) ? 6'd1 : add_ln79_1_fu_336_p2);

assign select_ln79_fu_510_p3 = ((or_ln79_1_fu_505_p2[0:0] == 1'b1) ? 3'd0 : kw_fu_104);

assign sext_ln76_fu_433_p1 = $signed(sub_ln84_fu_427_p2);

assign shl_ln84_fu_552_p2 = add_ln84_reg_671 << 7'd3;

assign sub_ln84_1_fu_557_p2 = (shl_ln84_fu_552_p2 - add_ln84_reg_671);

assign sub_ln84_fu_427_p2 = (zext_ln84_1_fu_423_p1 - zext_ln84_fu_411_p1);

assign tmp_9_fu_415_p3 = {{select_ln73_1_fu_404_p3}, {2'd0}};

assign xor_ln73_fu_306_p2 = (icmp_ln76_fu_300_p2 ^ 1'd1);

assign xor_ln76_fu_478_p2 = (icmp_ln79_reg_655 ^ 1'd1);

assign zext_ln84_1_fu_423_p1 = tmp_9_fu_415_p3;

assign zext_ln84_2_fu_468_p1 = select_ln76_1_fu_461_p3;

assign zext_ln84_3_fu_562_p1 = select_ln79_reg_677;

assign zext_ln84_4_fu_571_p1 = add_ln84_1_fu_565_p2;

assign zext_ln84_fu_411_p1 = select_ln73_1_fu_404_p3;

endmodule //tiled_conv_tiled_conv_Pipeline_WEIGHT_KERNEL_NUM_WEIGHT_KERNEL_HEIGHT_WEIGHT_KERNEL_WIDTH
